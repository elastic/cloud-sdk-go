// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// UpdateExtensionReader is a Reader for the UpdateExtension structure.
type UpdateExtensionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExtensionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateExtensionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateExtensionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateExtensionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateExtensionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateExtensionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateExtensionOK creates a UpdateExtensionOK with default headers values
func NewUpdateExtensionOK() *UpdateExtensionOK {
	return &UpdateExtensionOK{}
}

/*
UpdateExtensionOK describes a response with status code 200, with default header values.

Extension updated successfully.
*/
type UpdateExtensionOK struct {

	/* The date-time when the resource was created (ISO format relative to UTC)
	 */
	XCloudResourceCreated string

	/* The date-time when the resource was last modified (ISO format relative to UTC)
	 */
	XCloudResourceLastModified string

	/* The resource version, which is used to avoid update conflicts with concurrent operations
	 */
	XCloudResourceVersion string

	Payload *models.Extension
}

// IsSuccess returns true when this update extension o k response has a 2xx status code
func (o *UpdateExtensionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update extension o k response has a 3xx status code
func (o *UpdateExtensionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update extension o k response has a 4xx status code
func (o *UpdateExtensionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update extension o k response has a 5xx status code
func (o *UpdateExtensionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update extension o k response a status code equal to that given
func (o *UpdateExtensionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update extension o k response
func (o *UpdateExtensionOK) Code() int {
	return 200
}

func (o *UpdateExtensionOK) Error() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionOK  %+v", 200, o.Payload)
}

func (o *UpdateExtensionOK) String() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionOK  %+v", 200, o.Payload)
}

func (o *UpdateExtensionOK) GetPayload() *models.Extension {
	return o.Payload
}

func (o *UpdateExtensionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-resource-created
	hdrXCloudResourceCreated := response.GetHeader("x-cloud-resource-created")

	if hdrXCloudResourceCreated != "" {
		o.XCloudResourceCreated = hdrXCloudResourceCreated
	}

	// hydrates response header x-cloud-resource-last-modified
	hdrXCloudResourceLastModified := response.GetHeader("x-cloud-resource-last-modified")

	if hdrXCloudResourceLastModified != "" {
		o.XCloudResourceLastModified = hdrXCloudResourceLastModified
	}

	// hydrates response header x-cloud-resource-version
	hdrXCloudResourceVersion := response.GetHeader("x-cloud-resource-version")

	if hdrXCloudResourceVersion != "" {
		o.XCloudResourceVersion = hdrXCloudResourceVersion
	}

	o.Payload = new(models.Extension)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtensionBadRequest creates a UpdateExtensionBadRequest with default headers values
func NewUpdateExtensionBadRequest() *UpdateExtensionBadRequest {
	return &UpdateExtensionBadRequest{}
}

/*
UpdateExtensionBadRequest describes a response with status code 400, with default header values.

Could not download the extension from the specified URL. (code: `extensions.request_execution_failed`)
*/
type UpdateExtensionBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this update extension bad request response has a 2xx status code
func (o *UpdateExtensionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update extension bad request response has a 3xx status code
func (o *UpdateExtensionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update extension bad request response has a 4xx status code
func (o *UpdateExtensionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update extension bad request response has a 5xx status code
func (o *UpdateExtensionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update extension bad request response a status code equal to that given
func (o *UpdateExtensionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update extension bad request response
func (o *UpdateExtensionBadRequest) Code() int {
	return 400
}

func (o *UpdateExtensionBadRequest) Error() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExtensionBadRequest) String() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExtensionBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateExtensionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtensionUnauthorized creates a UpdateExtensionUnauthorized with default headers values
func NewUpdateExtensionUnauthorized() *UpdateExtensionUnauthorized {
	return &UpdateExtensionUnauthorized{}
}

/*
	UpdateExtensionUnauthorized describes a response with status code 401, with default header values.

	* The extension does not belong to you. (code: `extensions.unauthorised`)

* Your current session does not have a user id associated with it. (code: `extensions.no_user_id`)
*/
type UpdateExtensionUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this update extension unauthorized response has a 2xx status code
func (o *UpdateExtensionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update extension unauthorized response has a 3xx status code
func (o *UpdateExtensionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update extension unauthorized response has a 4xx status code
func (o *UpdateExtensionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update extension unauthorized response has a 5xx status code
func (o *UpdateExtensionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update extension unauthorized response a status code equal to that given
func (o *UpdateExtensionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update extension unauthorized response
func (o *UpdateExtensionUnauthorized) Code() int {
	return 401
}

func (o *UpdateExtensionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateExtensionUnauthorized) String() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateExtensionUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateExtensionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtensionNotFound creates a UpdateExtensionNotFound with default headers values
func NewUpdateExtensionNotFound() *UpdateExtensionNotFound {
	return &UpdateExtensionNotFound{}
}

/*
UpdateExtensionNotFound describes a response with status code 404, with default header values.

The extension you want does not exist. (code: `extensions.not_found`)
*/
type UpdateExtensionNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this update extension not found response has a 2xx status code
func (o *UpdateExtensionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update extension not found response has a 3xx status code
func (o *UpdateExtensionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update extension not found response has a 4xx status code
func (o *UpdateExtensionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update extension not found response has a 5xx status code
func (o *UpdateExtensionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update extension not found response a status code equal to that given
func (o *UpdateExtensionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update extension not found response
func (o *UpdateExtensionNotFound) Code() int {
	return 404
}

func (o *UpdateExtensionNotFound) Error() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExtensionNotFound) String() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExtensionNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateExtensionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtensionConflict creates a UpdateExtensionConflict with default headers values
func NewUpdateExtensionConflict() *UpdateExtensionConflict {
	return &UpdateExtensionConflict{}
}

/*
UpdateExtensionConflict describes a response with status code 409, with default header values.

The version you sent does not match the persisted version. (code: `extensions.version_conflict`)
*/
type UpdateExtensionConflict struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this update extension conflict response has a 2xx status code
func (o *UpdateExtensionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update extension conflict response has a 3xx status code
func (o *UpdateExtensionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update extension conflict response has a 4xx status code
func (o *UpdateExtensionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update extension conflict response has a 5xx status code
func (o *UpdateExtensionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update extension conflict response a status code equal to that given
func (o *UpdateExtensionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update extension conflict response
func (o *UpdateExtensionConflict) Code() int {
	return 409
}

func (o *UpdateExtensionConflict) Error() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionConflict  %+v", 409, o.Payload)
}

func (o *UpdateExtensionConflict) String() string {
	return fmt.Sprintf("[POST /deployments/extensions/{extension_id}][%d] updateExtensionConflict  %+v", 409, o.Payload)
}

func (o *UpdateExtensionConflict) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateExtensionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
