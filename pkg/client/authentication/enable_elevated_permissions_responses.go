// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// EnableElevatedPermissionsReader is a Reader for the EnableElevatedPermissions structure.
type EnableElevatedPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableElevatedPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableElevatedPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableElevatedPermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnableElevatedPermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewEnableElevatedPermissionsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewEnableElevatedPermissionsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnableElevatedPermissionsOK creates a EnableElevatedPermissionsOK with default headers values
func NewEnableElevatedPermissionsOK() *EnableElevatedPermissionsOK {
	return &EnableElevatedPermissionsOK{}
}

/* EnableElevatedPermissionsOK describes a response with status code 200, with default header values.

Elevated permissions are enabled and the authorization token was generated.
*/
type EnableElevatedPermissionsOK struct {
	Payload *models.TokenResponse
}

func (o *EnableElevatedPermissionsOK) Error() string {
	return fmt.Sprintf("[POST /users/auth/_elevate][%d] enableElevatedPermissionsOK  %+v", 200, o.Payload)
}
func (o *EnableElevatedPermissionsOK) GetPayload() *models.TokenResponse {
	return o.Payload
}

func (o *EnableElevatedPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableElevatedPermissionsBadRequest creates a EnableElevatedPermissionsBadRequest with default headers values
func NewEnableElevatedPermissionsBadRequest() *EnableElevatedPermissionsBadRequest {
	return &EnableElevatedPermissionsBadRequest{}
}

/* EnableElevatedPermissionsBadRequest describes a response with status code 400, with default header values.

Missed or invalid MFA token. (code: `authc.invalid_token`)
*/
type EnableElevatedPermissionsBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *EnableElevatedPermissionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/auth/_elevate][%d] enableElevatedPermissionsBadRequest  %+v", 400, o.Payload)
}
func (o *EnableElevatedPermissionsBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *EnableElevatedPermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableElevatedPermissionsUnauthorized creates a EnableElevatedPermissionsUnauthorized with default headers values
func NewEnableElevatedPermissionsUnauthorized() *EnableElevatedPermissionsUnauthorized {
	return &EnableElevatedPermissionsUnauthorized{}
}

/* EnableElevatedPermissionsUnauthorized describes a response with status code 401, with default header values.

The authentication token is invalid or expired. (code: `root.unauthorized`)
*/
type EnableElevatedPermissionsUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *EnableElevatedPermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/auth/_elevate][%d] enableElevatedPermissionsUnauthorized  %+v", 401, o.Payload)
}
func (o *EnableElevatedPermissionsUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *EnableElevatedPermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableElevatedPermissionsNotImplemented creates a EnableElevatedPermissionsNotImplemented with default headers values
func NewEnableElevatedPermissionsNotImplemented() *EnableElevatedPermissionsNotImplemented {
	return &EnableElevatedPermissionsNotImplemented{}
}

/* EnableElevatedPermissionsNotImplemented describes a response with status code 501, with default header values.

The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`)
*/
type EnableElevatedPermissionsNotImplemented struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *EnableElevatedPermissionsNotImplemented) Error() string {
	return fmt.Sprintf("[POST /users/auth/_elevate][%d] enableElevatedPermissionsNotImplemented  %+v", 501, o.Payload)
}
func (o *EnableElevatedPermissionsNotImplemented) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *EnableElevatedPermissionsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableElevatedPermissionsBadGateway creates a EnableElevatedPermissionsBadGateway with default headers values
func NewEnableElevatedPermissionsBadGateway() *EnableElevatedPermissionsBadGateway {
	return &EnableElevatedPermissionsBadGateway{}
}

/* EnableElevatedPermissionsBadGateway describes a response with status code 502, with default header values.

The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`)
*/
type EnableElevatedPermissionsBadGateway struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *EnableElevatedPermissionsBadGateway) Error() string {
	return fmt.Sprintf("[POST /users/auth/_elevate][%d] enableElevatedPermissionsBadGateway  %+v", 502, o.Payload)
}
func (o *EnableElevatedPermissionsBadGateway) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *EnableElevatedPermissionsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
