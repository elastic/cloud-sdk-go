// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// LoginReader is a Reader for the Login structure.
type LoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 302:
		result := NewLoginFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLoginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewLoginNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewLoginBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLoginOK creates a LoginOK with default headers values
func NewLoginOK() *LoginOK {
	return &LoginOK{}
}

/*
LoginOK describes a response with status code 200, with default header values.

Login successful, returns the token in the body (if 'login_state.path' not specified)
*/
type LoginOK struct {
	Payload *models.TokenResponse
}

// IsSuccess returns true when this login o k response has a 2xx status code
func (o *LoginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login o k response has a 3xx status code
func (o *LoginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login o k response has a 4xx status code
func (o *LoginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login o k response has a 5xx status code
func (o *LoginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login o k response a status code equal to that given
func (o *LoginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login o k response
func (o *LoginOK) Code() int {
	return 200
}

func (o *LoginOK) Error() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) String() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) GetPayload() *models.TokenResponse {
	return o.Payload
}

func (o *LoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginFound creates a LoginFound with default headers values
func NewLoginFound() *LoginFound {
	return &LoginFound{}
}

/*
LoginFound describes a response with status code 302, with default header values.

Redirects to '/sso/token#BEARER_TOKEN?state=LOGIN_STATE' with the fragment containing a bearer token  (if 'login_state.path' is specified)
*/
type LoginFound struct {
	Payload models.EmptyResponse
}

// IsSuccess returns true when this login found response has a 2xx status code
func (o *LoginFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login found response has a 3xx status code
func (o *LoginFound) IsRedirect() bool {
	return true
}

// IsClientError returns true when this login found response has a 4xx status code
func (o *LoginFound) IsClientError() bool {
	return false
}

// IsServerError returns true when this login found response has a 5xx status code
func (o *LoginFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login found response a status code equal to that given
func (o *LoginFound) IsCode(code int) bool {
	return code == 302
}

// Code gets the status code for the login found response
func (o *LoginFound) Code() int {
	return 302
}

func (o *LoginFound) Error() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginFound  %+v", 302, o.Payload)
}

func (o *LoginFound) String() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginFound  %+v", 302, o.Payload)
}

func (o *LoginFound) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *LoginFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUnauthorized creates a LoginUnauthorized with default headers values
func NewLoginUnauthorized() *LoginUnauthorized {
	return &LoginUnauthorized{}
}

/*
LoginUnauthorized describes a response with status code 401, with default header values.

The supplied authentication is invalid. (code: `root.unauthenticated`)
*/
type LoginUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this login unauthorized response has a 2xx status code
func (o *LoginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login unauthorized response has a 3xx status code
func (o *LoginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login unauthorized response has a 4xx status code
func (o *LoginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login unauthorized response has a 5xx status code
func (o *LoginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login unauthorized response a status code equal to that given
func (o *LoginUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login unauthorized response
func (o *LoginUnauthorized) Code() int {
	return 401
}

func (o *LoginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginUnauthorized  %+v", 401, o.Payload)
}

func (o *LoginUnauthorized) String() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginUnauthorized  %+v", 401, o.Payload)
}

func (o *LoginUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *LoginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginNotImplemented creates a LoginNotImplemented with default headers values
func NewLoginNotImplemented() *LoginNotImplemented {
	return &LoginNotImplemented{}
}

/*
LoginNotImplemented describes a response with status code 501, with default header values.

The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`)
*/
type LoginNotImplemented struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this login not implemented response has a 2xx status code
func (o *LoginNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login not implemented response has a 3xx status code
func (o *LoginNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login not implemented response has a 4xx status code
func (o *LoginNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this login not implemented response has a 5xx status code
func (o *LoginNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this login not implemented response a status code equal to that given
func (o *LoginNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the login not implemented response
func (o *LoginNotImplemented) Code() int {
	return 501
}

func (o *LoginNotImplemented) Error() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginNotImplemented  %+v", 501, o.Payload)
}

func (o *LoginNotImplemented) String() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginNotImplemented  %+v", 501, o.Payload)
}

func (o *LoginNotImplemented) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *LoginNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginBadGateway creates a LoginBadGateway with default headers values
func NewLoginBadGateway() *LoginBadGateway {
	return &LoginBadGateway{}
}

/*
LoginBadGateway describes a response with status code 502, with default header values.

The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`)
*/
type LoginBadGateway struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this login bad gateway response has a 2xx status code
func (o *LoginBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login bad gateway response has a 3xx status code
func (o *LoginBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login bad gateway response has a 4xx status code
func (o *LoginBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this login bad gateway response has a 5xx status code
func (o *LoginBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this login bad gateway response a status code equal to that given
func (o *LoginBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the login bad gateway response
func (o *LoginBadGateway) Code() int {
	return 502
}

func (o *LoginBadGateway) Error() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginBadGateway  %+v", 502, o.Payload)
}

func (o *LoginBadGateway) String() string {
	return fmt.Sprintf("[POST /users/auth/_login][%d] loginBadGateway  %+v", 502, o.Payload)
}

func (o *LoginBadGateway) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *LoginBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
