// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// SamlCallbackReader is a Reader for the SamlCallback structure.
type SamlCallbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SamlCallbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 302:
		result := NewSamlCallbackFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSamlCallbackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewSamlCallbackNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewSamlCallbackBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSamlCallbackFound creates a SamlCallbackFound with default headers values
func NewSamlCallbackFound() *SamlCallbackFound {
	return &SamlCallbackFound{}
}

/* SamlCallbackFound describes a response with status code 302, with default header values.

Redirects to the UI endpoint with an authorization token in the fragment and the relay state, if it was specified during the initialization.
*/
type SamlCallbackFound struct {
	Payload models.EmptyResponse
}

func (o *SamlCallbackFound) Error() string {
	return fmt.Sprintf("[POST /users/auth/saml/_callback][%d] samlCallbackFound  %+v", 302, o.Payload)
}
func (o *SamlCallbackFound) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *SamlCallbackFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSamlCallbackUnauthorized creates a SamlCallbackUnauthorized with default headers values
func NewSamlCallbackUnauthorized() *SamlCallbackUnauthorized {
	return &SamlCallbackUnauthorized{}
}

/* SamlCallbackUnauthorized describes a response with status code 401, with default header values.

The supplied SAML response is invalid. (code: `root.unauthenticated`)
*/
type SamlCallbackUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SamlCallbackUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/auth/saml/_callback][%d] samlCallbackUnauthorized  %+v", 401, o.Payload)
}
func (o *SamlCallbackUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SamlCallbackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSamlCallbackNotImplemented creates a SamlCallbackNotImplemented with default headers values
func NewSamlCallbackNotImplemented() *SamlCallbackNotImplemented {
	return &SamlCallbackNotImplemented{}
}

/* SamlCallbackNotImplemented describes a response with status code 501, with default header values.

The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`)
*/
type SamlCallbackNotImplemented struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SamlCallbackNotImplemented) Error() string {
	return fmt.Sprintf("[POST /users/auth/saml/_callback][%d] samlCallbackNotImplemented  %+v", 501, o.Payload)
}
func (o *SamlCallbackNotImplemented) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SamlCallbackNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSamlCallbackBadGateway creates a SamlCallbackBadGateway with default headers values
func NewSamlCallbackBadGateway() *SamlCallbackBadGateway {
	return &SamlCallbackBadGateway{}
}

/* SamlCallbackBadGateway describes a response with status code 502, with default header values.

The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`)
*/
type SamlCallbackBadGateway struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SamlCallbackBadGateway) Error() string {
	return fmt.Sprintf("[POST /users/auth/saml/_callback][%d] samlCallbackBadGateway  %+v", 502, o.Payload)
}
func (o *SamlCallbackBadGateway) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SamlCallbackBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
