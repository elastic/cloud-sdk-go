// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// DisableElevatedPermissionsReader is a Reader for the DisableElevatedPermissions structure.
type DisableElevatedPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisableElevatedPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisableElevatedPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDisableElevatedPermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewDisableElevatedPermissionsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewDisableElevatedPermissionsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDisableElevatedPermissionsOK creates a DisableElevatedPermissionsOK with default headers values
func NewDisableElevatedPermissionsOK() *DisableElevatedPermissionsOK {
	return &DisableElevatedPermissionsOK{}
}

/*
DisableElevatedPermissionsOK describes a response with status code 200, with default header values.

The elevated permissions are disabled and the authorization token was generated
*/
type DisableElevatedPermissionsOK struct {
	Payload *models.TokenResponse
}

// IsSuccess returns true when this disable elevated permissions o k response has a 2xx status code
func (o *DisableElevatedPermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this disable elevated permissions o k response has a 3xx status code
func (o *DisableElevatedPermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable elevated permissions o k response has a 4xx status code
func (o *DisableElevatedPermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this disable elevated permissions o k response has a 5xx status code
func (o *DisableElevatedPermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this disable elevated permissions o k response a status code equal to that given
func (o *DisableElevatedPermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the disable elevated permissions o k response
func (o *DisableElevatedPermissionsOK) Code() int {
	return 200
}

func (o *DisableElevatedPermissionsOK) Error() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsOK  %+v", 200, o.Payload)
}

func (o *DisableElevatedPermissionsOK) String() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsOK  %+v", 200, o.Payload)
}

func (o *DisableElevatedPermissionsOK) GetPayload() *models.TokenResponse {
	return o.Payload
}

func (o *DisableElevatedPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableElevatedPermissionsUnauthorized creates a DisableElevatedPermissionsUnauthorized with default headers values
func NewDisableElevatedPermissionsUnauthorized() *DisableElevatedPermissionsUnauthorized {
	return &DisableElevatedPermissionsUnauthorized{}
}

/*
DisableElevatedPermissionsUnauthorized describes a response with status code 401, with default header values.

The authentication token is invalid or expired. (code: `root.unauthorized`)
*/
type DisableElevatedPermissionsUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this disable elevated permissions unauthorized response has a 2xx status code
func (o *DisableElevatedPermissionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable elevated permissions unauthorized response has a 3xx status code
func (o *DisableElevatedPermissionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable elevated permissions unauthorized response has a 4xx status code
func (o *DisableElevatedPermissionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable elevated permissions unauthorized response has a 5xx status code
func (o *DisableElevatedPermissionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this disable elevated permissions unauthorized response a status code equal to that given
func (o *DisableElevatedPermissionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the disable elevated permissions unauthorized response
func (o *DisableElevatedPermissionsUnauthorized) Code() int {
	return 401
}

func (o *DisableElevatedPermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *DisableElevatedPermissionsUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *DisableElevatedPermissionsUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DisableElevatedPermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableElevatedPermissionsNotImplemented creates a DisableElevatedPermissionsNotImplemented with default headers values
func NewDisableElevatedPermissionsNotImplemented() *DisableElevatedPermissionsNotImplemented {
	return &DisableElevatedPermissionsNotImplemented{}
}

/*
DisableElevatedPermissionsNotImplemented describes a response with status code 501, with default header values.

The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`)
*/
type DisableElevatedPermissionsNotImplemented struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this disable elevated permissions not implemented response has a 2xx status code
func (o *DisableElevatedPermissionsNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable elevated permissions not implemented response has a 3xx status code
func (o *DisableElevatedPermissionsNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable elevated permissions not implemented response has a 4xx status code
func (o *DisableElevatedPermissionsNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this disable elevated permissions not implemented response has a 5xx status code
func (o *DisableElevatedPermissionsNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this disable elevated permissions not implemented response a status code equal to that given
func (o *DisableElevatedPermissionsNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the disable elevated permissions not implemented response
func (o *DisableElevatedPermissionsNotImplemented) Code() int {
	return 501
}

func (o *DisableElevatedPermissionsNotImplemented) Error() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsNotImplemented  %+v", 501, o.Payload)
}

func (o *DisableElevatedPermissionsNotImplemented) String() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsNotImplemented  %+v", 501, o.Payload)
}

func (o *DisableElevatedPermissionsNotImplemented) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DisableElevatedPermissionsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableElevatedPermissionsBadGateway creates a DisableElevatedPermissionsBadGateway with default headers values
func NewDisableElevatedPermissionsBadGateway() *DisableElevatedPermissionsBadGateway {
	return &DisableElevatedPermissionsBadGateway{}
}

/*
DisableElevatedPermissionsBadGateway describes a response with status code 502, with default header values.

The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`)
*/
type DisableElevatedPermissionsBadGateway struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this disable elevated permissions bad gateway response has a 2xx status code
func (o *DisableElevatedPermissionsBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable elevated permissions bad gateway response has a 3xx status code
func (o *DisableElevatedPermissionsBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable elevated permissions bad gateway response has a 4xx status code
func (o *DisableElevatedPermissionsBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this disable elevated permissions bad gateway response has a 5xx status code
func (o *DisableElevatedPermissionsBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this disable elevated permissions bad gateway response a status code equal to that given
func (o *DisableElevatedPermissionsBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the disable elevated permissions bad gateway response
func (o *DisableElevatedPermissionsBadGateway) Code() int {
	return 502
}

func (o *DisableElevatedPermissionsBadGateway) Error() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsBadGateway  %+v", 502, o.Payload)
}

func (o *DisableElevatedPermissionsBadGateway) String() string {
	return fmt.Sprintf("[DELETE /users/auth/_elevate][%d] disableElevatedPermissionsBadGateway  %+v", 502, o.Payload)
}

func (o *DisableElevatedPermissionsBadGateway) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DisableElevatedPermissionsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
