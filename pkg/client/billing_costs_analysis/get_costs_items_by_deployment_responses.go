// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package billing_costs_analysis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// GetCostsItemsByDeploymentReader is a Reader for the GetCostsItemsByDeployment structure.
type GetCostsItemsByDeploymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCostsItemsByDeploymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCostsItemsByDeploymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCostsItemsByDeploymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCostsItemsByDeploymentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCostsItemsByDeploymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCostsItemsByDeploymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCostsItemsByDeploymentOK creates a GetCostsItemsByDeploymentOK with default headers values
func NewGetCostsItemsByDeploymentOK() *GetCostsItemsByDeploymentOK {
	return &GetCostsItemsByDeploymentOK{}
}

/*
GetCostsItemsByDeploymentOK describes a response with status code 200, with default header values.

The costs associated to a set items billed for a single deployment.
*/
type GetCostsItemsByDeploymentOK struct {
	Payload *models.ItemsCosts
}

// IsSuccess returns true when this get costs items by deployment o k response has a 2xx status code
func (o *GetCostsItemsByDeploymentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get costs items by deployment o k response has a 3xx status code
func (o *GetCostsItemsByDeploymentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs items by deployment o k response has a 4xx status code
func (o *GetCostsItemsByDeploymentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get costs items by deployment o k response has a 5xx status code
func (o *GetCostsItemsByDeploymentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs items by deployment o k response a status code equal to that given
func (o *GetCostsItemsByDeploymentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get costs items by deployment o k response
func (o *GetCostsItemsByDeploymentOK) Code() int {
	return 200
}

func (o *GetCostsItemsByDeploymentOK) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentOK  %+v", 200, o.Payload)
}

func (o *GetCostsItemsByDeploymentOK) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentOK  %+v", 200, o.Payload)
}

func (o *GetCostsItemsByDeploymentOK) GetPayload() *models.ItemsCosts {
	return o.Payload
}

func (o *GetCostsItemsByDeploymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ItemsCosts)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsItemsByDeploymentBadRequest creates a GetCostsItemsByDeploymentBadRequest with default headers values
func NewGetCostsItemsByDeploymentBadRequest() *GetCostsItemsByDeploymentBadRequest {
	return &GetCostsItemsByDeploymentBadRequest{}
}

/*
GetCostsItemsByDeploymentBadRequest describes a response with status code 400, with default header values.

The specified date range is invalid. (code: `costs.invalid_date_range`)
*/
type GetCostsItemsByDeploymentBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs items by deployment bad request response has a 2xx status code
func (o *GetCostsItemsByDeploymentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs items by deployment bad request response has a 3xx status code
func (o *GetCostsItemsByDeploymentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs items by deployment bad request response has a 4xx status code
func (o *GetCostsItemsByDeploymentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get costs items by deployment bad request response has a 5xx status code
func (o *GetCostsItemsByDeploymentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs items by deployment bad request response a status code equal to that given
func (o *GetCostsItemsByDeploymentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get costs items by deployment bad request response
func (o *GetCostsItemsByDeploymentBadRequest) Code() int {
	return 400
}

func (o *GetCostsItemsByDeploymentBadRequest) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentBadRequest  %+v", 400, o.Payload)
}

func (o *GetCostsItemsByDeploymentBadRequest) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentBadRequest  %+v", 400, o.Payload)
}

func (o *GetCostsItemsByDeploymentBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsItemsByDeploymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsItemsByDeploymentForbidden creates a GetCostsItemsByDeploymentForbidden with default headers values
func NewGetCostsItemsByDeploymentForbidden() *GetCostsItemsByDeploymentForbidden {
	return &GetCostsItemsByDeploymentForbidden{}
}

/*
GetCostsItemsByDeploymentForbidden describes a response with status code 403, with default header values.

The current user does not have access to the requested organization. (code: `organization.invalid_access`)
*/
type GetCostsItemsByDeploymentForbidden struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs items by deployment forbidden response has a 2xx status code
func (o *GetCostsItemsByDeploymentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs items by deployment forbidden response has a 3xx status code
func (o *GetCostsItemsByDeploymentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs items by deployment forbidden response has a 4xx status code
func (o *GetCostsItemsByDeploymentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get costs items by deployment forbidden response has a 5xx status code
func (o *GetCostsItemsByDeploymentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs items by deployment forbidden response a status code equal to that given
func (o *GetCostsItemsByDeploymentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get costs items by deployment forbidden response
func (o *GetCostsItemsByDeploymentForbidden) Code() int {
	return 403
}

func (o *GetCostsItemsByDeploymentForbidden) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentForbidden  %+v", 403, o.Payload)
}

func (o *GetCostsItemsByDeploymentForbidden) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentForbidden  %+v", 403, o.Payload)
}

func (o *GetCostsItemsByDeploymentForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsItemsByDeploymentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsItemsByDeploymentNotFound creates a GetCostsItemsByDeploymentNotFound with default headers values
func NewGetCostsItemsByDeploymentNotFound() *GetCostsItemsByDeploymentNotFound {
	return &GetCostsItemsByDeploymentNotFound{}
}

/*
	GetCostsItemsByDeploymentNotFound describes a response with status code 404, with default header values.

	* The organization was not found. (code: `organization.not_found`)

* The Elasticsearch cluster was not found. (code: `billing_service.es_cluster_id_not_found`)
*/
type GetCostsItemsByDeploymentNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs items by deployment not found response has a 2xx status code
func (o *GetCostsItemsByDeploymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs items by deployment not found response has a 3xx status code
func (o *GetCostsItemsByDeploymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs items by deployment not found response has a 4xx status code
func (o *GetCostsItemsByDeploymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get costs items by deployment not found response has a 5xx status code
func (o *GetCostsItemsByDeploymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs items by deployment not found response a status code equal to that given
func (o *GetCostsItemsByDeploymentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get costs items by deployment not found response
func (o *GetCostsItemsByDeploymentNotFound) Code() int {
	return 404
}

func (o *GetCostsItemsByDeploymentNotFound) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentNotFound  %+v", 404, o.Payload)
}

func (o *GetCostsItemsByDeploymentNotFound) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentNotFound  %+v", 404, o.Payload)
}

func (o *GetCostsItemsByDeploymentNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsItemsByDeploymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsItemsByDeploymentInternalServerError creates a GetCostsItemsByDeploymentInternalServerError with default headers values
func NewGetCostsItemsByDeploymentInternalServerError() *GetCostsItemsByDeploymentInternalServerError {
	return &GetCostsItemsByDeploymentInternalServerError{}
}

/*
GetCostsItemsByDeploymentInternalServerError describes a response with status code 500, with default header values.

An error occurred when fetching the itemized costs for the given deployment of the organization. (code: `billing_service.failed_request`)
*/
type GetCostsItemsByDeploymentInternalServerError struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs items by deployment internal server error response has a 2xx status code
func (o *GetCostsItemsByDeploymentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs items by deployment internal server error response has a 3xx status code
func (o *GetCostsItemsByDeploymentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs items by deployment internal server error response has a 4xx status code
func (o *GetCostsItemsByDeploymentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get costs items by deployment internal server error response has a 5xx status code
func (o *GetCostsItemsByDeploymentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get costs items by deployment internal server error response a status code equal to that given
func (o *GetCostsItemsByDeploymentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get costs items by deployment internal server error response
func (o *GetCostsItemsByDeploymentInternalServerError) Code() int {
	return 500
}

func (o *GetCostsItemsByDeploymentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCostsItemsByDeploymentInternalServerError) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments/{deployment_id}/items][%d] getCostsItemsByDeploymentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCostsItemsByDeploymentInternalServerError) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsItemsByDeploymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
