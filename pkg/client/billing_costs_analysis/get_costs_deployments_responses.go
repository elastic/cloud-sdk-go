// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package billing_costs_analysis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// GetCostsDeploymentsReader is a Reader for the GetCostsDeployments structure.
type GetCostsDeploymentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCostsDeploymentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCostsDeploymentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCostsDeploymentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCostsDeploymentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCostsDeploymentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCostsDeploymentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCostsDeploymentsOK creates a GetCostsDeploymentsOK with default headers values
func NewGetCostsDeploymentsOK() *GetCostsDeploymentsOK {
	return &GetCostsDeploymentsOK{}
}

/* GetCostsDeploymentsOK describes a response with status code 200, with default header values.

The costs associated to a set of products
*/
type GetCostsDeploymentsOK struct {
	Payload *models.DeploymentsCosts
}

func (o *GetCostsDeploymentsOK) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments][%d] getCostsDeploymentsOK  %+v", 200, o.Payload)
}
func (o *GetCostsDeploymentsOK) GetPayload() *models.DeploymentsCosts {
	return o.Payload
}

func (o *GetCostsDeploymentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeploymentsCosts)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsDeploymentsBadRequest creates a GetCostsDeploymentsBadRequest with default headers values
func NewGetCostsDeploymentsBadRequest() *GetCostsDeploymentsBadRequest {
	return &GetCostsDeploymentsBadRequest{}
}

/* GetCostsDeploymentsBadRequest describes a response with status code 400, with default header values.

Invalid date range specified. (code: `costs.invalid_date_range`)
*/
type GetCostsDeploymentsBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *GetCostsDeploymentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments][%d] getCostsDeploymentsBadRequest  %+v", 400, o.Payload)
}
func (o *GetCostsDeploymentsBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsDeploymentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsDeploymentsForbidden creates a GetCostsDeploymentsForbidden with default headers values
func NewGetCostsDeploymentsForbidden() *GetCostsDeploymentsForbidden {
	return &GetCostsDeploymentsForbidden{}
}

/* GetCostsDeploymentsForbidden describes a response with status code 403, with default header values.

The current user does not have access to the requested organization. (code: `organization.invalid_access`)
*/
type GetCostsDeploymentsForbidden struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *GetCostsDeploymentsForbidden) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments][%d] getCostsDeploymentsForbidden  %+v", 403, o.Payload)
}
func (o *GetCostsDeploymentsForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsDeploymentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsDeploymentsNotFound creates a GetCostsDeploymentsNotFound with default headers values
func NewGetCostsDeploymentsNotFound() *GetCostsDeploymentsNotFound {
	return &GetCostsDeploymentsNotFound{}
}

/* GetCostsDeploymentsNotFound describes a response with status code 404, with default header values.

Organization not found. (code: `organization.not_found`)
*/
type GetCostsDeploymentsNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *GetCostsDeploymentsNotFound) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments][%d] getCostsDeploymentsNotFound  %+v", 404, o.Payload)
}
func (o *GetCostsDeploymentsNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsDeploymentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsDeploymentsInternalServerError creates a GetCostsDeploymentsInternalServerError with default headers values
func NewGetCostsDeploymentsInternalServerError() *GetCostsDeploymentsInternalServerError {
	return &GetCostsDeploymentsInternalServerError{}
}

/* GetCostsDeploymentsInternalServerError describes a response with status code 500, with default header values.

An error occurred when fetching the costs associated with all deployments for the organization. (code: `billing_service.failed_request`)
*/
type GetCostsDeploymentsInternalServerError struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *GetCostsDeploymentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/deployments][%d] getCostsDeploymentsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetCostsDeploymentsInternalServerError) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsDeploymentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
