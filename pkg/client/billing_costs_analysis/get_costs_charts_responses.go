// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package billing_costs_analysis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// GetCostsChartsReader is a Reader for the GetCostsCharts structure.
type GetCostsChartsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCostsChartsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCostsChartsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCostsChartsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCostsChartsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCostsChartsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCostsChartsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCostsChartsOK creates a GetCostsChartsOK with default headers values
func NewGetCostsChartsOK() *GetCostsChartsOK {
	return &GetCostsChartsOK{}
}

/*
GetCostsChartsOK describes a response with status code 200, with default header values.

The usage charts of an organization.
*/
type GetCostsChartsOK struct {
	Payload *models.ChartItems
}

// IsSuccess returns true when this get costs charts o k response has a 2xx status code
func (o *GetCostsChartsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get costs charts o k response has a 3xx status code
func (o *GetCostsChartsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs charts o k response has a 4xx status code
func (o *GetCostsChartsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get costs charts o k response has a 5xx status code
func (o *GetCostsChartsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs charts o k response a status code equal to that given
func (o *GetCostsChartsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get costs charts o k response
func (o *GetCostsChartsOK) Code() int {
	return 200
}

func (o *GetCostsChartsOK) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsOK  %+v", 200, o.Payload)
}

func (o *GetCostsChartsOK) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsOK  %+v", 200, o.Payload)
}

func (o *GetCostsChartsOK) GetPayload() *models.ChartItems {
	return o.Payload
}

func (o *GetCostsChartsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChartItems)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsChartsBadRequest creates a GetCostsChartsBadRequest with default headers values
func NewGetCostsChartsBadRequest() *GetCostsChartsBadRequest {
	return &GetCostsChartsBadRequest{}
}

/*
GetCostsChartsBadRequest describes a response with status code 400, with default header values.

The specified date range is invalid. (code: `costs.invalid_date_range`)
*/
type GetCostsChartsBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs charts bad request response has a 2xx status code
func (o *GetCostsChartsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs charts bad request response has a 3xx status code
func (o *GetCostsChartsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs charts bad request response has a 4xx status code
func (o *GetCostsChartsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get costs charts bad request response has a 5xx status code
func (o *GetCostsChartsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs charts bad request response a status code equal to that given
func (o *GetCostsChartsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get costs charts bad request response
func (o *GetCostsChartsBadRequest) Code() int {
	return 400
}

func (o *GetCostsChartsBadRequest) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCostsChartsBadRequest) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCostsChartsBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsChartsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsChartsForbidden creates a GetCostsChartsForbidden with default headers values
func NewGetCostsChartsForbidden() *GetCostsChartsForbidden {
	return &GetCostsChartsForbidden{}
}

/*
GetCostsChartsForbidden describes a response with status code 403, with default header values.

The current user does not have access to the requested organization. (code: `organization.invalid_access`)
*/
type GetCostsChartsForbidden struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs charts forbidden response has a 2xx status code
func (o *GetCostsChartsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs charts forbidden response has a 3xx status code
func (o *GetCostsChartsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs charts forbidden response has a 4xx status code
func (o *GetCostsChartsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get costs charts forbidden response has a 5xx status code
func (o *GetCostsChartsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs charts forbidden response a status code equal to that given
func (o *GetCostsChartsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get costs charts forbidden response
func (o *GetCostsChartsForbidden) Code() int {
	return 403
}

func (o *GetCostsChartsForbidden) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsForbidden  %+v", 403, o.Payload)
}

func (o *GetCostsChartsForbidden) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsForbidden  %+v", 403, o.Payload)
}

func (o *GetCostsChartsForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsChartsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsChartsNotFound creates a GetCostsChartsNotFound with default headers values
func NewGetCostsChartsNotFound() *GetCostsChartsNotFound {
	return &GetCostsChartsNotFound{}
}

/*
GetCostsChartsNotFound describes a response with status code 404, with default header values.

Organization not found. (code: `organization.not_found`)
*/
type GetCostsChartsNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs charts not found response has a 2xx status code
func (o *GetCostsChartsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs charts not found response has a 3xx status code
func (o *GetCostsChartsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs charts not found response has a 4xx status code
func (o *GetCostsChartsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get costs charts not found response has a 5xx status code
func (o *GetCostsChartsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get costs charts not found response a status code equal to that given
func (o *GetCostsChartsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get costs charts not found response
func (o *GetCostsChartsNotFound) Code() int {
	return 404
}

func (o *GetCostsChartsNotFound) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsNotFound  %+v", 404, o.Payload)
}

func (o *GetCostsChartsNotFound) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsNotFound  %+v", 404, o.Payload)
}

func (o *GetCostsChartsNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsChartsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCostsChartsInternalServerError creates a GetCostsChartsInternalServerError with default headers values
func NewGetCostsChartsInternalServerError() *GetCostsChartsInternalServerError {
	return &GetCostsChartsInternalServerError{}
}

/*
GetCostsChartsInternalServerError describes a response with status code 500, with default header values.

Error fetching the itemized costs for the organization. (code: `billing_service.failed_request`)
*/
type GetCostsChartsInternalServerError struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get costs charts internal server error response has a 2xx status code
func (o *GetCostsChartsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get costs charts internal server error response has a 3xx status code
func (o *GetCostsChartsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get costs charts internal server error response has a 4xx status code
func (o *GetCostsChartsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get costs charts internal server error response has a 5xx status code
func (o *GetCostsChartsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get costs charts internal server error response a status code equal to that given
func (o *GetCostsChartsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get costs charts internal server error response
func (o *GetCostsChartsInternalServerError) Code() int {
	return 500
}

func (o *GetCostsChartsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCostsChartsInternalServerError) String() string {
	return fmt.Sprintf("[GET /billing/costs/{organization_id}/charts][%d] getCostsChartsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCostsChartsInternalServerError) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetCostsChartsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
