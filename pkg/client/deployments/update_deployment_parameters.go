// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// NewUpdateDeploymentParams creates a new UpdateDeploymentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateDeploymentParams() *UpdateDeploymentParams {
	return &UpdateDeploymentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateDeploymentParamsWithTimeout creates a new UpdateDeploymentParams object
// with the ability to set a timeout on a request.
func NewUpdateDeploymentParamsWithTimeout(timeout time.Duration) *UpdateDeploymentParams {
	return &UpdateDeploymentParams{
		timeout: timeout,
	}
}

// NewUpdateDeploymentParamsWithContext creates a new UpdateDeploymentParams object
// with the ability to set a context for a request.
func NewUpdateDeploymentParamsWithContext(ctx context.Context) *UpdateDeploymentParams {
	return &UpdateDeploymentParams{
		Context: ctx,
	}
}

// NewUpdateDeploymentParamsWithHTTPClient creates a new UpdateDeploymentParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateDeploymentParamsWithHTTPClient(client *http.Client) *UpdateDeploymentParams {
	return &UpdateDeploymentParams{
		HTTPClient: client,
	}
}

/* UpdateDeploymentParams contains all the parameters to send to the API endpoint
   for the update deployment operation.

   Typically these are written to a http.Request.
*/
type UpdateDeploymentParams struct {

	/* Body.

	   The deployment definition
	*/
	Body *models.DeploymentUpdateRequest

	/* DeploymentID.

	   Identifier for the Deployment
	*/
	DeploymentID string

	/* HidePrunedOrphans.

	   Whether or not to hide orphaned resources that were shut down (relevant if prune on the request is true)
	*/
	HidePrunedOrphans *bool

	/* SkipSnapshot.

	   Whether or not to skip snapshots before shutting down orphaned resources (relevant if prune on the request is true)
	*/
	SkipSnapshot *bool

	/* ValidateOnly.

	   If true, will just validate the Deployment definition but will not perform the update
	*/
	ValidateOnly *bool

	/* Version.

	   If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request)
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update deployment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateDeploymentParams) WithDefaults() *UpdateDeploymentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update deployment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateDeploymentParams) SetDefaults() {
	var (
		hidePrunedOrphansDefault = bool(false)

		skipSnapshotDefault = bool(false)

		validateOnlyDefault = bool(false)
	)

	val := UpdateDeploymentParams{
		HidePrunedOrphans: &hidePrunedOrphansDefault,
		SkipSnapshot:      &skipSnapshotDefault,
		ValidateOnly:      &validateOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the update deployment params
func (o *UpdateDeploymentParams) WithTimeout(timeout time.Duration) *UpdateDeploymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update deployment params
func (o *UpdateDeploymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update deployment params
func (o *UpdateDeploymentParams) WithContext(ctx context.Context) *UpdateDeploymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update deployment params
func (o *UpdateDeploymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update deployment params
func (o *UpdateDeploymentParams) WithHTTPClient(client *http.Client) *UpdateDeploymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update deployment params
func (o *UpdateDeploymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update deployment params
func (o *UpdateDeploymentParams) WithBody(body *models.DeploymentUpdateRequest) *UpdateDeploymentParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update deployment params
func (o *UpdateDeploymentParams) SetBody(body *models.DeploymentUpdateRequest) {
	o.Body = body
}

// WithDeploymentID adds the deploymentID to the update deployment params
func (o *UpdateDeploymentParams) WithDeploymentID(deploymentID string) *UpdateDeploymentParams {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the update deployment params
func (o *UpdateDeploymentParams) SetDeploymentID(deploymentID string) {
	o.DeploymentID = deploymentID
}

// WithHidePrunedOrphans adds the hidePrunedOrphans to the update deployment params
func (o *UpdateDeploymentParams) WithHidePrunedOrphans(hidePrunedOrphans *bool) *UpdateDeploymentParams {
	o.SetHidePrunedOrphans(hidePrunedOrphans)
	return o
}

// SetHidePrunedOrphans adds the hidePrunedOrphans to the update deployment params
func (o *UpdateDeploymentParams) SetHidePrunedOrphans(hidePrunedOrphans *bool) {
	o.HidePrunedOrphans = hidePrunedOrphans
}

// WithSkipSnapshot adds the skipSnapshot to the update deployment params
func (o *UpdateDeploymentParams) WithSkipSnapshot(skipSnapshot *bool) *UpdateDeploymentParams {
	o.SetSkipSnapshot(skipSnapshot)
	return o
}

// SetSkipSnapshot adds the skipSnapshot to the update deployment params
func (o *UpdateDeploymentParams) SetSkipSnapshot(skipSnapshot *bool) {
	o.SkipSnapshot = skipSnapshot
}

// WithValidateOnly adds the validateOnly to the update deployment params
func (o *UpdateDeploymentParams) WithValidateOnly(validateOnly *bool) *UpdateDeploymentParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the update deployment params
func (o *UpdateDeploymentParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WithVersion adds the version to the update deployment params
func (o *UpdateDeploymentParams) WithVersion(version *string) *UpdateDeploymentParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the update deployment params
func (o *UpdateDeploymentParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateDeploymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param deployment_id
	if err := r.SetPathParam("deployment_id", o.DeploymentID); err != nil {
		return err
	}

	if o.HidePrunedOrphans != nil {

		// query param hide_pruned_orphans
		var qrHidePrunedOrphans bool

		if o.HidePrunedOrphans != nil {
			qrHidePrunedOrphans = *o.HidePrunedOrphans
		}
		qHidePrunedOrphans := swag.FormatBool(qrHidePrunedOrphans)
		if qHidePrunedOrphans != "" {

			if err := r.SetQueryParam("hide_pruned_orphans", qHidePrunedOrphans); err != nil {
				return err
			}
		}
	}

	if o.SkipSnapshot != nil {

		// query param skip_snapshot
		var qrSkipSnapshot bool

		if o.SkipSnapshot != nil {
			qrSkipSnapshot = *o.SkipSnapshot
		}
		qSkipSnapshot := swag.FormatBool(qrSkipSnapshot)
		if qSkipSnapshot != "" {

			if err := r.SetQueryParam("skip_snapshot", qSkipSnapshot); err != nil {
				return err
			}
		}
	}

	if o.ValidateOnly != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
