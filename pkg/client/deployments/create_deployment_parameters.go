// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// NewCreateDeploymentParams creates a new CreateDeploymentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateDeploymentParams() *CreateDeploymentParams {
	return &CreateDeploymentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateDeploymentParamsWithTimeout creates a new CreateDeploymentParams object
// with the ability to set a timeout on a request.
func NewCreateDeploymentParamsWithTimeout(timeout time.Duration) *CreateDeploymentParams {
	return &CreateDeploymentParams{
		timeout: timeout,
	}
}

// NewCreateDeploymentParamsWithContext creates a new CreateDeploymentParams object
// with the ability to set a context for a request.
func NewCreateDeploymentParamsWithContext(ctx context.Context) *CreateDeploymentParams {
	return &CreateDeploymentParams{
		Context: ctx,
	}
}

// NewCreateDeploymentParamsWithHTTPClient creates a new CreateDeploymentParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateDeploymentParamsWithHTTPClient(client *http.Client) *CreateDeploymentParams {
	return &CreateDeploymentParams{
		HTTPClient: client,
	}
}

/* CreateDeploymentParams contains all the parameters to send to the API endpoint
   for the create deployment operation.

   Typically these are written to a http.Request.
*/
type CreateDeploymentParams struct {

	/* Body.

	   The deployment definition
	*/
	Body *models.DeploymentCreateRequest

	/* RequestID.

	   An optional idempotency token - if two create requests share the same request_id token (min size 32 characters, max 128) then only one deployment will be created, the second request will return the info of that deployment (in the same format described below, but with blanks for auth-related fields)
	*/
	RequestID *string

	/* ValidateOnly.

	   If true, will just validate the Deployment definition but will not perform the creation
	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create deployment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateDeploymentParams) WithDefaults() *CreateDeploymentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create deployment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateDeploymentParams) SetDefaults() {
	var (
		validateOnlyDefault = bool(false)
	)

	val := CreateDeploymentParams{
		ValidateOnly: &validateOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create deployment params
func (o *CreateDeploymentParams) WithTimeout(timeout time.Duration) *CreateDeploymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create deployment params
func (o *CreateDeploymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create deployment params
func (o *CreateDeploymentParams) WithContext(ctx context.Context) *CreateDeploymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create deployment params
func (o *CreateDeploymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create deployment params
func (o *CreateDeploymentParams) WithHTTPClient(client *http.Client) *CreateDeploymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create deployment params
func (o *CreateDeploymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create deployment params
func (o *CreateDeploymentParams) WithBody(body *models.DeploymentCreateRequest) *CreateDeploymentParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create deployment params
func (o *CreateDeploymentParams) SetBody(body *models.DeploymentCreateRequest) {
	o.Body = body
}

// WithRequestID adds the requestID to the create deployment params
func (o *CreateDeploymentParams) WithRequestID(requestID *string) *CreateDeploymentParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the create deployment params
func (o *CreateDeploymentParams) SetRequestID(requestID *string) {
	o.RequestID = requestID
}

// WithValidateOnly adds the validateOnly to the create deployment params
func (o *CreateDeploymentParams) WithValidateOnly(validateOnly *bool) *CreateDeploymentParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the create deployment params
func (o *CreateDeploymentParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *CreateDeploymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.RequestID != nil {

		// query param request_id
		var qrRequestID string

		if o.RequestID != nil {
			qrRequestID = *o.RequestID
		}
		qRequestID := qrRequestID
		if qRequestID != "" {

			if err := r.SetQueryParam("request_id", qRequestID); err != nil {
				return err
			}
		}
	}

	if o.ValidateOnly != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
