// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRestartDeploymentStatelessResourceParams creates a new RestartDeploymentStatelessResourceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRestartDeploymentStatelessResourceParams() *RestartDeploymentStatelessResourceParams {
	return &RestartDeploymentStatelessResourceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRestartDeploymentStatelessResourceParamsWithTimeout creates a new RestartDeploymentStatelessResourceParams object
// with the ability to set a timeout on a request.
func NewRestartDeploymentStatelessResourceParamsWithTimeout(timeout time.Duration) *RestartDeploymentStatelessResourceParams {
	return &RestartDeploymentStatelessResourceParams{
		timeout: timeout,
	}
}

// NewRestartDeploymentStatelessResourceParamsWithContext creates a new RestartDeploymentStatelessResourceParams object
// with the ability to set a context for a request.
func NewRestartDeploymentStatelessResourceParamsWithContext(ctx context.Context) *RestartDeploymentStatelessResourceParams {
	return &RestartDeploymentStatelessResourceParams{
		Context: ctx,
	}
}

// NewRestartDeploymentStatelessResourceParamsWithHTTPClient creates a new RestartDeploymentStatelessResourceParams object
// with the ability to set a custom HTTPClient for a request.
func NewRestartDeploymentStatelessResourceParamsWithHTTPClient(client *http.Client) *RestartDeploymentStatelessResourceParams {
	return &RestartDeploymentStatelessResourceParams{
		HTTPClient: client,
	}
}

/* RestartDeploymentStatelessResourceParams contains all the parameters to send to the API endpoint
   for the restart deployment stateless resource operation.

   Typically these are written to a http.Request.
*/
type RestartDeploymentStatelessResourceParams struct {

	/* CancelPending.

	   If true, cancels any pending plans before restarting. If false and there are pending plans, returns an error.
	*/
	CancelPending *bool

	/* DeploymentID.

	   Identifier for the Deployment.
	*/
	DeploymentID string

	/* RefID.

	   User-specified RefId for the Resource.
	*/
	RefID string

	/* StatelessResourceKind.

	   The kind of stateless resource
	*/
	StatelessResourceKind string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the restart deployment stateless resource params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RestartDeploymentStatelessResourceParams) WithDefaults() *RestartDeploymentStatelessResourceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the restart deployment stateless resource params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RestartDeploymentStatelessResourceParams) SetDefaults() {
	var (
		cancelPendingDefault = bool(false)
	)

	val := RestartDeploymentStatelessResourceParams{
		CancelPending: &cancelPendingDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithTimeout(timeout time.Duration) *RestartDeploymentStatelessResourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithContext(ctx context.Context) *RestartDeploymentStatelessResourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithHTTPClient(client *http.Client) *RestartDeploymentStatelessResourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCancelPending adds the cancelPending to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithCancelPending(cancelPending *bool) *RestartDeploymentStatelessResourceParams {
	o.SetCancelPending(cancelPending)
	return o
}

// SetCancelPending adds the cancelPending to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetCancelPending(cancelPending *bool) {
	o.CancelPending = cancelPending
}

// WithDeploymentID adds the deploymentID to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithDeploymentID(deploymentID string) *RestartDeploymentStatelessResourceParams {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetDeploymentID(deploymentID string) {
	o.DeploymentID = deploymentID
}

// WithRefID adds the refID to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithRefID(refID string) *RestartDeploymentStatelessResourceParams {
	o.SetRefID(refID)
	return o
}

// SetRefID adds the refId to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetRefID(refID string) {
	o.RefID = refID
}

// WithStatelessResourceKind adds the statelessResourceKind to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) WithStatelessResourceKind(statelessResourceKind string) *RestartDeploymentStatelessResourceParams {
	o.SetStatelessResourceKind(statelessResourceKind)
	return o
}

// SetStatelessResourceKind adds the statelessResourceKind to the restart deployment stateless resource params
func (o *RestartDeploymentStatelessResourceParams) SetStatelessResourceKind(statelessResourceKind string) {
	o.StatelessResourceKind = statelessResourceKind
}

// WriteToRequest writes these params to a swagger request
func (o *RestartDeploymentStatelessResourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CancelPending != nil {

		// query param cancel_pending
		var qrCancelPending bool

		if o.CancelPending != nil {
			qrCancelPending = *o.CancelPending
		}
		qCancelPending := swag.FormatBool(qrCancelPending)
		if qCancelPending != "" {

			if err := r.SetQueryParam("cancel_pending", qCancelPending); err != nil {
				return err
			}
		}
	}

	// path param deployment_id
	if err := r.SetPathParam("deployment_id", o.DeploymentID); err != nil {
		return err
	}

	// path param ref_id
	if err := r.SetPathParam("ref_id", o.RefID); err != nil {
		return err
	}

	// path param stateless_resource_kind
	if err := r.SetPathParam("stateless_resource_kind", o.StatelessResourceKind); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
