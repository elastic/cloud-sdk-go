// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// NewSetInstanceSettingsOverridesParams creates a new SetInstanceSettingsOverridesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetInstanceSettingsOverridesParams() *SetInstanceSettingsOverridesParams {
	return &SetInstanceSettingsOverridesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetInstanceSettingsOverridesParamsWithTimeout creates a new SetInstanceSettingsOverridesParams object
// with the ability to set a timeout on a request.
func NewSetInstanceSettingsOverridesParamsWithTimeout(timeout time.Duration) *SetInstanceSettingsOverridesParams {
	return &SetInstanceSettingsOverridesParams{
		timeout: timeout,
	}
}

// NewSetInstanceSettingsOverridesParamsWithContext creates a new SetInstanceSettingsOverridesParams object
// with the ability to set a context for a request.
func NewSetInstanceSettingsOverridesParamsWithContext(ctx context.Context) *SetInstanceSettingsOverridesParams {
	return &SetInstanceSettingsOverridesParams{
		Context: ctx,
	}
}

// NewSetInstanceSettingsOverridesParamsWithHTTPClient creates a new SetInstanceSettingsOverridesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetInstanceSettingsOverridesParamsWithHTTPClient(client *http.Client) *SetInstanceSettingsOverridesParams {
	return &SetInstanceSettingsOverridesParams{
		HTTPClient: client,
	}
}

/* SetInstanceSettingsOverridesParams contains all the parameters to send to the API endpoint
   for the set instance settings overrides operation.

   Typically these are written to a http.Request.
*/
type SetInstanceSettingsOverridesParams struct {

	/* Body.

	   The overrides to apply to the given instances. Capacity overrides the RAM size in MB of the instance, and storage multipler overrides the multiplier of the instance RAM size that determines the storage quota of the instance. Capacity must be in the range [1024, 65536] and storage multiplier must be in the range [1.0, 1000.0].
	*/
	Body *models.InstanceOverrides

	/* DeploymentID.

	   Identifier for the Deployment.
	*/
	DeploymentID string

	/* IgnoreMissing.

	   When `false` and a specified instance is missing, will return an error and not update any instances. When `true` will update only existing instances and not treat a missing instance as an error.
	*/
	IgnoreMissing *bool

	/* InstanceIds.

	   A comma-separated list of instance identifiers.
	*/
	InstanceIds []string

	/* RefID.

	   User-specified RefId for the Resource.
	*/
	RefID string

	/* ResourceKind.

	   The kind of resource. Only Elasticsearch resources are currently supported.
	*/
	ResourceKind string

	/* RestartAfterUpdate.

	   After overrides are set, restarts the instance to apply the changes.
	*/
	RestartAfterUpdate *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set instance settings overrides params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetInstanceSettingsOverridesParams) WithDefaults() *SetInstanceSettingsOverridesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set instance settings overrides params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetInstanceSettingsOverridesParams) SetDefaults() {
	var (
		ignoreMissingDefault = bool(false)

		restartAfterUpdateDefault = bool(false)
	)

	val := SetInstanceSettingsOverridesParams{
		IgnoreMissing:      &ignoreMissingDefault,
		RestartAfterUpdate: &restartAfterUpdateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithTimeout(timeout time.Duration) *SetInstanceSettingsOverridesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithContext(ctx context.Context) *SetInstanceSettingsOverridesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithHTTPClient(client *http.Client) *SetInstanceSettingsOverridesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithBody(body *models.InstanceOverrides) *SetInstanceSettingsOverridesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetBody(body *models.InstanceOverrides) {
	o.Body = body
}

// WithDeploymentID adds the deploymentID to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithDeploymentID(deploymentID string) *SetInstanceSettingsOverridesParams {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetDeploymentID(deploymentID string) {
	o.DeploymentID = deploymentID
}

// WithIgnoreMissing adds the ignoreMissing to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithIgnoreMissing(ignoreMissing *bool) *SetInstanceSettingsOverridesParams {
	o.SetIgnoreMissing(ignoreMissing)
	return o
}

// SetIgnoreMissing adds the ignoreMissing to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetIgnoreMissing(ignoreMissing *bool) {
	o.IgnoreMissing = ignoreMissing
}

// WithInstanceIds adds the instanceIds to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithInstanceIds(instanceIds []string) *SetInstanceSettingsOverridesParams {
	o.SetInstanceIds(instanceIds)
	return o
}

// SetInstanceIds adds the instanceIds to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetInstanceIds(instanceIds []string) {
	o.InstanceIds = instanceIds
}

// WithRefID adds the refID to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithRefID(refID string) *SetInstanceSettingsOverridesParams {
	o.SetRefID(refID)
	return o
}

// SetRefID adds the refId to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetRefID(refID string) {
	o.RefID = refID
}

// WithResourceKind adds the resourceKind to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithResourceKind(resourceKind string) *SetInstanceSettingsOverridesParams {
	o.SetResourceKind(resourceKind)
	return o
}

// SetResourceKind adds the resourceKind to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetResourceKind(resourceKind string) {
	o.ResourceKind = resourceKind
}

// WithRestartAfterUpdate adds the restartAfterUpdate to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) WithRestartAfterUpdate(restartAfterUpdate *bool) *SetInstanceSettingsOverridesParams {
	o.SetRestartAfterUpdate(restartAfterUpdate)
	return o
}

// SetRestartAfterUpdate adds the restartAfterUpdate to the set instance settings overrides params
func (o *SetInstanceSettingsOverridesParams) SetRestartAfterUpdate(restartAfterUpdate *bool) {
	o.RestartAfterUpdate = restartAfterUpdate
}

// WriteToRequest writes these params to a swagger request
func (o *SetInstanceSettingsOverridesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param deployment_id
	if err := r.SetPathParam("deployment_id", o.DeploymentID); err != nil {
		return err
	}

	if o.IgnoreMissing != nil {

		// query param ignore_missing
		var qrIgnoreMissing bool

		if o.IgnoreMissing != nil {
			qrIgnoreMissing = *o.IgnoreMissing
		}
		qIgnoreMissing := swag.FormatBool(qrIgnoreMissing)
		if qIgnoreMissing != "" {

			if err := r.SetQueryParam("ignore_missing", qIgnoreMissing); err != nil {
				return err
			}
		}
	}

	if o.InstanceIds != nil {

		// binding items for instance_ids
		joinedInstanceIds := o.bindParamInstanceIds(reg)

		// path array param instance_ids
		// SetPathParam does not support variadic arguments, since we used JoinByFormat
		// we can send the first item in the array as it's all the items of the previous
		// array joined together
		if len(joinedInstanceIds) > 0 {
			if err := r.SetPathParam("instance_ids", joinedInstanceIds[0]); err != nil {
				return err
			}
		}
	}

	// path param ref_id
	if err := r.SetPathParam("ref_id", o.RefID); err != nil {
		return err
	}

	// path param resource_kind
	if err := r.SetPathParam("resource_kind", o.ResourceKind); err != nil {
		return err
	}

	if o.RestartAfterUpdate != nil {

		// query param restart_after_update
		var qrRestartAfterUpdate bool

		if o.RestartAfterUpdate != nil {
			qrRestartAfterUpdate = *o.RestartAfterUpdate
		}
		qRestartAfterUpdate := swag.FormatBool(qrRestartAfterUpdate)
		if qRestartAfterUpdate != "" {

			if err := r.SetQueryParam("restart_after_update", qRestartAfterUpdate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSetInstanceSettingsOverrides binds the parameter instance_ids
func (o *SetInstanceSettingsOverridesParams) bindParamInstanceIds(formats strfmt.Registry) []string {
	instanceIdsIR := o.InstanceIds

	var instanceIdsIC []string
	for _, instanceIdsIIR := range instanceIdsIR { // explode []string

		instanceIdsIIV := instanceIdsIIR // string as string
		instanceIdsIC = append(instanceIdsIC, instanceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	instanceIdsIS := swag.JoinByFormat(instanceIdsIC, "csv")

	return instanceIdsIS
}
