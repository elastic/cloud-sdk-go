// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// CaptureDeploymentResourceDiagnosticsReader is a Reader for the CaptureDeploymentResourceDiagnostics structure.
type CaptureDeploymentResourceDiagnosticsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CaptureDeploymentResourceDiagnosticsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCaptureDeploymentResourceDiagnosticsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCaptureDeploymentResourceDiagnosticsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewCaptureDeploymentResourceDiagnosticsPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewCaptureDeploymentResourceDiagnosticsRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCaptureDeploymentResourceDiagnosticsOK creates a CaptureDeploymentResourceDiagnosticsOK with default headers values
func NewCaptureDeploymentResourceDiagnosticsOK() *CaptureDeploymentResourceDiagnosticsOK {
	return &CaptureDeploymentResourceDiagnosticsOK{}
}

/* CaptureDeploymentResourceDiagnosticsOK describes a response with status code 200, with default header values.

The diagnostic bundle as a zip file
*/
type CaptureDeploymentResourceDiagnosticsOK struct {
	Payload strfmt.Base64
}

func (o *CaptureDeploymentResourceDiagnosticsOK) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/diagnostics/_capture][%d] captureDeploymentResourceDiagnosticsOK  %+v", 200, o.Payload)
}
func (o *CaptureDeploymentResourceDiagnosticsOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *CaptureDeploymentResourceDiagnosticsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureDeploymentResourceDiagnosticsNotFound creates a CaptureDeploymentResourceDiagnosticsNotFound with default headers values
func NewCaptureDeploymentResourceDiagnosticsNotFound() *CaptureDeploymentResourceDiagnosticsNotFound {
	return &CaptureDeploymentResourceDiagnosticsNotFound{}
}

/* CaptureDeploymentResourceDiagnosticsNotFound describes a response with status code 404, with default header values.

 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
* The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
*/
type CaptureDeploymentResourceDiagnosticsNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *CaptureDeploymentResourceDiagnosticsNotFound) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/diagnostics/_capture][%d] captureDeploymentResourceDiagnosticsNotFound  %+v", 404, o.Payload)
}
func (o *CaptureDeploymentResourceDiagnosticsNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CaptureDeploymentResourceDiagnosticsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureDeploymentResourceDiagnosticsPreconditionFailed creates a CaptureDeploymentResourceDiagnosticsPreconditionFailed with default headers values
func NewCaptureDeploymentResourceDiagnosticsPreconditionFailed() *CaptureDeploymentResourceDiagnosticsPreconditionFailed {
	return &CaptureDeploymentResourceDiagnosticsPreconditionFailed{}
}

/* CaptureDeploymentResourceDiagnosticsPreconditionFailed describes a response with status code 412, with default header values.

The diagnostics cannot be generated because the cluster is either stopped or initializing. (code: `clusters.cluster_plan_state_error`)
*/
type CaptureDeploymentResourceDiagnosticsPreconditionFailed struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *CaptureDeploymentResourceDiagnosticsPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/diagnostics/_capture][%d] captureDeploymentResourceDiagnosticsPreconditionFailed  %+v", 412, o.Payload)
}
func (o *CaptureDeploymentResourceDiagnosticsPreconditionFailed) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CaptureDeploymentResourceDiagnosticsPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCaptureDeploymentResourceDiagnosticsRetryWith creates a CaptureDeploymentResourceDiagnosticsRetryWith with default headers values
func NewCaptureDeploymentResourceDiagnosticsRetryWith() *CaptureDeploymentResourceDiagnosticsRetryWith {
	return &CaptureDeploymentResourceDiagnosticsRetryWith{}
}

/* CaptureDeploymentResourceDiagnosticsRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type CaptureDeploymentResourceDiagnosticsRetryWith struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *CaptureDeploymentResourceDiagnosticsRetryWith) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/diagnostics/_capture][%d] captureDeploymentResourceDiagnosticsRetryWith  %+v", 449, o.Payload)
}
func (o *CaptureDeploymentResourceDiagnosticsRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CaptureDeploymentResourceDiagnosticsRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
