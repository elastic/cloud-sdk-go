// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/elastic/cloud-sdk-go/pkg/models"
)

// StopDeploymentResourceInstancesAllReader is a Reader for the StopDeploymentResourceInstancesAll structure.
type StopDeploymentResourceInstancesAllReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopDeploymentResourceInstancesAllReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewStopDeploymentResourceInstancesAllAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewStopDeploymentResourceInstancesAllForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStopDeploymentResourceInstancesAllNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewStopDeploymentResourceInstancesAllUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 449:
		result := NewStopDeploymentResourceInstancesAllRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStopDeploymentResourceInstancesAllAccepted creates a StopDeploymentResourceInstancesAllAccepted with default headers values
func NewStopDeploymentResourceInstancesAllAccepted() *StopDeploymentResourceInstancesAllAccepted {
	return &StopDeploymentResourceInstancesAllAccepted{}
}

/*StopDeploymentResourceInstancesAllAccepted handles this case with default header values.

The stop command was issued successfully
*/
type StopDeploymentResourceInstancesAllAccepted struct {
	Payload models.DeploymentResourceCommandResponse
}

func (o *StopDeploymentResourceInstancesAllAccepted) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop][%d] stopDeploymentResourceInstancesAllAccepted  %+v", 202, o.Payload)
}

func (o *StopDeploymentResourceInstancesAllAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopDeploymentResourceInstancesAllForbidden creates a StopDeploymentResourceInstancesAllForbidden with default headers values
func NewStopDeploymentResourceInstancesAllForbidden() *StopDeploymentResourceInstancesAllForbidden {
	return &StopDeploymentResourceInstancesAllForbidden{}
}

/*StopDeploymentResourceInstancesAllForbidden handles this case with default header values.

The stop command was prohibited for the given Resource.
*/
type StopDeploymentResourceInstancesAllForbidden struct {
	Payload *models.BasicFailedReply
}

func (o *StopDeploymentResourceInstancesAllForbidden) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop][%d] stopDeploymentResourceInstancesAllForbidden  %+v", 403, o.Payload)
}

func (o *StopDeploymentResourceInstancesAllForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopDeploymentResourceInstancesAllNotFound creates a StopDeploymentResourceInstancesAllNotFound with default headers values
func NewStopDeploymentResourceInstancesAllNotFound() *StopDeploymentResourceInstancesAllNotFound {
	return &StopDeploymentResourceInstancesAllNotFound{}
}

/*StopDeploymentResourceInstancesAllNotFound handles this case with default header values.

The Resource specified by {ref_id} cannot be found
*/
type StopDeploymentResourceInstancesAllNotFound struct {
	Payload *models.BasicFailedReply
}

func (o *StopDeploymentResourceInstancesAllNotFound) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop][%d] stopDeploymentResourceInstancesAllNotFound  %+v", 404, o.Payload)
}

func (o *StopDeploymentResourceInstancesAllNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopDeploymentResourceInstancesAllUnprocessableEntity creates a StopDeploymentResourceInstancesAllUnprocessableEntity with default headers values
func NewStopDeploymentResourceInstancesAllUnprocessableEntity() *StopDeploymentResourceInstancesAllUnprocessableEntity {
	return &StopDeploymentResourceInstancesAllUnprocessableEntity{}
}

/*StopDeploymentResourceInstancesAllUnprocessableEntity handles this case with default header values.

The command sent to a Resource found the Resource in an illegal state, the error message gives more details
*/
type StopDeploymentResourceInstancesAllUnprocessableEntity struct {
	Payload *models.BasicFailedReply
}

func (o *StopDeploymentResourceInstancesAllUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop][%d] stopDeploymentResourceInstancesAllUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *StopDeploymentResourceInstancesAllUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopDeploymentResourceInstancesAllRetryWith creates a StopDeploymentResourceInstancesAllRetryWith with default headers values
func NewStopDeploymentResourceInstancesAllRetryWith() *StopDeploymentResourceInstancesAllRetryWith {
	return &StopDeploymentResourceInstancesAllRetryWith{}
}

/*StopDeploymentResourceInstancesAllRetryWith handles this case with default header values.

elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type StopDeploymentResourceInstancesAllRetryWith struct {
	Payload *models.BasicFailedReply
}

func (o *StopDeploymentResourceInstancesAllRetryWith) Error() string {
	return fmt.Sprintf("[POST /deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop][%d] stopDeploymentResourceInstancesAllRetryWith  %+v", 449, o.Payload)
}

func (o *StopDeploymentResourceInstancesAllRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
