// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelDeploymentResourcePendingPlan(params *CancelDeploymentResourcePendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CancelDeploymentResourcePendingPlanOK, error)

	CreateDeployment(params *CreateDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentOK, *CreateDeploymentCreated, *CreateDeploymentAccepted, error)

	DeleteDeployment(params *DeleteDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentOK, error)

	DeleteDeploymentStatelessResource(params *DeleteDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentStatelessResourceOK, error)

	DeploymentApmResetSecretToken(params *DeploymentApmResetSecretTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeploymentApmResetSecretTokenAccepted, error)

	EnableDeploymentResourceCcr(params *EnableDeploymentResourceCcrParams, authInfo runtime.ClientAuthInfoWriter) (*EnableDeploymentResourceCcrOK, error)

	EnableDeploymentResourceIlm(params *EnableDeploymentResourceIlmParams, authInfo runtime.ClientAuthInfoWriter) (*EnableDeploymentResourceIlmOK, error)

	EnableDeploymentResourceSlm(params *EnableDeploymentResourceSlmParams, authInfo runtime.ClientAuthInfoWriter) (*EnableDeploymentResourceSlmOK, error)

	GetAppsearchReadOnlyMode(params *GetAppsearchReadOnlyModeParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsearchReadOnlyModeOK, error)

	GetDeployment(params *GetDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentOK, error)

	GetDeploymentApmResourceInfo(params *GetDeploymentApmResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentApmResourceInfoOK, error)

	GetDeploymentAppsearchResourceInfo(params *GetDeploymentAppsearchResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentAppsearchResourceInfoOK, error)

	GetDeploymentEnterpriseSearchResourceInfo(params *GetDeploymentEnterpriseSearchResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEnterpriseSearchResourceInfoOK, error)

	GetDeploymentEsResourceEligibleRemoteClusters(params *GetDeploymentEsResourceEligibleRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceEligibleRemoteClustersOK, error)

	GetDeploymentEsResourceInfo(params *GetDeploymentEsResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceInfoOK, error)

	GetDeploymentEsResourceKeystore(params *GetDeploymentEsResourceKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceKeystoreOK, error)

	GetDeploymentEsResourceRemoteClusters(params *GetDeploymentEsResourceRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceRemoteClustersOK, error)

	GetDeploymentKibResourceInfo(params *GetDeploymentKibResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentKibResourceInfoOK, error)

	ListDeployments(params *ListDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeploymentsOK, error)

	MigrateDeployment(params *MigrateDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*MigrateDeploymentOK, error)

	ResetElasticsearchUserPassword(params *ResetElasticsearchUserPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ResetElasticsearchUserPasswordOK, error)

	RestartDeploymentEsResource(params *RestartDeploymentEsResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RestartDeploymentEsResourceAccepted, error)

	RestartDeploymentStatelessResource(params *RestartDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RestartDeploymentStatelessResourceAccepted, error)

	RestoreDeployment(params *RestoreDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreDeploymentOK, error)

	RestoreDeploymentResource(params *RestoreDeploymentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreDeploymentResourceOK, error)

	ResyncDeployment(params *ResyncDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncDeploymentOK, error)

	ResyncDeployments(params *ResyncDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncDeploymentsOK, error)

	SearchDeployments(params *SearchDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchDeploymentsOK, error)

	SearchEligibleRemoteClusters(params *SearchEligibleRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchEligibleRemoteClustersOK, error)

	SetAppsearchReadOnlyMode(params *SetAppsearchReadOnlyModeParams, authInfo runtime.ClientAuthInfoWriter) (*SetAppsearchReadOnlyModeOK, error)

	SetDeploymentEsResourceKeystore(params *SetDeploymentEsResourceKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*SetDeploymentEsResourceKeystoreOK, error)

	SetDeploymentEsResourceRemoteClusters(params *SetDeploymentEsResourceRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*SetDeploymentEsResourceRemoteClustersAccepted, error)

	SetDeploymentResourceRawMetadata(params *SetDeploymentResourceRawMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*SetDeploymentResourceRawMetadataOK, error)

	ShutdownDeployment(params *ShutdownDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownDeploymentOK, error)

	ShutdownDeploymentEsResource(params *ShutdownDeploymentEsResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownDeploymentEsResourceOK, error)

	ShutdownDeploymentStatelessResource(params *ShutdownDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownDeploymentStatelessResourceOK, error)

	StartDeploymentResourceInstances(params *StartDeploymentResourceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceInstancesAccepted, error)

	StartDeploymentResourceInstancesAll(params *StartDeploymentResourceInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceInstancesAllAccepted, error)

	StartDeploymentResourceInstancesAllMaintenanceMode(params *StartDeploymentResourceInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceInstancesAllMaintenanceModeAccepted, error)

	StartDeploymentResourceMaintenanceMode(params *StartDeploymentResourceMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceMaintenanceModeAccepted, error)

	StopDeploymentResourceInstances(params *StopDeploymentResourceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceInstancesAccepted, error)

	StopDeploymentResourceInstancesAll(params *StopDeploymentResourceInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceInstancesAllAccepted, error)

	StopDeploymentResourceInstancesAllMaintenanceMode(params *StopDeploymentResourceInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceInstancesAllMaintenanceModeAccepted, error)

	StopDeploymentResourceMaintenanceMode(params *StopDeploymentResourceMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceMaintenanceModeAccepted, error)

	UpdateDeployment(params *UpdateDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeploymentOK, error)

	UpgradeDeploymentStatelessResource(params *UpgradeDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpgradeDeploymentStatelessResourceAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelDeploymentResourcePendingPlan cancels resource pending plan

  Cancels the pending plan of a Resource belonging to a given Deployment.
*/
func (a *Client) CancelDeploymentResourcePendingPlan(params *CancelDeploymentResourcePendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CancelDeploymentResourcePendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelDeploymentResourcePendingPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancel-deployment-resource-pending-plan",
		Method:             "DELETE",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelDeploymentResourcePendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelDeploymentResourcePendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancel-deployment-resource-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDeployment creates deployment

  Creates a Deployment.
*/
func (a *Client) CreateDeployment(params *CreateDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeploymentOK, *CreateDeploymentCreated, *CreateDeploymentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-deployment",
		Method:             "POST",
		PathPattern:        "/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDeploymentOK:
		return value, nil, nil, nil
	case *CreateDeploymentCreated:
		return nil, value, nil, nil
	case *CreateDeploymentAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeployment deletes deployment

  Deletes a Deployment and all its resources.
*/
func (a *Client) DeleteDeployment(params *DeleteDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-deployment",
		Method:             "DELETE",
		PathPattern:        "/deployments/{deployment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeploymentStatelessResource deletes stateless resource from deployment

  Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already.
*/
func (a *Client) DeleteDeploymentStatelessResource(params *DeleteDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDeploymentStatelessResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeploymentStatelessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-deployment-stateless-resource",
		Method:             "DELETE",
		PathPattern:        "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeploymentStatelessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeploymentStatelessResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-deployment-stateless-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeploymentApmResetSecretToken resets the secret token for an a p m resource

  Reset the token of an APM resource.
*/
func (a *Client) DeploymentApmResetSecretToken(params *DeploymentApmResetSecretTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeploymentApmResetSecretTokenAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeploymentApmResetSecretTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deployment-apm-reset-secret-token",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/apm/{ref_id}/_reset-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeploymentApmResetSecretTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeploymentApmResetSecretTokenAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployment-apm-reset-secret-token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableDeploymentResourceCcr migrates elasticsearch and associated kibana resources to enable c c r

  Migrates the specified Elasticsearch resource and its associated Kibana to enable CCR (if supported).
*/
func (a *Client) EnableDeploymentResourceCcr(params *EnableDeploymentResourceCcrParams, authInfo runtime.ClientAuthInfoWriter) (*EnableDeploymentResourceCcrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableDeploymentResourceCcrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable-deployment-resource-ccr",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/_enable-ccr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableDeploymentResourceCcrReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableDeploymentResourceCcrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enable-deployment-resource-ccr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableDeploymentResourceIlm migrates elasticsearch resource to use i l m

  Migrates the specified Elasticsearch resource to use ILM.
*/
func (a *Client) EnableDeploymentResourceIlm(params *EnableDeploymentResourceIlmParams, authInfo runtime.ClientAuthInfoWriter) (*EnableDeploymentResourceIlmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableDeploymentResourceIlmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable-deployment-resource-ilm",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/_enable-ilm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableDeploymentResourceIlmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableDeploymentResourceIlmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enable-deployment-resource-ilm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableDeploymentResourceSlm migrates elasticsearch resource to use s l m

  Migrates the specified Elasticsearch resource to use SLM.
*/
func (a *Client) EnableDeploymentResourceSlm(params *EnableDeploymentResourceSlmParams, authInfo runtime.ClientAuthInfoWriter) (*EnableDeploymentResourceSlmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableDeploymentResourceSlmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable-deployment-resource-slm",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/_enable-slm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableDeploymentResourceSlmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableDeploymentResourceSlmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enable-deployment-resource-slm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppsearchReadOnlyMode sets app search read only status

  Enable/Disable read-only mode on the given App Search resource.
*/
func (a *Client) GetAppsearchReadOnlyMode(params *GetAppsearchReadOnlyModeParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppsearchReadOnlyModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsearchReadOnlyModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-appsearch-read-only-mode",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppsearchReadOnlyModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsearchReadOnlyModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-appsearch-read-only-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeployment gets deployment

  Retrieves information about a Deployment.
*/
func (a *Client) GetDeployment(params *GetDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentApmResourceInfo gets deployment a p m resource info

  Get info about an APM Resource belonging to a given Deployment.
*/
func (a *Client) GetDeploymentApmResourceInfo(params *GetDeploymentApmResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentApmResourceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentApmResourceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-apm-resource-info",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/apm/{ref_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentApmResourceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentApmResourceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-apm-resource-info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentAppsearchResourceInfo gets deployment app search resource info

  Get info about an App Search Resource belonging to a given Deployment.
*/
func (a *Client) GetDeploymentAppsearchResourceInfo(params *GetDeploymentAppsearchResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentAppsearchResourceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentAppsearchResourceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-appsearch-resource-info",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/appsearch/{ref_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentAppsearchResourceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentAppsearchResourceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-appsearch-resource-info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEnterpriseSearchResourceInfo gets deployment enterprise search resource info

  Get info about an Enterprise Search Resource belonging to a given Deployment.
*/
func (a *Client) GetDeploymentEnterpriseSearchResourceInfo(params *GetDeploymentEnterpriseSearchResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEnterpriseSearchResourceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEnterpriseSearchResourceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-enterprise-search-resource-info",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/enterprise_search/{ref_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentEnterpriseSearchResourceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEnterpriseSearchResourceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-enterprise-search-resource-info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEsResourceEligibleRemoteClusters gets eligible remote clusters

  Returns the list of deployments which contain eligible remote clusters for the elasticsearch resource.
*/
func (a *Client) GetDeploymentEsResourceEligibleRemoteClusters(params *GetDeploymentEsResourceEligibleRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceEligibleRemoteClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEsResourceEligibleRemoteClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-es-resource-eligible-remote-clusters",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/eligible-remote-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentEsResourceEligibleRemoteClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEsResourceEligibleRemoteClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-es-resource-eligible-remote-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEsResourceInfo gets deployment elasticsearch resource info

  Get info about an Elasticsearch Resource belonging to a given Deployment.
*/
func (a *Client) GetDeploymentEsResourceInfo(params *GetDeploymentEsResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEsResourceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-es-resource-info",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentEsResourceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEsResourceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-es-resource-info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEsResourceKeystore gets the settings from the elasticsearch resource keystore

  Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
*/
func (a *Client) GetDeploymentEsResourceKeystore(params *GetDeploymentEsResourceKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceKeystoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEsResourceKeystoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-es-resource-keystore",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/keystore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentEsResourceKeystoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEsResourceKeystoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-es-resource-keystore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentEsResourceRemoteClusters gets remote clusters

  Returns the list of remote clusters for the elasticsearch resource.
*/
func (a *Client) GetDeploymentEsResourceRemoteClusters(params *GetDeploymentEsResourceRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentEsResourceRemoteClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentEsResourceRemoteClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-es-resource-remote-clusters",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/remote-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentEsResourceRemoteClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentEsResourceRemoteClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-es-resource-remote-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploymentKibResourceInfo gets deployment kibana resource info

  Get info about a Kibana Resource belonging to a given Deployment.
*/
func (a *Client) GetDeploymentKibResourceInfo(params *GetDeploymentKibResourceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentKibResourceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentKibResourceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-deployment-kib-resource-info",
		Method:             "GET",
		PathPattern:        "/deployments/{deployment_id}/kibana/{ref_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeploymentKibResourceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentKibResourceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-deployment-kib-resource-info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDeployments lists deployments

  List Deployments.
*/
func (a *Client) ListDeployments(params *ListDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-deployments",
		Method:             "GET",
		PathPattern:        "/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-deployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MigrateDeployment builds migrate deployment template request

  Returns a deployment update request that would transform this deployment from its template to the provided one.
*/
func (a *Client) MigrateDeployment(params *MigrateDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*MigrateDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigrateDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "migrate-deployment",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/_migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MigrateDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MigrateDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for migrate-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetElasticsearchUserPassword resets elastic user password

  Resets the password of the 'elastic' user.
*/
func (a *Client) ResetElasticsearchUserPassword(params *ResetElasticsearchUserPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ResetElasticsearchUserPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetElasticsearchUserPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reset-elasticsearch-user-password",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/_reset-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetElasticsearchUserPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetElasticsearchUserPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reset-elasticsearch-user-password: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartDeploymentEsResource restarts deployment elasticsearch resource

  Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
*/
func (a *Client) RestartDeploymentEsResource(params *RestartDeploymentEsResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RestartDeploymentEsResourceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartDeploymentEsResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restart-deployment-es-resource",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/_restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartDeploymentEsResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartDeploymentEsResourceAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restart-deployment-es-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartDeploymentStatelessResource restarts deployment stateless resource

  Restarts a Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
*/
func (a *Client) RestartDeploymentStatelessResource(params *RestartDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RestartDeploymentStatelessResourceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartDeploymentStatelessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restart-deployment-stateless-resource",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartDeploymentStatelessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartDeploymentStatelessResourceAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restart-deployment-stateless-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestoreDeployment restores a shutdown deployment

  Restores all resources in a Deployment.
*/
func (a *Client) RestoreDeployment(params *RestoreDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restore-deployment",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restore-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestoreDeploymentResource restores a shutdown resource

  Restores a shutdown resource belonging to a given Deployment.
*/
func (a *Client) RestoreDeploymentResource(params *RestoreDeploymentResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreDeploymentResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreDeploymentResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restore-deployment-resource",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreDeploymentResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreDeploymentResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restore-deployment-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncDeployment resynchronizes deployment

  Immediately resynchronizes the search index for the selected deployment.
*/
func (a *Client) ResyncDeployment(params *ResyncDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-deployment",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncDeployments resynchronizes deployments

  Resynchronizes the search index for all the deployments.
*/
func (a *Client) ResyncDeployments(params *ResyncDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-deployments",
		Method:             "POST",
		PathPattern:        "/deployments/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-deployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchDeployments searches deployments

  Retrieves the information for all of the deployments that match the specified query.
*/
func (a *Client) SearchDeployments(params *SearchDeploymentsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDeploymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search-deployments",
		Method:             "POST",
		PathPattern:        "/deployments/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchDeploymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-deployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchEligibleRemoteClusters gets eligible remote clusters

  Returns the list of deployments which contain eligible remote clusters for a specific version.
*/
func (a *Client) SearchEligibleRemoteClusters(params *SearchEligibleRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchEligibleRemoteClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchEligibleRemoteClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search-eligible-remote-clusters",
		Method:             "POST",
		PathPattern:        "/deployments/eligible-remote-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchEligibleRemoteClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchEligibleRemoteClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-eligible-remote-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAppsearchReadOnlyMode sets app search read only status

  Enable/Disable read-only mode on the given App Search resource.
*/
func (a *Client) SetAppsearchReadOnlyMode(params *SetAppsearchReadOnlyModeParams, authInfo runtime.ClientAuthInfoWriter) (*SetAppsearchReadOnlyModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAppsearchReadOnlyModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-appsearch-read-only-mode",
		Method:             "PUT",
		PathPattern:        "/deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAppsearchReadOnlyModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAppsearchReadOnlyModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-appsearch-read-only-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetDeploymentEsResourceKeystore adds or remove settings from the elasticsearch resource keystore

  Fetches the current values of the keystore for the Elasticsearch resource.
*/
func (a *Client) SetDeploymentEsResourceKeystore(params *SetDeploymentEsResourceKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*SetDeploymentEsResourceKeystoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDeploymentEsResourceKeystoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-deployment-es-resource-keystore",
		Method:             "PATCH",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/keystore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDeploymentEsResourceKeystoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDeploymentEsResourceKeystoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-deployment-es-resource-keystore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetDeploymentEsResourceRemoteClusters sets remote clusters

  Overwrites or creates the remote clusters for the elasticsearch resource.
*/
func (a *Client) SetDeploymentEsResourceRemoteClusters(params *SetDeploymentEsResourceRemoteClustersParams, authInfo runtime.ClientAuthInfoWriter) (*SetDeploymentEsResourceRemoteClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDeploymentEsResourceRemoteClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-deployment-es-resource-remote-clusters",
		Method:             "PUT",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/remote-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDeploymentEsResourceRemoteClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDeploymentEsResourceRemoteClustersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-deployment-es-resource-remote-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetDeploymentResourceRawMetadata sets a deployment s resource metadata

  Advanced use only. Sets the internal metadata, in free-form JSON, for the resource.
Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
*/
func (a *Client) SetDeploymentResourceRawMetadata(params *SetDeploymentResourceRawMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*SetDeploymentResourceRawMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDeploymentResourceRawMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-deployment-resource-raw-metadata",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDeploymentResourceRawMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDeploymentResourceRawMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-deployment-resource-raw-metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownDeployment shuts down deployment

  Shuts down all resources in a Deployment.
*/
func (a *Client) ShutdownDeployment(params *ShutdownDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shutdown-deployment",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/_shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownDeploymentEsResource shutdowns deployment elasticsearch resource

  Shutdown Elasticsearch Resource belonging to a given Deployment.
*/
func (a *Client) ShutdownDeploymentEsResource(params *ShutdownDeploymentEsResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownDeploymentEsResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownDeploymentEsResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shutdown-deployment-es-resource",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/elasticsearch/{ref_id}/_shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownDeploymentEsResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownDeploymentEsResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown-deployment-es-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownDeploymentStatelessResource shutdowns deployment stateless resource

  Shut down Stateless Resource belonging to a given Deployment.
Kibana cannot be shut down on Elasticsearch Service as it is required for Elasticsearch administrative functions, such as Snapshot Lifecycle Management and version upgrades.
*/
func (a *Client) ShutdownDeploymentStatelessResource(params *ShutdownDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownDeploymentStatelessResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownDeploymentStatelessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shutdown-deployment-stateless-resource",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownDeploymentStatelessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownDeploymentStatelessResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown-deployment-stateless-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartDeploymentResourceInstances starts instances

  Starts instances belonging to a Deployment Resource.
*/
func (a *Client) StartDeploymentResourceInstances(params *StartDeploymentResourceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDeploymentResourceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-deployment-resource-instances",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDeploymentResourceInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDeploymentResourceInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-deployment-resource-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartDeploymentResourceInstancesAll starts all instances

  Starts all instances belonging to a Deployment Resource.
*/
func (a *Client) StartDeploymentResourceInstancesAll(params *StartDeploymentResourceInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDeploymentResourceInstancesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-deployment-resource-instances-all",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDeploymentResourceInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDeploymentResourceInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-deployment-resource-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartDeploymentResourceInstancesAllMaintenanceMode starts maintenance mode all instances

  Starts maintenance mode of all instances belonging to a Deployment Resource.
*/
func (a *Client) StartDeploymentResourceInstancesAllMaintenanceMode(params *StartDeploymentResourceInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDeploymentResourceInstancesAllMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-deployment-resource-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDeploymentResourceInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDeploymentResourceInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-deployment-resource-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartDeploymentResourceMaintenanceMode starts maintenance mode

  Starts maintenance mode of instances belonging to a Deployment Resource.
*/
func (a *Client) StartDeploymentResourceMaintenanceMode(params *StartDeploymentResourceMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartDeploymentResourceMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDeploymentResourceMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-deployment-resource-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDeploymentResourceMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDeploymentResourceMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-deployment-resource-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopDeploymentResourceInstances stops instances

  Stops instances belonging to a Deployment Resource.
*/
func (a *Client) StopDeploymentResourceInstances(params *StopDeploymentResourceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDeploymentResourceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-deployment-resource-instances",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopDeploymentResourceInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopDeploymentResourceInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-deployment-resource-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopDeploymentResourceInstancesAll stops all instances

  Stops all instances belonging to a Deployment Resource.
*/
func (a *Client) StopDeploymentResourceInstancesAll(params *StopDeploymentResourceInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDeploymentResourceInstancesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-deployment-resource-instances-all",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopDeploymentResourceInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopDeploymentResourceInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-deployment-resource-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopDeploymentResourceInstancesAllMaintenanceMode stops maintenance mode all instances

  Stops maintenance mode of all instances belonging to a Deployment Resource.
*/
func (a *Client) StopDeploymentResourceInstancesAllMaintenanceMode(params *StopDeploymentResourceInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDeploymentResourceInstancesAllMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-deployment-resource-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopDeploymentResourceInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopDeploymentResourceInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-deployment-resource-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopDeploymentResourceMaintenanceMode stops maintenance mode

  Stops maintenance mode of instances belonging to a Resource.
*/
func (a *Client) StopDeploymentResourceMaintenanceMode(params *StopDeploymentResourceMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopDeploymentResourceMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDeploymentResourceMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-deployment-resource-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopDeploymentResourceMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopDeploymentResourceMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-deployment-resource-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeployment updates deployment

  Updates a Deployment.
*/
func (a *Client) UpdateDeployment(params *UpdateDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-deployment",
		Method:             "PUT",
		PathPattern:        "/deployments/{deployment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-deployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpgradeDeploymentStatelessResource upgrades kibana a p m app search inside deployment

  Upgrades a running cluster.
*/
func (a *Client) UpgradeDeploymentStatelessResource(params *UpgradeDeploymentStatelessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpgradeDeploymentStatelessResourceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeDeploymentStatelessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgrade-deployment-stateless-resource",
		Method:             "POST",
		PathPattern:        "/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeDeploymentStatelessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeDeploymentStatelessResourceAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrade-deployment-stateless-resource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
