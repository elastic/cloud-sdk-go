// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewShutdownDeploymentParams creates a new ShutdownDeploymentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewShutdownDeploymentParams() *ShutdownDeploymentParams {
	return &ShutdownDeploymentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewShutdownDeploymentParamsWithTimeout creates a new ShutdownDeploymentParams object
// with the ability to set a timeout on a request.
func NewShutdownDeploymentParamsWithTimeout(timeout time.Duration) *ShutdownDeploymentParams {
	return &ShutdownDeploymentParams{
		timeout: timeout,
	}
}

// NewShutdownDeploymentParamsWithContext creates a new ShutdownDeploymentParams object
// with the ability to set a context for a request.
func NewShutdownDeploymentParamsWithContext(ctx context.Context) *ShutdownDeploymentParams {
	return &ShutdownDeploymentParams{
		Context: ctx,
	}
}

// NewShutdownDeploymentParamsWithHTTPClient creates a new ShutdownDeploymentParams object
// with the ability to set a custom HTTPClient for a request.
func NewShutdownDeploymentParamsWithHTTPClient(client *http.Client) *ShutdownDeploymentParams {
	return &ShutdownDeploymentParams{
		HTTPClient: client,
	}
}

/* ShutdownDeploymentParams contains all the parameters to send to the API endpoint
   for the shutdown deployment operation.

   Typically these are written to a http.Request.
*/
type ShutdownDeploymentParams struct {

	/* DeploymentID.

	   Identifier for the Deployment
	*/
	DeploymentID string

	/* Hide.

	   Whether or not to hide the deployment and its resources.Only applicable for Platform administrators.
	*/
	Hide *bool

	/* SkipSnapshot.

	   Whether or not to skip snapshots before shutting down the resources
	*/
	SkipSnapshot *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the shutdown deployment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShutdownDeploymentParams) WithDefaults() *ShutdownDeploymentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the shutdown deployment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ShutdownDeploymentParams) SetDefaults() {
	var (
		skipSnapshotDefault = bool(false)
	)

	val := ShutdownDeploymentParams{
		SkipSnapshot: &skipSnapshotDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the shutdown deployment params
func (o *ShutdownDeploymentParams) WithTimeout(timeout time.Duration) *ShutdownDeploymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the shutdown deployment params
func (o *ShutdownDeploymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the shutdown deployment params
func (o *ShutdownDeploymentParams) WithContext(ctx context.Context) *ShutdownDeploymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the shutdown deployment params
func (o *ShutdownDeploymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the shutdown deployment params
func (o *ShutdownDeploymentParams) WithHTTPClient(client *http.Client) *ShutdownDeploymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the shutdown deployment params
func (o *ShutdownDeploymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeploymentID adds the deploymentID to the shutdown deployment params
func (o *ShutdownDeploymentParams) WithDeploymentID(deploymentID string) *ShutdownDeploymentParams {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the shutdown deployment params
func (o *ShutdownDeploymentParams) SetDeploymentID(deploymentID string) {
	o.DeploymentID = deploymentID
}

// WithHide adds the hide to the shutdown deployment params
func (o *ShutdownDeploymentParams) WithHide(hide *bool) *ShutdownDeploymentParams {
	o.SetHide(hide)
	return o
}

// SetHide adds the hide to the shutdown deployment params
func (o *ShutdownDeploymentParams) SetHide(hide *bool) {
	o.Hide = hide
}

// WithSkipSnapshot adds the skipSnapshot to the shutdown deployment params
func (o *ShutdownDeploymentParams) WithSkipSnapshot(skipSnapshot *bool) *ShutdownDeploymentParams {
	o.SetSkipSnapshot(skipSnapshot)
	return o
}

// SetSkipSnapshot adds the skipSnapshot to the shutdown deployment params
func (o *ShutdownDeploymentParams) SetSkipSnapshot(skipSnapshot *bool) {
	o.SkipSnapshot = skipSnapshot
}

// WriteToRequest writes these params to a swagger request
func (o *ShutdownDeploymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param deployment_id
	if err := r.SetPathParam("deployment_id", o.DeploymentID); err != nil {
		return err
	}

	if o.Hide != nil {

		// query param hide
		var qrHide bool

		if o.Hide != nil {
			qrHide = *o.Hide
		}
		qHide := swag.FormatBool(qrHide)
		if qHide != "" {

			if err := r.SetQueryParam("hide", qHide); err != nil {
				return err
			}
		}
	}

	if o.SkipSnapshot != nil {

		// query param skip_snapshot
		var qrSkipSnapshot bool

		if o.SkipSnapshot != nil {
			qrSkipSnapshot = *o.SkipSnapshot
		}
		qSkipSnapshot := swag.FormatBool(qrSkipSnapshot)
		if qSkipSnapshot != "" {

			if err := r.SetQueryParam("skip_snapshot", qSkipSnapshot); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
