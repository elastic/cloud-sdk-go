// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_kibana

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// CreateKibanaClusterReader is a Reader for the CreateKibanaCluster structure.
type CreateKibanaClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateKibanaClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateKibanaClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateKibanaClusterCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateKibanaClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewCreateKibanaClusterRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateKibanaClusterOK creates a CreateKibanaClusterOK with default headers values
func NewCreateKibanaClusterOK() *CreateKibanaClusterOK {
	return &CreateKibanaClusterOK{}
}

/* CreateKibanaClusterOK describes a response with status code 200, with default header values.

The cluster definition was valid - no further action was requested. The return object contains an internal representation of the plan, for use in debugging
*/
type CreateKibanaClusterOK struct {
	Payload *models.ClusterCrudResponse
}

func (o *CreateKibanaClusterOK) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana][%d] createKibanaClusterOK  %+v", 200, o.Payload)
}
func (o *CreateKibanaClusterOK) GetPayload() *models.ClusterCrudResponse {
	return o.Payload
}

func (o *CreateKibanaClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterCrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKibanaClusterCreated creates a CreateKibanaClusterCreated with default headers values
func NewCreateKibanaClusterCreated() *CreateKibanaClusterCreated {
	return &CreateKibanaClusterCreated{}
}

/* CreateKibanaClusterCreated describes a response with status code 201, with default header values.

The cluster definition was valid and the cluster creation has started
*/
type CreateKibanaClusterCreated struct {
	Payload *models.ClusterCrudResponse
}

func (o *CreateKibanaClusterCreated) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana][%d] createKibanaClusterCreated  %+v", 201, o.Payload)
}
func (o *CreateKibanaClusterCreated) GetPayload() *models.ClusterCrudResponse {
	return o.Payload
}

func (o *CreateKibanaClusterCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterCrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKibanaClusterBadRequest creates a CreateKibanaClusterBadRequest with default headers values
func NewCreateKibanaClusterBadRequest() *CreateKibanaClusterBadRequest {
	return &CreateKibanaClusterBadRequest{}
}

/* CreateKibanaClusterBadRequest describes a response with status code 400, with default header values.

The cluster definition contained errors (code: 'clusters.cluster_invalid_plan' and 'clusters.plan_feature_not_implemented')
*/
type CreateKibanaClusterBadRequest struct {
	Payload *models.BasicFailedReply
}

func (o *CreateKibanaClusterBadRequest) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana][%d] createKibanaClusterBadRequest  %+v", 400, o.Payload)
}
func (o *CreateKibanaClusterBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CreateKibanaClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateKibanaClusterRetryWith creates a CreateKibanaClusterRetryWith with default headers values
func NewCreateKibanaClusterRetryWith() *CreateKibanaClusterRetryWith {
	return &CreateKibanaClusterRetryWith{}
}

/* CreateKibanaClusterRetryWith describes a response with status code 449, with default header values.

elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type CreateKibanaClusterRetryWith struct {
	Payload *models.BasicFailedReply
}

func (o *CreateKibanaClusterRetryWith) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana][%d] createKibanaClusterRetryWith  %+v", 449, o.Payload)
}
func (o *CreateKibanaClusterRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CreateKibanaClusterRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
