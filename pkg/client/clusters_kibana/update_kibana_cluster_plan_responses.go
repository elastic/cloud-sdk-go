// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_kibana

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// UpdateKibanaClusterPlanReader is a Reader for the UpdateKibanaClusterPlan structure.
type UpdateKibanaClusterPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateKibanaClusterPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateKibanaClusterPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateKibanaClusterPlanAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateKibanaClusterPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateKibanaClusterPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewUpdateKibanaClusterPlanRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateKibanaClusterPlanOK creates a UpdateKibanaClusterPlanOK with default headers values
func NewUpdateKibanaClusterPlanOK() *UpdateKibanaClusterPlanOK {
	return &UpdateKibanaClusterPlanOK{}
}

/* UpdateKibanaClusterPlanOK describes a response with status code 200, with default header values.

The cluster definition was valid - no further action was requested. The return object contains an internal representation of the plan, for use in debugging
*/
type UpdateKibanaClusterPlanOK struct {
	Payload *models.ClusterCrudResponse
}

func (o *UpdateKibanaClusterPlanOK) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana/{cluster_id}/plan][%d] updateKibanaClusterPlanOK  %+v", 200, o.Payload)
}
func (o *UpdateKibanaClusterPlanOK) GetPayload() *models.ClusterCrudResponse {
	return o.Payload
}

func (o *UpdateKibanaClusterPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterCrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKibanaClusterPlanAccepted creates a UpdateKibanaClusterPlanAccepted with default headers values
func NewUpdateKibanaClusterPlanAccepted() *UpdateKibanaClusterPlanAccepted {
	return &UpdateKibanaClusterPlanAccepted{}
}

/* UpdateKibanaClusterPlanAccepted describes a response with status code 202, with default header values.

The plan definition was valid and the updated plan is in progress
*/
type UpdateKibanaClusterPlanAccepted struct {
	Payload *models.ClusterCrudResponse
}

func (o *UpdateKibanaClusterPlanAccepted) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana/{cluster_id}/plan][%d] updateKibanaClusterPlanAccepted  %+v", 202, o.Payload)
}
func (o *UpdateKibanaClusterPlanAccepted) GetPayload() *models.ClusterCrudResponse {
	return o.Payload
}

func (o *UpdateKibanaClusterPlanAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterCrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKibanaClusterPlanBadRequest creates a UpdateKibanaClusterPlanBadRequest with default headers values
func NewUpdateKibanaClusterPlanBadRequest() *UpdateKibanaClusterPlanBadRequest {
	return &UpdateKibanaClusterPlanBadRequest{}
}

/* UpdateKibanaClusterPlanBadRequest describes a response with status code 400, with default header values.

The cluster definition contained errors (code: 'clusters.cluster_invalid_plan' and 'clusters.plan_feature_not_implemented')
*/
type UpdateKibanaClusterPlanBadRequest struct {
	Payload *models.BasicFailedReply
}

func (o *UpdateKibanaClusterPlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana/{cluster_id}/plan][%d] updateKibanaClusterPlanBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateKibanaClusterPlanBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateKibanaClusterPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKibanaClusterPlanNotFound creates a UpdateKibanaClusterPlanNotFound with default headers values
func NewUpdateKibanaClusterPlanNotFound() *UpdateKibanaClusterPlanNotFound {
	return &UpdateKibanaClusterPlanNotFound{}
}

/* UpdateKibanaClusterPlanNotFound describes a response with status code 404, with default header values.

The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found')
*/
type UpdateKibanaClusterPlanNotFound struct {
	Payload *models.BasicFailedReply
}

func (o *UpdateKibanaClusterPlanNotFound) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana/{cluster_id}/plan][%d] updateKibanaClusterPlanNotFound  %+v", 404, o.Payload)
}
func (o *UpdateKibanaClusterPlanNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateKibanaClusterPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKibanaClusterPlanRetryWith creates a UpdateKibanaClusterPlanRetryWith with default headers values
func NewUpdateKibanaClusterPlanRetryWith() *UpdateKibanaClusterPlanRetryWith {
	return &UpdateKibanaClusterPlanRetryWith{}
}

/* UpdateKibanaClusterPlanRetryWith describes a response with status code 449, with default header values.

elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type UpdateKibanaClusterPlanRetryWith struct {
	Payload *models.BasicFailedReply
}

func (o *UpdateKibanaClusterPlanRetryWith) Error() string {
	return fmt.Sprintf("[POST /clusters/kibana/{cluster_id}/plan][%d] updateKibanaClusterPlanRetryWith  %+v", 449, o.Payload)
}
func (o *UpdateKibanaClusterPlanRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateKibanaClusterPlanRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
