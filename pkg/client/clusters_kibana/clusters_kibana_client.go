// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_kibana

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters kibana API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters kibana API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelKibanaClusterPendingPlan(params *CancelKibanaClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelKibanaClusterPendingPlanOK, error)

	CreateKibanaCluster(params *CreateKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKibanaClusterOK, *CreateKibanaClusterCreated, error)

	DeleteKibProxyRequests(params *DeleteKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKibProxyRequestsOK, error)

	DeleteKibanaCluster(params *DeleteKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKibanaClusterOK, error)

	GetKibProxyRequests(params *GetKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibProxyRequestsOK, error)

	GetKibanaCluster(params *GetKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterOK, error)

	GetKibanaClusterMetadataRaw(params *GetKibanaClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterMetadataRawOK, error)

	GetKibanaClusterMetadataSettings(params *GetKibanaClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterMetadataSettingsOK, error)

	GetKibanaClusterPendingPlan(params *GetKibanaClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterPendingPlanOK, error)

	GetKibanaClusterPlan(params *GetKibanaClusterPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterPlanOK, error)

	GetKibanaClusterPlanActivity(params *GetKibanaClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterPlanActivityOK, error)

	GetKibanaClusters(params *GetKibanaClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClustersOK, error)

	MoveKibanaClusterInstances(params *MoveKibanaClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveKibanaClusterInstancesAccepted, error)

	MoveKibanaClusterInstancesAdvanced(params *MoveKibanaClusterInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveKibanaClusterInstancesAdvancedAccepted, error)

	PostKibProxyRequests(params *PostKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostKibProxyRequestsOK, error)

	PutKibProxyRequests(params *PutKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutKibProxyRequestsOK, error)

	RestartKibanaCluster(params *RestartKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartKibanaClusterAccepted, error)

	ResyncKibanaCluster(params *ResyncKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncKibanaClusterOK, error)

	ResyncKibanaClusters(params *ResyncKibanaClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncKibanaClustersAccepted, error)

	SearchKibanaClusters(params *SearchKibanaClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchKibanaClustersOK, error)

	SetKibanaClusterMetadataRaw(params *SetKibanaClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetKibanaClusterMetadataRawOK, error)

	SetKibanaClusterName(params *SetKibanaClusterNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetKibanaClusterNameOK, error)

	ShutdownKibanaCluster(params *ShutdownKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShutdownKibanaClusterAccepted, error)

	StartKibanaClusterInstances(params *StartKibanaClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterInstancesAccepted, error)

	StartKibanaClusterInstancesAll(params *StartKibanaClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterInstancesAllAccepted, error)

	StartKibanaClusterInstancesAllMaintenanceMode(params *StartKibanaClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterInstancesAllMaintenanceModeAccepted, error)

	StartKibanaClusterMaintenanceMode(params *StartKibanaClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterMaintenanceModeAccepted, error)

	StopKibanaClusterInstances(params *StopKibanaClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterInstancesAccepted, error)

	StopKibanaClusterInstancesAll(params *StopKibanaClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterInstancesAllAccepted, error)

	StopKibanaClusterInstancesAllMaintenanceMode(params *StopKibanaClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterInstancesAllMaintenanceModeAccepted, error)

	StopKibanaClusterMaintenanceMode(params *StopKibanaClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterMaintenanceModeAccepted, error)

	UpdateKibanaClusterMetadataSettings(params *UpdateKibanaClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKibanaClusterMetadataSettingsOK, error)

	UpdateKibanaClusterPlan(params *UpdateKibanaClusterPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKibanaClusterPlanOK, *UpdateKibanaClusterPlanAccepted, error)

	UpgradeKibanaCluster(params *UpgradeKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeKibanaClusterAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelKibanaClusterPendingPlan cancels pending plan

  DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of the Kibana instance.
*/
func (a *Client) CancelKibanaClusterPendingPlan(params *CancelKibanaClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelKibanaClusterPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelKibanaClusterPendingPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancel-kibana-cluster-pending-plan",
		Method:             "DELETE",
		PathPattern:        "/clusters/kibana/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelKibanaClusterPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelKibanaClusterPendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancel-kibana-cluster-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateKibanaCluster creates cluster

  DEPRECATED (Scheduled to be removed in the next major version): Creates a Kibana instance for the Elasticsearch cluster.
*/
func (a *Client) CreateKibanaCluster(params *CreateKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKibanaClusterOK, *CreateKibanaClusterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-kibana-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/kibana",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateKibanaClusterOK:
		return value, nil, nil
	case *CreateKibanaClusterCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_kibana: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteKibProxyRequests proxies HTTP d e l e t e request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP DELETE request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) DeleteKibProxyRequests(params *DeleteKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKibProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKibProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-kib-proxy-requests",
		Method:             "DELETE",
		PathPattern:        "/clusters/kibana/{cluster_id}/proxy/{kibana_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKibProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKibProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-kib-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteKibanaCluster deletes cluster

  DEPRECATED (Scheduled to be removed in the next major version): Deletes the Kibana instance.
Before you delete the Kibana instance, you must first successfully issue a `_shutdown` command.
*/
func (a *Client) DeleteKibanaCluster(params *DeleteKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKibanaClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-kibana-cluster",
		Method:             "DELETE",
		PathPattern:        "/clusters/kibana/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKibanaClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-kibana-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibProxyRequests proxies HTTP g e t request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP GET request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) GetKibProxyRequests(params *GetKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kib-proxy-requests",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}/proxy/{kibana_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kib-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaCluster gets cluster

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the Kibana instance information.
*/
func (a *Client) GetKibanaCluster(params *GetKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-cluster",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaClusterMetadataRaw gets cluster metadata

  DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance.
*/
func (a *Client) GetKibanaClusterMetadataRaw(params *GetKibanaClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClusterMetadataRawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-cluster-metadata-raw",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClusterMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClusterMetadataRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-cluster-metadata-raw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaClusterMetadataSettings gets cluster metadata settings

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
*/
func (a *Client) GetKibanaClusterMetadataSettings(params *GetKibanaClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClusterMetadataSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-cluster-metadata-settings",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClusterMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClusterMetadataSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-cluster-metadata-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaClusterPendingPlan gets pending plan

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of the Kibana instance.
*/
func (a *Client) GetKibanaClusterPendingPlan(params *GetKibanaClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClusterPendingPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-cluster-pending-plan",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClusterPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClusterPendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-cluster-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaClusterPlan gets plan

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
*/
func (a *Client) GetKibanaClusterPlan(params *GetKibanaClusterPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClusterPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-cluster-plan",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClusterPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClusterPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-cluster-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaClusterPlanActivity gets plan activity

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active and historical plan information for the Kibana instance.
*/
func (a *Client) GetKibanaClusterPlanActivity(params *GetKibanaClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClusterPlanActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClusterPlanActivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-cluster-plan-activity",
		Method:             "GET",
		PathPattern:        "/clusters/kibana/{cluster_id}/plan/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClusterPlanActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClusterPlanActivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-cluster-plan-activity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKibanaClusters gets clusters

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all Kibana instances.
*/
func (a *Client) GetKibanaClusters(params *GetKibanaClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKibanaClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKibanaClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-kibana-clusters",
		Method:             "GET",
		PathPattern:        "/clusters/kibana",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKibanaClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKibanaClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-kibana-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveKibanaClusterInstances moves instances

  DEPRECATED (Scheduled to be removed in the next major version): Moves one or more Kibana instances.
*/
func (a *Client) MoveKibanaClusterInstances(params *MoveKibanaClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveKibanaClusterInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveKibanaClusterInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move-kibana-cluster-instances",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/{instance_ids}/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveKibanaClusterInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveKibanaClusterInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-kibana-cluster-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveKibanaClusterInstancesAdvanced moves instances advanced

  DEPRECATED (Scheduled to be removed in the next major version): Moves one or more Kibana instances. The custom configuration settings are posted in the body.
*/
func (a *Client) MoveKibanaClusterInstancesAdvanced(params *MoveKibanaClusterInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveKibanaClusterInstancesAdvancedAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveKibanaClusterInstancesAdvancedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move-kibana-cluster-instances-advanced",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveKibanaClusterInstancesAdvancedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveKibanaClusterInstancesAdvancedAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-kibana-cluster-instances-advanced: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostKibProxyRequests proxies HTTP p o s t request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP POST request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) PostKibProxyRequests(params *PostKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostKibProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKibProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-kib-proxy-requests",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/proxy/{kibana_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKibProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostKibProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-kib-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutKibProxyRequests proxies HTTP p u t request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP PUT request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) PutKibProxyRequests(params *PutKibProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutKibProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutKibProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put-kib-proxy-requests",
		Method:             "PUT",
		PathPattern:        "/clusters/kibana/{cluster_id}/proxy/{kibana_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutKibProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutKibProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-kib-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartKibanaCluster restarts cluster

  DEPRECATED (Scheduled to be removed in the next major version): Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a `cluster_reboot` is applied. A `cluster_reboot` issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied.
*/
func (a *Client) RestartKibanaCluster(params *RestartKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartKibanaClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restart-kibana-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/_restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartKibanaClusterAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restart-kibana-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncKibanaCluster resynchronizes cluster

  DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected Kibana instance.
*/
func (a *Client) ResyncKibanaCluster(params *ResyncKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncKibanaClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-kibana-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncKibanaClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-kibana-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncKibanaClusters resynchronizes clusters

  DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all Kibana instances.
*/
func (a *Client) ResyncKibanaClusters(params *ResyncKibanaClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncKibanaClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncKibanaClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-kibana-clusters",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncKibanaClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncKibanaClustersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-kibana-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchKibanaClusters searches clusters

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Kibana instances that match the specified query.
*/
func (a *Client) SearchKibanaClusters(params *SearchKibanaClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchKibanaClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchKibanaClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search-kibana-clusters",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchKibanaClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchKibanaClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-kibana-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetKibanaClusterMetadataRaw sets cluster metadata

  DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance.
Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
*/
func (a *Client) SetKibanaClusterMetadataRaw(params *SetKibanaClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetKibanaClusterMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetKibanaClusterMetadataRawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-kibana-cluster-metadata-raw",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetKibanaClusterMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetKibanaClusterMetadataRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-kibana-cluster-metadata-raw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetKibanaClusterName sets cluster name

  DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the Kibana instance.
*/
func (a *Client) SetKibanaClusterName(params *SetKibanaClusterNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetKibanaClusterNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetKibanaClusterNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-kibana-cluster-name",
		Method:             "PUT",
		PathPattern:        "/clusters/kibana/{cluster_id}/metadata/name/{new_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetKibanaClusterNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetKibanaClusterNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-kibana-cluster-name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownKibanaCluster shuts down cluster

  DEPRECATED (Scheduled to be removed in the next major version): Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance.
*/
func (a *Client) ShutdownKibanaCluster(params *ShutdownKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShutdownKibanaClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "shutdown-kibana-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/_shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownKibanaClusterAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown-kibana-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartKibanaClusterInstances starts instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts the specified Kibana instances.
*/
func (a *Client) StartKibanaClusterInstances(params *StartKibanaClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartKibanaClusterInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-kibana-cluster-instances",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/{instance_ids}/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartKibanaClusterInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartKibanaClusterInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-kibana-cluster-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartKibanaClusterInstancesAll starts all instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts all of the Kibana instances.
*/
func (a *Client) StartKibanaClusterInstancesAll(params *StartKibanaClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartKibanaClusterInstancesAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-kibana-cluster-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartKibanaClusterInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartKibanaClusterInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-kibana-cluster-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartKibanaClusterInstancesAllMaintenanceMode starts maintenance mode all instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on all of the Kibana instances.
*/
func (a *Client) StartKibanaClusterInstancesAllMaintenanceMode(params *StartKibanaClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartKibanaClusterInstancesAllMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-kibana-cluster-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartKibanaClusterInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartKibanaClusterInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-kibana-cluster-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartKibanaClusterMaintenanceMode starts maintenance mode

  DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on the specified Kibana instances.
*/
func (a *Client) StartKibanaClusterMaintenanceMode(params *StartKibanaClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartKibanaClusterMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartKibanaClusterMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-kibana-cluster-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartKibanaClusterMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartKibanaClusterMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-kibana-cluster-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopKibanaClusterInstances stops instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops the specified Kibana instances.
*/
func (a *Client) StopKibanaClusterInstances(params *StopKibanaClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopKibanaClusterInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-kibana-cluster-instances",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/{instance_ids}/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopKibanaClusterInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopKibanaClusterInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-kibana-cluster-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopKibanaClusterInstancesAll stops all instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops all of the Kibana instances.
*/
func (a *Client) StopKibanaClusterInstancesAll(params *StopKibanaClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopKibanaClusterInstancesAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-kibana-cluster-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopKibanaClusterInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopKibanaClusterInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-kibana-cluster-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopKibanaClusterInstancesAllMaintenanceMode stops maintenance mode all instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on all of the Kibana instances.
*/
func (a *Client) StopKibanaClusterInstancesAllMaintenanceMode(params *StopKibanaClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopKibanaClusterInstancesAllMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-kibana-cluster-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopKibanaClusterInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopKibanaClusterInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-kibana-cluster-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopKibanaClusterMaintenanceMode stops maintenance mode

  DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on the specified Kibana instances.
*/
func (a *Client) StopKibanaClusterMaintenanceMode(params *StopKibanaClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopKibanaClusterMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopKibanaClusterMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-kibana-cluster-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopKibanaClusterMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopKibanaClusterMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-kibana-cluster-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateKibanaClusterMetadataSettings updates cluster metadata settings

  DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateKibanaClusterMetadataSettings(params *UpdateKibanaClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKibanaClusterMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKibanaClusterMetadataSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-kibana-cluster-metadata-settings",
		Method:             "PATCH",
		PathPattern:        "/clusters/kibana/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateKibanaClusterMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKibanaClusterMetadataSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-kibana-cluster-metadata-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateKibanaClusterPlan updates plan

  DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of the Kibana instance.
*/
func (a *Client) UpdateKibanaClusterPlan(params *UpdateKibanaClusterPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKibanaClusterPlanOK, *UpdateKibanaClusterPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKibanaClusterPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-kibana-cluster-plan",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateKibanaClusterPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateKibanaClusterPlanOK:
		return value, nil, nil
	case *UpdateKibanaClusterPlanAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_kibana: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpgradeKibanaCluster upgrades cluster

  DEPRECATED (Scheduled to be removed in the next major version): Upgrades an active Kibana instance.
*/
func (a *Client) UpgradeKibanaCluster(params *UpgradeKibanaClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeKibanaClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeKibanaClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgrade-kibana-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/kibana/{cluster_id}/_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeKibanaClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeKibanaClusterAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrade-kibana-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
