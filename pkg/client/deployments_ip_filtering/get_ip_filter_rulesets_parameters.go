// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments_ip_filtering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIPFilterRulesetsParams creates a new GetIPFilterRulesetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIPFilterRulesetsParams() *GetIPFilterRulesetsParams {
	return &GetIPFilterRulesetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPFilterRulesetsParamsWithTimeout creates a new GetIPFilterRulesetsParams object
// with the ability to set a timeout on a request.
func NewGetIPFilterRulesetsParamsWithTimeout(timeout time.Duration) *GetIPFilterRulesetsParams {
	return &GetIPFilterRulesetsParams{
		timeout: timeout,
	}
}

// NewGetIPFilterRulesetsParamsWithContext creates a new GetIPFilterRulesetsParams object
// with the ability to set a context for a request.
func NewGetIPFilterRulesetsParamsWithContext(ctx context.Context) *GetIPFilterRulesetsParams {
	return &GetIPFilterRulesetsParams{
		Context: ctx,
	}
}

// NewGetIPFilterRulesetsParamsWithHTTPClient creates a new GetIPFilterRulesetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIPFilterRulesetsParamsWithHTTPClient(client *http.Client) *GetIPFilterRulesetsParams {
	return &GetIPFilterRulesetsParams{
		HTTPClient: client,
	}
}

/* GetIPFilterRulesetsParams contains all the parameters to send to the API endpoint
   for the get ip filter rulesets operation.

   Typically these are written to a http.Request.
*/
type GetIPFilterRulesetsParams struct {

	/* IncludeAssociations.

	   Retrieves a list of resources that are associated to the specified ruleset.
	*/
	IncludeAssociations *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ip filter rulesets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIPFilterRulesetsParams) WithDefaults() *GetIPFilterRulesetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ip filter rulesets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIPFilterRulesetsParams) SetDefaults() {
	var (
		includeAssociationsDefault = bool(false)
	)

	val := GetIPFilterRulesetsParams{
		IncludeAssociations: &includeAssociationsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) WithTimeout(timeout time.Duration) *GetIPFilterRulesetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) WithContext(ctx context.Context) *GetIPFilterRulesetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) WithHTTPClient(client *http.Client) *GetIPFilterRulesetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeAssociations adds the includeAssociations to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) WithIncludeAssociations(includeAssociations *bool) *GetIPFilterRulesetsParams {
	o.SetIncludeAssociations(includeAssociations)
	return o
}

// SetIncludeAssociations adds the includeAssociations to the get ip filter rulesets params
func (o *GetIPFilterRulesetsParams) SetIncludeAssociations(includeAssociations *bool) {
	o.IncludeAssociations = includeAssociations
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPFilterRulesetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeAssociations != nil {

		// query param include_associations
		var qrIncludeAssociations bool

		if o.IncludeAssociations != nil {
			qrIncludeAssociations = *o.IncludeAssociations
		}
		qIncludeAssociations := swag.FormatBool(qrIncludeAssociations)
		if qIncludeAssociations != "" {

			if err := r.SetQueryParam("include_associations", qIncludeAssociations); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
