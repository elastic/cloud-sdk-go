// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments_ip_filtering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// UpdateIPFilterRulesetReader is a Reader for the UpdateIPFilterRuleset structure.
type UpdateIPFilterRulesetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIPFilterRulesetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIPFilterRulesetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateIPFilterRulesetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewUpdateIPFilterRulesetRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateIPFilterRulesetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateIPFilterRulesetOK creates a UpdateIPFilterRulesetOK with default headers values
func NewUpdateIPFilterRulesetOK() *UpdateIPFilterRulesetOK {
	return &UpdateIPFilterRulesetOK{}
}

/* UpdateIPFilterRulesetOK describes a response with status code 200, with default header values.

The ruleset definition was valid and the update has started
*/
type UpdateIPFilterRulesetOK struct {
	Payload *models.RuleSetResponse
}

func (o *UpdateIPFilterRulesetOK) Error() string {
	return fmt.Sprintf("[PUT /deployments/ip-filtering/rulesets/{ruleset_id}][%d] updateIpFilterRulesetOK  %+v", 200, o.Payload)
}
func (o *UpdateIPFilterRulesetOK) GetPayload() *models.RuleSetResponse {
	return o.Payload
}

func (o *UpdateIPFilterRulesetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuleSetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIPFilterRulesetBadRequest creates a UpdateIPFilterRulesetBadRequest with default headers values
func NewUpdateIPFilterRulesetBadRequest() *UpdateIPFilterRulesetBadRequest {
	return &UpdateIPFilterRulesetBadRequest{}
}

/* UpdateIPFilterRulesetBadRequest describes a response with status code 400, with default header values.

The ruleset definition contains errors (code: 'ip_filtering.ruleset_invalid')
*/
type UpdateIPFilterRulesetBadRequest struct {
	Payload *models.BasicFailedReply
}

func (o *UpdateIPFilterRulesetBadRequest) Error() string {
	return fmt.Sprintf("[PUT /deployments/ip-filtering/rulesets/{ruleset_id}][%d] updateIpFilterRulesetBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateIPFilterRulesetBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateIPFilterRulesetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIPFilterRulesetRetryWith creates a UpdateIPFilterRulesetRetryWith with default headers values
func NewUpdateIPFilterRulesetRetryWith() *UpdateIPFilterRulesetRetryWith {
	return &UpdateIPFilterRulesetRetryWith{}
}

/* UpdateIPFilterRulesetRetryWith describes a response with status code 449, with default header values.

elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type UpdateIPFilterRulesetRetryWith struct {
	Payload *models.BasicFailedReply
}

func (o *UpdateIPFilterRulesetRetryWith) Error() string {
	return fmt.Sprintf("[PUT /deployments/ip-filtering/rulesets/{ruleset_id}][%d] updateIpFilterRulesetRetryWith  %+v", 449, o.Payload)
}
func (o *UpdateIPFilterRulesetRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateIPFilterRulesetRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIPFilterRulesetInternalServerError creates a UpdateIPFilterRulesetInternalServerError with default headers values
func NewUpdateIPFilterRulesetInternalServerError() *UpdateIPFilterRulesetInternalServerError {
	return &UpdateIPFilterRulesetInternalServerError{}
}

/* UpdateIPFilterRulesetInternalServerError describes a response with status code 500, with default header values.

The request execution failed (code: 'ip_filtering.request_execution_failed')
*/
type UpdateIPFilterRulesetInternalServerError struct {
	Payload *models.BasicFailedReply
}

func (o *UpdateIPFilterRulesetInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /deployments/ip-filtering/rulesets/{ruleset_id}][%d] updateIpFilterRulesetInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateIPFilterRulesetInternalServerError) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *UpdateIPFilterRulesetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
