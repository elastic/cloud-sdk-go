// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// DeleteDeploymentTemplateReader is a Reader for the DeleteDeploymentTemplate structure.
type DeleteDeploymentTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDeploymentTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDeploymentTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteDeploymentTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewDeleteDeploymentTemplateRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDeploymentTemplateOK creates a DeleteDeploymentTemplateOK with default headers values
func NewDeleteDeploymentTemplateOK() *DeleteDeploymentTemplateOK {
	return &DeleteDeploymentTemplateOK{}
}

/* DeleteDeploymentTemplateOK describes a response with status code 200, with default header values.

The deployment template was successfully deleted.
*/
type DeleteDeploymentTemplateOK struct {
	Payload models.EmptyResponse
}

func (o *DeleteDeploymentTemplateOK) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/templates/deployments/{template_id}][%d] deleteDeploymentTemplateOK  %+v", 200, o.Payload)
}
func (o *DeleteDeploymentTemplateOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *DeleteDeploymentTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDeploymentTemplateNotFound creates a DeleteDeploymentTemplateNotFound with default headers values
func NewDeleteDeploymentTemplateNotFound() *DeleteDeploymentTemplateNotFound {
	return &DeleteDeploymentTemplateNotFound{}
}

/* DeleteDeploymentTemplateNotFound describes a response with status code 404, with default header values.

The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`)
*/
type DeleteDeploymentTemplateNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *DeleteDeploymentTemplateNotFound) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/templates/deployments/{template_id}][%d] deleteDeploymentTemplateNotFound  %+v", 404, o.Payload)
}
func (o *DeleteDeploymentTemplateNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteDeploymentTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDeploymentTemplateRetryWith creates a DeleteDeploymentTemplateRetryWith with default headers values
func NewDeleteDeploymentTemplateRetryWith() *DeleteDeploymentTemplateRetryWith {
	return &DeleteDeploymentTemplateRetryWith{}
}

/* DeleteDeploymentTemplateRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type DeleteDeploymentTemplateRetryWith struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *DeleteDeploymentTemplateRetryWith) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/templates/deployments/{template_id}][%d] deleteDeploymentTemplateRetryWith  %+v", 449, o.Payload)
}
func (o *DeleteDeploymentTemplateRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteDeploymentTemplateRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
