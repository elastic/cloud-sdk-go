// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateCurrentUserParams creates a new UpdateCurrentUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateCurrentUserParams() *UpdateCurrentUserParams {
	return &UpdateCurrentUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateCurrentUserParamsWithTimeout creates a new UpdateCurrentUserParams object
// with the ability to set a timeout on a request.
func NewUpdateCurrentUserParamsWithTimeout(timeout time.Duration) *UpdateCurrentUserParams {
	return &UpdateCurrentUserParams{
		timeout: timeout,
	}
}

// NewUpdateCurrentUserParamsWithContext creates a new UpdateCurrentUserParams object
// with the ability to set a context for a request.
func NewUpdateCurrentUserParamsWithContext(ctx context.Context) *UpdateCurrentUserParams {
	return &UpdateCurrentUserParams{
		Context: ctx,
	}
}

// NewUpdateCurrentUserParamsWithHTTPClient creates a new UpdateCurrentUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateCurrentUserParamsWithHTTPClient(client *http.Client) *UpdateCurrentUserParams {
	return &UpdateCurrentUserParams{
		HTTPClient: client,
	}
}

/* UpdateCurrentUserParams contains all the parameters to send to the API endpoint
   for the update current user operation.

   Typically these are written to a http.Request.
*/
type UpdateCurrentUserParams struct {

	/* Body.

	   All changes in the specified object are applied to the current user according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
	*/
	Body string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update current user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCurrentUserParams) WithDefaults() *UpdateCurrentUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update current user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateCurrentUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update current user params
func (o *UpdateCurrentUserParams) WithTimeout(timeout time.Duration) *UpdateCurrentUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update current user params
func (o *UpdateCurrentUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update current user params
func (o *UpdateCurrentUserParams) WithContext(ctx context.Context) *UpdateCurrentUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update current user params
func (o *UpdateCurrentUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update current user params
func (o *UpdateCurrentUserParams) WithHTTPClient(client *http.Client) *UpdateCurrentUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update current user params
func (o *UpdateCurrentUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update current user params
func (o *UpdateCurrentUserParams) WithBody(body string) *UpdateCurrentUserParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update current user params
func (o *UpdateCurrentUserParams) SetBody(body string) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateCurrentUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
