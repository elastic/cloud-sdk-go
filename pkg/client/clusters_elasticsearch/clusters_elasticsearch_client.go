// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_elasticsearch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters elasticsearch API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters elasticsearch API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelEsClusterMonitoring(params *CancelEsClusterMonitoringParams, authInfo runtime.ClientAuthInfoWriter) (*CancelEsClusterMonitoringAccepted, error)

	CancelEsClusterPendingPlan(params *CancelEsClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CancelEsClusterPendingPlanOK, error)

	CreateEsCluster(params *CreateEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEsClusterOK, *CreateEsClusterCreated, *CreateEsClusterAccepted, error)

	DeleteEsCluster(params *DeleteEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEsClusterOK, error)

	DeleteEsProxyRequests(params *DeleteEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEsProxyRequestsOK, error)

	GenerateEsClusterDiagnostics(params *GenerateEsClusterDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateEsClusterDiagnosticsOK, error)

	GenerateEsClusterLogs(params *GenerateEsClusterLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateEsClusterLogsOK, error)

	GetEsCcsEligibleRemotes(params *GetEsCcsEligibleRemotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsCcsEligibleRemotesOK, error)

	GetEsCluster(params *GetEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterOK, error)

	GetEsClusterCcs(params *GetEsClusterCcsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterCcsOK, error)

	GetEsClusterCcsSettings(params *GetEsClusterCcsSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterCcsSettingsOK, error)

	GetEsClusterCurationSettings(params *GetEsClusterCurationSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterCurationSettingsOK, error)

	GetEsClusterKeystore(params *GetEsClusterKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterKeystoreOK, error)

	GetEsClusterMetadataRaw(params *GetEsClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterMetadataRawOK, error)

	GetEsClusterMetadataSettings(params *GetEsClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterMetadataSettingsOK, error)

	GetEsClusterPendingPlan(params *GetEsClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterPendingPlanOK, error)

	GetEsClusterPlan(params *GetEsClusterPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterPlanOK, error)

	GetEsClusterPlanActivity(params *GetEsClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterPlanActivityOK, error)

	GetEsClusterSnapshotSettings(params *GetEsClusterSnapshotSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterSnapshotSettingsOK, error)

	GetEsClusters(params *GetEsClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClustersOK, error)

	GetEsProxyRequests(params *GetEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsProxyRequestsOK, error)

	MigrateEsClusterPlan(params *MigrateEsClusterPlanParams, authInfo runtime.ClientAuthInfoWriter) (*MigrateEsClusterPlanOK, *MigrateEsClusterPlanAccepted, error)

	MoveEsClusterInstances(params *MoveEsClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveEsClusterInstancesAccepted, error)

	MoveEsClusterInstancesAdvanced(params *MoveEsClusterInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter) (*MoveEsClusterInstancesAdvancedAccepted, error)

	PostEsProxyRequests(params *PostEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*PostEsProxyRequestsOK, error)

	PutEsProxyRequests(params *PutEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*PutEsProxyRequestsOK, error)

	RestartEsCluster(params *RestartEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*RestartEsClusterAccepted, error)

	ResyncEsCluster(params *ResyncEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncEsClusterOK, error)

	ResyncEsClusters(params *ResyncEsClustersParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncEsClustersAccepted, error)

	SearchEsClusters(params *SearchEsClustersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchEsClustersOK, error)

	SetEsClusterCcsSettings(params *SetEsClusterCcsSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterCcsSettingsAccepted, error)

	SetEsClusterInstancesAllSettingsOverrides(params *SetEsClusterInstancesAllSettingsOverridesParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterInstancesAllSettingsOverridesOK, error)

	SetEsClusterInstancesSettingsOverrides(params *SetEsClusterInstancesSettingsOverridesParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterInstancesSettingsOverridesOK, error)

	SetEsClusterKeystore(params *SetEsClusterKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterKeystoreAccepted, error)

	SetEsClusterLegacySecuritySettings(params *SetEsClusterLegacySecuritySettingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterLegacySecuritySettingsOK, error)

	SetEsClusterMetadataRaw(params *SetEsClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterMetadataRawOK, error)

	SetEsClusterMonitoring(params *SetEsClusterMonitoringParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterMonitoringAccepted, error)

	SetEsClusterName(params *SetEsClusterNameParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterNameOK, error)

	ShutdownEsCluster(params *ShutdownEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownEsClusterAccepted, error)

	SnapshotEsCluster(params *SnapshotEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*SnapshotEsClusterAccepted, error)

	StartEsClusterInstances(params *StartEsClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterInstancesAccepted, error)

	StartEsClusterInstancesAll(params *StartEsClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterInstancesAllAccepted, error)

	StartEsClusterInstancesAllMaintenanceMode(params *StartEsClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterInstancesAllMaintenanceModeAccepted, error)

	StartEsClusterMaintenanceMode(params *StartEsClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterMaintenanceModeAccepted, error)

	StopEsClusterInstances(params *StopEsClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterInstancesAccepted, error)

	StopEsClusterInstancesAll(params *StopEsClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterInstancesAllAccepted, error)

	StopEsClusterInstancesAllMaintenanceMode(params *StopEsClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterInstancesAllMaintenanceModeAccepted, error)

	StopEsClusterMaintenanceMode(params *StopEsClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterMaintenanceModeAccepted, error)

	UpdateEsClusterCurationSettings(params *UpdateEsClusterCurationSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterCurationSettingsOK, error)

	UpdateEsClusterMetadataSettings(params *UpdateEsClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterMetadataSettingsOK, error)

	UpdateEsClusterPlan(params *UpdateEsClusterPlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterPlanOK, *UpdateEsClusterPlanAccepted, error)

	UpdateEsClusterSnapshotSettings(params *UpdateEsClusterSnapshotSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterSnapshotSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelEsClusterMonitoring cancels monitoring

  DEPRECATED (Scheduled to be removed in the next major version): Deletes all monitoring destinations for the Elasticsearch cluster.
*/
func (a *Client) CancelEsClusterMonitoring(params *CancelEsClusterMonitoringParams, authInfo runtime.ClientAuthInfoWriter) (*CancelEsClusterMonitoringAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelEsClusterMonitoringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancel-es-cluster-monitoring",
		Method:             "DELETE",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/monitoring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelEsClusterMonitoringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelEsClusterMonitoringAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancel-es-cluster-monitoring: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelEsClusterPendingPlan cancels pending plan

  DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of the Elasticsearch cluster.
*/
func (a *Client) CancelEsClusterPendingPlan(params *CancelEsClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*CancelEsClusterPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelEsClusterPendingPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancel-es-cluster-pending-plan",
		Method:             "DELETE",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelEsClusterPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelEsClusterPendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancel-es-cluster-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEsCluster creates cluster

  DEPRECATED (Scheduled to be removed in the next major version): Creates an Elasticsearch cluster.
*/
func (a *Client) CreateEsCluster(params *CreateEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEsClusterOK, *CreateEsClusterCreated, *CreateEsClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-es-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEsClusterOK:
		return value, nil, nil, nil
	case *CreateEsClusterCreated:
		return nil, value, nil, nil
	case *CreateEsClusterAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_elasticsearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEsCluster deletes cluster

  DEPRECATED (Scheduled to be removed in the next major version): Deletes the Elasticsearch cluster.
Before you delete the Elasticsearch cluster, you must first successfully issue a `_shutdown` command.
*/
func (a *Client) DeleteEsCluster(params *DeleteEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEsClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-es-cluster",
		Method:             "DELETE",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEsClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-es-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEsProxyRequests proxies HTTP d e l e t e request to the cluster

  DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
*/
func (a *Client) DeleteEsProxyRequests(params *DeleteEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEsProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEsProxyRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-es-proxy-requests",
		Method:             "DELETE",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEsProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEsProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-es-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateEsClusterDiagnostics generates diagnostics

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive.
*/
func (a *Client) GenerateEsClusterDiagnostics(params *GenerateEsClusterDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateEsClusterDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateEsClusterDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generate-es-cluster-diagnostics",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/support/_generate-diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateEsClusterDiagnosticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateEsClusterDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generate-es-cluster-diagnostics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateEsClusterLogs generates logs

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the log file for the Elasticsearch cluster.
*/
func (a *Client) GenerateEsClusterLogs(params *GenerateEsClusterLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateEsClusterLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateEsClusterLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generate-es-cluster-logs",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/support/_generate-logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateEsClusterLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateEsClusterLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generate-es-cluster-logs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsCcsEligibleRemotes searches clusters that can be used as cross cluster search remotes

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version.
*/
func (a *Client) GetEsCcsEligibleRemotes(params *GetEsCcsEligibleRemotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsCcsEligibleRemotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsCcsEligibleRemotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-ccs-eligible-remotes",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/ccs/eligible_remotes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsCcsEligibleRemotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsCcsEligibleRemotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-ccs-eligible-remotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsCluster gets cluster

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the Elasticsearch cluster information.
*/
func (a *Client) GetEsCluster(params *GetEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterCcs gets cross cluster search clusters

  DEPRECATED (Scheduled to be removed in the next major version): Returns the list of cross-cluster search clusters' IDs for the remote cluster.
*/
func (a *Client) GetEsClusterCcs(params *GetEsClusterCcsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterCcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterCcsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-ccs",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/ccs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterCcsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterCcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-ccs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterCcsSettings gets remote clusters for cross cluster search

  DEPRECATED (Scheduled to be removed in the next major version): Returns cross-cluster search configuration for the Elasticsearch cluster.
*/
func (a *Client) GetEsClusterCcsSettings(params *GetEsClusterCcsSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterCcsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterCcsSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-ccs-settings",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/ccs/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterCcsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterCcsSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-ccs-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterCurationSettings gets cluster curation settings

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster curation settings for an Elasticsearch cluster.
*/
func (a *Client) GetEsClusterCurationSettings(params *GetEsClusterCurationSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterCurationSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterCurationSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-curation-settings",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/curation/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterCurationSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterCurationSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-curation-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterKeystore gets settings from this cluster s keystore

  DEPRECATED (Scheduled to be removed in the next major version): Returns the available keys in the keystore.
*/
func (a *Client) GetEsClusterKeystore(params *GetEsClusterKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterKeystoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterKeystoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-keystore",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/keystore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterKeystoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterKeystoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-keystore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterMetadataRaw gets cluster metadata

  DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster.
*/
func (a *Client) GetEsClusterMetadataRaw(params *GetEsClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterMetadataRawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-metadata-raw",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterMetadataRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-metadata-raw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterMetadataSettings gets cluster metadata settings

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
*/
func (a *Client) GetEsClusterMetadataSettings(params *GetEsClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterMetadataSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-metadata-settings",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterMetadataSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-metadata-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterPendingPlan gets pending plan

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of the cluster.
*/
func (a *Client) GetEsClusterPendingPlan(params *GetEsClusterPendingPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterPendingPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-pending-plan",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterPendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterPlan gets plan

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
*/
func (a *Client) GetEsClusterPlan(params *GetEsClusterPlanParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-plan",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterPlanActivity gets plan activity

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active and historical plan information for the Elasticsearch cluster.
*/
func (a *Client) GetEsClusterPlanActivity(params *GetEsClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterPlanActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterPlanActivityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-plan-activity",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/plan/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterPlanActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterPlanActivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-plan-activity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusterSnapshotSettings gets cluster snapshot settings

  DEPRECATED (Scheduled to be removed in the next major version): Gets cluster snapshot settings.
*/
func (a *Client) GetEsClusterSnapshotSettings(params *GetEsClusterSnapshotSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClusterSnapshotSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClusterSnapshotSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-cluster-snapshot-settings",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/snapshot/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClusterSnapshotSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClusterSnapshotSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-cluster-snapshot-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsClusters gets clusters

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all Elasticsearch clusters.
*/
func (a *Client) GetEsClusters(params *GetEsClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-clusters",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEsProxyRequests proxies HTTP g e t request to the cluster

  DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
*/
func (a *Client) GetEsProxyRequests(params *GetEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEsProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEsProxyRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-es-proxy-requests",
		Method:             "GET",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEsProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEsProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-es-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MigrateEsClusterPlan migrates plan

  DEPRECATED (Scheduled to be removed in the next major version): Migrates the configuration of the Elasticsearch cluster to a different template.
*/
func (a *Client) MigrateEsClusterPlan(params *MigrateEsClusterPlanParams, authInfo runtime.ClientAuthInfoWriter) (*MigrateEsClusterPlanOK, *MigrateEsClusterPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigrateEsClusterPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "migrate-es-cluster-plan",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/plan/_migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MigrateEsClusterPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MigrateEsClusterPlanOK:
		return value, nil, nil
	case *MigrateEsClusterPlanAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_elasticsearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveEsClusterInstances moves instances

  DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances in the Elasticsearch cluster.
*/
func (a *Client) MoveEsClusterInstances(params *MoveEsClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*MoveEsClusterInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveEsClusterInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move-es-cluster-instances",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveEsClusterInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveEsClusterInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-es-cluster-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveEsClusterInstancesAdvanced moves instances advanced

  DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body.
*/
func (a *Client) MoveEsClusterInstancesAdvanced(params *MoveEsClusterInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter) (*MoveEsClusterInstancesAdvancedAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveEsClusterInstancesAdvancedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move-es-cluster-instances-advanced",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveEsClusterInstancesAdvancedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveEsClusterInstancesAdvancedAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-es-cluster-instances-advanced: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEsProxyRequests proxies HTTP p o s t request to the cluster

  DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
*/
func (a *Client) PostEsProxyRequests(params *PostEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*PostEsProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEsProxyRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-es-proxy-requests",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEsProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEsProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-es-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutEsProxyRequests proxies HTTP p u t request to the cluster

  DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
*/
func (a *Client) PutEsProxyRequests(params *PutEsProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter) (*PutEsProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEsProxyRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-es-proxy-requests",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEsProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEsProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-es-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartEsCluster restarts cluster

  DEPRECATED (Scheduled to be removed in the next major version): Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a `cluster_reboot` is applied. A `cluster_reboot` issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied.
*/
func (a *Client) RestartEsCluster(params *RestartEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*RestartEsClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restart-es-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/_restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartEsClusterAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restart-es-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncEsCluster resynchronizes cluster

  DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster.
*/
func (a *Client) ResyncEsCluster(params *ResyncEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncEsClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-es-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncEsClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-es-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncEsClusters resynchronizes clusters

  DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all Elasticsearch clusters.
*/
func (a *Client) ResyncEsClusters(params *ResyncEsClustersParams, authInfo runtime.ClientAuthInfoWriter) (*ResyncEsClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncEsClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resync-es-clusters",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncEsClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncEsClustersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-es-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchEsClusters searches clusters

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Elasticsearch clusters that match the specified query.
*/
func (a *Client) SearchEsClusters(params *SearchEsClustersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchEsClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchEsClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "search-es-clusters",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchEsClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchEsClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-es-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterCcsSettings sets remote clusters for cross cluster search

  DEPRECATED (Scheduled to be removed in the next major version): Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster.
*/
func (a *Client) SetEsClusterCcsSettings(params *SetEsClusterCcsSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterCcsSettingsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterCcsSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-ccs-settings",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/ccs/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterCcsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterCcsSettingsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-ccs-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterInstancesAllSettingsOverrides sets settings overrides all instances

  DEPRECATED (Scheduled to be removed in the next major version): Overrides the settings for all of the instances in the Elasticsearch cluster.
*/
func (a *Client) SetEsClusterInstancesAllSettingsOverrides(params *SetEsClusterInstancesAllSettingsOverridesParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterInstancesAllSettingsOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterInstancesAllSettingsOverridesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-instances-all-settings-overrides",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterInstancesAllSettingsOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterInstancesAllSettingsOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-instances-all-settings-overrides: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterInstancesSettingsOverrides sets settings overrides

  DEPRECATED (Scheduled to be removed in the next major version): Overrides the settings for the specified instances in the Elasticsearch cluster.
*/
func (a *Client) SetEsClusterInstancesSettingsOverrides(params *SetEsClusterInstancesSettingsOverridesParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterInstancesSettingsOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterInstancesSettingsOverridesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-instances-settings-overrides",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterInstancesSettingsOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterInstancesSettingsOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-instances-settings-overrides: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterKeystore adds or remove settings from the cluster keystore

  DEPRECATED (Scheduled to be removed in the next major version): Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
*/
func (a *Client) SetEsClusterKeystore(params *SetEsClusterKeystoreParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterKeystoreAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterKeystoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-keystore",
		Method:             "PATCH",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/keystore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterKeystoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterKeystoreAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-keystore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterLegacySecuritySettings sets legacy security settings

  DEPRECATED (Scheduled to be removed in the next major version): Sets the legacy Shield security settings for a 2.x Elasticsearch cluster.
*/
func (a *Client) SetEsClusterLegacySecuritySettings(params *SetEsClusterLegacySecuritySettingsParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterLegacySecuritySettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterLegacySecuritySettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-legacy-security-settings",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/settings/security/legacy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterLegacySecuritySettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterLegacySecuritySettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-legacy-security-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterMetadataRaw sets cluster metadata

  DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster.
Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
*/
func (a *Client) SetEsClusterMetadataRaw(params *SetEsClusterMetadataRawParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterMetadataRawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-metadata-raw",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterMetadataRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-metadata-raw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterMonitoring sets monitoring

  DEPRECATED (Scheduled to be removed in the next major version): Overwrites or creates the monitoring destination for the Elasticsearch cluster.
*/
func (a *Client) SetEsClusterMonitoring(params *SetEsClusterMonitoringParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterMonitoringAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterMonitoringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-monitoring",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/monitoring/{dest_cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterMonitoringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterMonitoringAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-monitoring: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEsClusterName sets cluster name

  DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the Elasticsearch cluster.
*/
func (a *Client) SetEsClusterName(params *SetEsClusterNameParams, authInfo runtime.ClientAuthInfoWriter) (*SetEsClusterNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEsClusterNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set-es-cluster-name",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/metadata/name/{new_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEsClusterNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEsClusterNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-es-cluster-name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownEsCluster shuts down cluster

  DEPRECATED (Scheduled to be removed in the next major version): Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down.
*/
func (a *Client) ShutdownEsCluster(params *ShutdownEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ShutdownEsClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shutdown-es-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/_shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownEsClusterAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown-es-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SnapshotEsCluster takes snapshot

  DEPRECATED (Scheduled to be removed in the next major version): To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository.
*/
func (a *Client) SnapshotEsCluster(params *SnapshotEsClusterParams, authInfo runtime.ClientAuthInfoWriter) (*SnapshotEsClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnapshotEsClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "snapshot-es-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/_snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnapshotEsClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SnapshotEsClusterAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for snapshot-es-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartEsClusterInstances starts instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts the instances in the Elasticsearch cluster.
*/
func (a *Client) StartEsClusterInstances(params *StartEsClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEsClusterInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-es-cluster-instances",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartEsClusterInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEsClusterInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-es-cluster-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartEsClusterInstancesAll starts all instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts all of the instances in the Elasticsearch cluster.
*/
func (a *Client) StartEsClusterInstancesAll(params *StartEsClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEsClusterInstancesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-es-cluster-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartEsClusterInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEsClusterInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-es-cluster-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartEsClusterInstancesAllMaintenanceMode starts maintenance mode all instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on all of the instances in the Elasticsearch cluster.
*/
func (a *Client) StartEsClusterInstancesAllMaintenanceMode(params *StartEsClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEsClusterInstancesAllMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-es-cluster-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartEsClusterInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEsClusterInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-es-cluster-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartEsClusterMaintenanceMode starts maintenance mode

  DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on the specified instances in the Elasticsearch cluster.
*/
func (a *Client) StartEsClusterMaintenanceMode(params *StartEsClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StartEsClusterMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEsClusterMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start-es-cluster-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartEsClusterMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEsClusterMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-es-cluster-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopEsClusterInstances stops instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops the instances in the Elasticsearch cluster.
*/
func (a *Client) StopEsClusterInstances(params *StopEsClusterInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEsClusterInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-es-cluster-instances",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopEsClusterInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEsClusterInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-es-cluster-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopEsClusterInstancesAll stops all instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops all of the instances in the Elasticsearch cluster..
*/
func (a *Client) StopEsClusterInstancesAll(params *StopEsClusterInstancesAllParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEsClusterInstancesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-es-cluster-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopEsClusterInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEsClusterInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-es-cluster-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopEsClusterInstancesAllMaintenanceMode stops maintenance mode all instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on all of the instances in the Elasticsearch cluster.
*/
func (a *Client) StopEsClusterInstancesAllMaintenanceMode(params *StopEsClusterInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEsClusterInstancesAllMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-es-cluster-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopEsClusterInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEsClusterInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-es-cluster-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopEsClusterMaintenanceMode stops maintenance mode

  DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on the specified instances in the Elasticsearch cluster.
*/
func (a *Client) StopEsClusterMaintenanceMode(params *StopEsClusterMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter) (*StopEsClusterMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEsClusterMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop-es-cluster-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopEsClusterMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEsClusterMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-es-cluster-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEsClusterCurationSettings updates cluster curation settings

  DEPRECATED (Scheduled to be removed in the next major version): Overrides cluster curation settings for an Elasticsearch cluster.
*/
func (a *Client) UpdateEsClusterCurationSettings(params *UpdateEsClusterCurationSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterCurationSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEsClusterCurationSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-es-cluster-curation-settings",
		Method:             "PUT",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/curation/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEsClusterCurationSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEsClusterCurationSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-es-cluster-curation-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEsClusterMetadataSettings updates cluster metadata settings

  DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateEsClusterMetadataSettings(params *UpdateEsClusterMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEsClusterMetadataSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-es-cluster-metadata-settings",
		Method:             "PATCH",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEsClusterMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEsClusterMetadataSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-es-cluster-metadata-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEsClusterPlan updates plan

  DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of the Elasticsearch cluster.
*/
func (a *Client) UpdateEsClusterPlan(params *UpdateEsClusterPlanParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterPlanOK, *UpdateEsClusterPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEsClusterPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-es-cluster-plan",
		Method:             "POST",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEsClusterPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEsClusterPlanOK:
		return value, nil, nil
	case *UpdateEsClusterPlanAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_elasticsearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEsClusterSnapshotSettings updates cluster snapshot settings

  DEPRECATED (Scheduled to be removed in the next major version): Any changes in the PATCHed object will be applied to the snapshot settings object.  PATCHing existing fields will cause same values to be re-applied. PATCHing a value of 'null' will cause the field to be reverted to its default value or removed if no default value exists.
*/
func (a *Client) UpdateEsClusterSnapshotSettings(params *UpdateEsClusterSnapshotSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEsClusterSnapshotSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEsClusterSnapshotSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-es-cluster-snapshot-settings",
		Method:             "PATCH",
		PathPattern:        "/clusters/elasticsearch/{cluster_id}/snapshot/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEsClusterSnapshotSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEsClusterSnapshotSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-es-cluster-snapshot-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
