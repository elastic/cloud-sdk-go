// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_elasticsearch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// CancelEsClusterMonitoringReader is a Reader for the CancelEsClusterMonitoring structure.
type CancelEsClusterMonitoringReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelEsClusterMonitoringReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewCancelEsClusterMonitoringAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCancelEsClusterMonitoringNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewCancelEsClusterMonitoringRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelEsClusterMonitoringAccepted creates a CancelEsClusterMonitoringAccepted with default headers values
func NewCancelEsClusterMonitoringAccepted() *CancelEsClusterMonitoringAccepted {
	return &CancelEsClusterMonitoringAccepted{}
}

/* CancelEsClusterMonitoringAccepted describes a response with status code 202, with default header values.

The destination monitoring cluster removal request was initiated
*/
type CancelEsClusterMonitoringAccepted struct {
	Payload models.EmptyResponse
}

func (o *CancelEsClusterMonitoringAccepted) Error() string {
	return fmt.Sprintf("[DELETE /clusters/elasticsearch/{cluster_id}/monitoring][%d] cancelEsClusterMonitoringAccepted  %+v", 202, o.Payload)
}
func (o *CancelEsClusterMonitoringAccepted) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *CancelEsClusterMonitoringAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelEsClusterMonitoringNotFound creates a CancelEsClusterMonitoringNotFound with default headers values
func NewCancelEsClusterMonitoringNotFound() *CancelEsClusterMonitoringNotFound {
	return &CancelEsClusterMonitoringNotFound{}
}

/* CancelEsClusterMonitoringNotFound describes a response with status code 404, with default header values.

The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found')
*/
type CancelEsClusterMonitoringNotFound struct {
	Payload *models.BasicFailedReply
}

func (o *CancelEsClusterMonitoringNotFound) Error() string {
	return fmt.Sprintf("[DELETE /clusters/elasticsearch/{cluster_id}/monitoring][%d] cancelEsClusterMonitoringNotFound  %+v", 404, o.Payload)
}
func (o *CancelEsClusterMonitoringNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CancelEsClusterMonitoringNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelEsClusterMonitoringRetryWith creates a CancelEsClusterMonitoringRetryWith with default headers values
func NewCancelEsClusterMonitoringRetryWith() *CancelEsClusterMonitoringRetryWith {
	return &CancelEsClusterMonitoringRetryWith{}
}

/* CancelEsClusterMonitoringRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type CancelEsClusterMonitoringRetryWith struct {
	Payload *models.BasicFailedReply
}

func (o *CancelEsClusterMonitoringRetryWith) Error() string {
	return fmt.Sprintf("[DELETE /clusters/elasticsearch/{cluster_id}/monitoring][%d] cancelEsClusterMonitoringRetryWith  %+v", 449, o.Payload)
}
func (o *CancelEsClusterMonitoringRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *CancelEsClusterMonitoringRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
