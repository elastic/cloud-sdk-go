// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_elasticsearch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// NewSetEsClusterInstancesSettingsOverridesParams creates a new SetEsClusterInstancesSettingsOverridesParams object
// with the default values initialized.
func NewSetEsClusterInstancesSettingsOverridesParams() *SetEsClusterInstancesSettingsOverridesParams {
	var (
		ignoreMissingDefault      = bool(false)
		restartAfterUpdateDefault = bool(false)
	)
	return &SetEsClusterInstancesSettingsOverridesParams{
		IgnoreMissing:      &ignoreMissingDefault,
		RestartAfterUpdate: &restartAfterUpdateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSetEsClusterInstancesSettingsOverridesParamsWithTimeout creates a new SetEsClusterInstancesSettingsOverridesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetEsClusterInstancesSettingsOverridesParamsWithTimeout(timeout time.Duration) *SetEsClusterInstancesSettingsOverridesParams {
	var (
		ignoreMissingDefault      = bool(false)
		restartAfterUpdateDefault = bool(false)
	)
	return &SetEsClusterInstancesSettingsOverridesParams{
		IgnoreMissing:      &ignoreMissingDefault,
		RestartAfterUpdate: &restartAfterUpdateDefault,

		timeout: timeout,
	}
}

// NewSetEsClusterInstancesSettingsOverridesParamsWithContext creates a new SetEsClusterInstancesSettingsOverridesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetEsClusterInstancesSettingsOverridesParamsWithContext(ctx context.Context) *SetEsClusterInstancesSettingsOverridesParams {
	var (
		ignoreMissingDefault      = bool(false)
		restartAfterUpdateDefault = bool(false)
	)
	return &SetEsClusterInstancesSettingsOverridesParams{
		IgnoreMissing:      &ignoreMissingDefault,
		RestartAfterUpdate: &restartAfterUpdateDefault,

		Context: ctx,
	}
}

// NewSetEsClusterInstancesSettingsOverridesParamsWithHTTPClient creates a new SetEsClusterInstancesSettingsOverridesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetEsClusterInstancesSettingsOverridesParamsWithHTTPClient(client *http.Client) *SetEsClusterInstancesSettingsOverridesParams {
	var (
		ignoreMissingDefault      = bool(false)
		restartAfterUpdateDefault = bool(false)
	)
	return &SetEsClusterInstancesSettingsOverridesParams{
		IgnoreMissing:      &ignoreMissingDefault,
		RestartAfterUpdate: &restartAfterUpdateDefault,
		HTTPClient:         client,
	}
}

/*SetEsClusterInstancesSettingsOverridesParams contains all the parameters to send to the API endpoint
for the set es cluster instances settings overrides operation typically these are written to a http.Request
*/
type SetEsClusterInstancesSettingsOverridesParams struct {

	/*Body
	  The settings to override for the specified instances.

	*/
	Body *models.ElasticsearchClusterInstanceSettingsOverrides
	/*ClusterID
	  The Elasticsearch cluster identifier.

	*/
	ClusterID string
	/*IgnoreMissing
	  When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.

	*/
	IgnoreMissing *bool
	/*InstanceIds
	  A comma-separated list of instance identifiers.

	*/
	InstanceIds []string
	/*RestartAfterUpdate
	  After overrides are applied, restarts the instances.

	*/
	RestartAfterUpdate *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithTimeout(timeout time.Duration) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithContext(ctx context.Context) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithHTTPClient(client *http.Client) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithBody(body *models.ElasticsearchClusterInstanceSettingsOverrides) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetBody(body *models.ElasticsearchClusterInstanceSettingsOverrides) {
	o.Body = body
}

// WithClusterID adds the clusterID to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithClusterID(clusterID string) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithIgnoreMissing adds the ignoreMissing to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithIgnoreMissing(ignoreMissing *bool) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetIgnoreMissing(ignoreMissing)
	return o
}

// SetIgnoreMissing adds the ignoreMissing to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetIgnoreMissing(ignoreMissing *bool) {
	o.IgnoreMissing = ignoreMissing
}

// WithInstanceIds adds the instanceIds to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithInstanceIds(instanceIds []string) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetInstanceIds(instanceIds)
	return o
}

// SetInstanceIds adds the instanceIds to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetInstanceIds(instanceIds []string) {
	o.InstanceIds = instanceIds
}

// WithRestartAfterUpdate adds the restartAfterUpdate to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) WithRestartAfterUpdate(restartAfterUpdate *bool) *SetEsClusterInstancesSettingsOverridesParams {
	o.SetRestartAfterUpdate(restartAfterUpdate)
	return o
}

// SetRestartAfterUpdate adds the restartAfterUpdate to the set es cluster instances settings overrides params
func (o *SetEsClusterInstancesSettingsOverridesParams) SetRestartAfterUpdate(restartAfterUpdate *bool) {
	o.RestartAfterUpdate = restartAfterUpdate
}

// WriteToRequest writes these params to a swagger request
func (o *SetEsClusterInstancesSettingsOverridesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	if o.IgnoreMissing != nil {

		// query param ignore_missing
		var qrIgnoreMissing bool
		if o.IgnoreMissing != nil {
			qrIgnoreMissing = *o.IgnoreMissing
		}
		qIgnoreMissing := swag.FormatBool(qrIgnoreMissing)
		if qIgnoreMissing != "" {
			if err := r.SetQueryParam("ignore_missing", qIgnoreMissing); err != nil {
				return err
			}
		}

	}

	valuesInstanceIds := o.InstanceIds

	joinedInstanceIds := swag.JoinByFormat(valuesInstanceIds, "csv")
	// path array param instance_ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedInstanceIds) > 0 {
		if err := r.SetPathParam("instance_ids", joinedInstanceIds[0]); err != nil {
			return err
		}
	}

	if o.RestartAfterUpdate != nil {

		// query param restart_after_update
		var qrRestartAfterUpdate bool
		if o.RestartAfterUpdate != nil {
			qrRestartAfterUpdate = *o.RestartAfterUpdate
		}
		qRestartAfterUpdate := swag.FormatBool(qrRestartAfterUpdate)
		if qRestartAfterUpdate != "" {
			if err := r.SetQueryParam("restart_after_update", qRestartAfterUpdate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
