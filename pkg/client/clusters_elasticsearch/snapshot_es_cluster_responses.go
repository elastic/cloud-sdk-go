// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_elasticsearch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// SnapshotEsClusterReader is a Reader for the SnapshotEsCluster structure.
type SnapshotEsClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SnapshotEsClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSnapshotEsClusterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSnapshotEsClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSnapshotEsClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewSnapshotEsClusterConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewSnapshotEsClusterRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSnapshotEsClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSnapshotEsClusterAccepted creates a SnapshotEsClusterAccepted with default headers values
func NewSnapshotEsClusterAccepted() *SnapshotEsClusterAccepted {
	return &SnapshotEsClusterAccepted{}
}

/* SnapshotEsClusterAccepted describes a response with status code 202, with default header values.

The create command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress
*/
type SnapshotEsClusterAccepted struct {
	Payload *models.ClusterSnapshotResponse
}

func (o *SnapshotEsClusterAccepted) Error() string {
	return fmt.Sprintf("[POST /clusters/elasticsearch/{cluster_id}/_snapshot][%d] snapshotEsClusterAccepted  %+v", 202, o.Payload)
}
func (o *SnapshotEsClusterAccepted) GetPayload() *models.ClusterSnapshotResponse {
	return o.Payload
}

func (o *SnapshotEsClusterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClusterSnapshotResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnapshotEsClusterUnauthorized creates a SnapshotEsClusterUnauthorized with default headers values
func NewSnapshotEsClusterUnauthorized() *SnapshotEsClusterUnauthorized {
	return &SnapshotEsClusterUnauthorized{}
}

/* SnapshotEsClusterUnauthorized describes a response with status code 401, with default header values.

The supplied credentials for the snapshot repository are invalid. (code: `clusters.snapshot.invalid_credentials`)
*/
type SnapshotEsClusterUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SnapshotEsClusterUnauthorized) Error() string {
	return fmt.Sprintf("[POST /clusters/elasticsearch/{cluster_id}/_snapshot][%d] snapshotEsClusterUnauthorized  %+v", 401, o.Payload)
}
func (o *SnapshotEsClusterUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SnapshotEsClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnapshotEsClusterNotFound creates a SnapshotEsClusterNotFound with default headers values
func NewSnapshotEsClusterNotFound() *SnapshotEsClusterNotFound {
	return &SnapshotEsClusterNotFound{}
}

/* SnapshotEsClusterNotFound describes a response with status code 404, with default header values.

 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
* The snapshot repository was not found. (code: `clusters.snapshot.repository_not_found`)
*/
type SnapshotEsClusterNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SnapshotEsClusterNotFound) Error() string {
	return fmt.Sprintf("[POST /clusters/elasticsearch/{cluster_id}/_snapshot][%d] snapshotEsClusterNotFound  %+v", 404, o.Payload)
}
func (o *SnapshotEsClusterNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SnapshotEsClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnapshotEsClusterConflict creates a SnapshotEsClusterConflict with default headers values
func NewSnapshotEsClusterConflict() *SnapshotEsClusterConflict {
	return &SnapshotEsClusterConflict{}
}

/* SnapshotEsClusterConflict describes a response with status code 409, with default header values.

The cluster name specified is already in use. (code: `clusters.snapshot.name_conflict`)
*/
type SnapshotEsClusterConflict struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SnapshotEsClusterConflict) Error() string {
	return fmt.Sprintf("[POST /clusters/elasticsearch/{cluster_id}/_snapshot][%d] snapshotEsClusterConflict  %+v", 409, o.Payload)
}
func (o *SnapshotEsClusterConflict) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SnapshotEsClusterConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnapshotEsClusterRetryWith creates a SnapshotEsClusterRetryWith with default headers values
func NewSnapshotEsClusterRetryWith() *SnapshotEsClusterRetryWith {
	return &SnapshotEsClusterRetryWith{}
}

/* SnapshotEsClusterRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type SnapshotEsClusterRetryWith struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SnapshotEsClusterRetryWith) Error() string {
	return fmt.Sprintf("[POST /clusters/elasticsearch/{cluster_id}/_snapshot][%d] snapshotEsClusterRetryWith  %+v", 449, o.Payload)
}
func (o *SnapshotEsClusterRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SnapshotEsClusterRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnapshotEsClusterInternalServerError creates a SnapshotEsClusterInternalServerError with default headers values
func NewSnapshotEsClusterInternalServerError() *SnapshotEsClusterInternalServerError {
	return &SnapshotEsClusterInternalServerError{}
}

/* SnapshotEsClusterInternalServerError describes a response with status code 500, with default header values.

 * The snapshot request failed. (code: `clusters.snapshot.failed`)
* The snapshot request failed. (code: `clusters.snapshot.repository_not_found`)
*/
type SnapshotEsClusterInternalServerError struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SnapshotEsClusterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /clusters/elasticsearch/{cluster_id}/_snapshot][%d] snapshotEsClusterInternalServerError  %+v", 500, o.Payload)
}
func (o *SnapshotEsClusterInternalServerError) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SnapshotEsClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
