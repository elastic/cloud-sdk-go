// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpdateAllocatorSettingsParams creates a new UpdateAllocatorSettingsParams object
// with the default values initialized.
func NewUpdateAllocatorSettingsParams() *UpdateAllocatorSettingsParams {
	var ()
	return &UpdateAllocatorSettingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAllocatorSettingsParamsWithTimeout creates a new UpdateAllocatorSettingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAllocatorSettingsParamsWithTimeout(timeout time.Duration) *UpdateAllocatorSettingsParams {
	var ()
	return &UpdateAllocatorSettingsParams{

		timeout: timeout,
	}
}

// NewUpdateAllocatorSettingsParamsWithContext creates a new UpdateAllocatorSettingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAllocatorSettingsParamsWithContext(ctx context.Context) *UpdateAllocatorSettingsParams {
	var ()
	return &UpdateAllocatorSettingsParams{

		Context: ctx,
	}
}

// NewUpdateAllocatorSettingsParamsWithHTTPClient creates a new UpdateAllocatorSettingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAllocatorSettingsParamsWithHTTPClient(client *http.Client) *UpdateAllocatorSettingsParams {
	var ()
	return &UpdateAllocatorSettingsParams{
		HTTPClient: client,
	}
}

/*UpdateAllocatorSettingsParams contains all the parameters to send to the API endpoint
for the update allocator settings operation typically these are written to a http.Request
*/
type UpdateAllocatorSettingsParams struct {

	/*AllocatorID
	  The allocator identifier.

	*/
	AllocatorID string
	/*Body
	  The allocator settings to update

	*/
	Body string
	/*Version
	  Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.

	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) WithTimeout(timeout time.Duration) *UpdateAllocatorSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) WithContext(ctx context.Context) *UpdateAllocatorSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) WithHTTPClient(client *http.Client) *UpdateAllocatorSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllocatorID adds the allocatorID to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) WithAllocatorID(allocatorID string) *UpdateAllocatorSettingsParams {
	o.SetAllocatorID(allocatorID)
	return o
}

// SetAllocatorID adds the allocatorId to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) SetAllocatorID(allocatorID string) {
	o.AllocatorID = allocatorID
}

// WithBody adds the body to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) WithBody(body string) *UpdateAllocatorSettingsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) SetBody(body string) {
	o.Body = body
}

// WithVersion adds the version to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) WithVersion(version *int64) *UpdateAllocatorSettingsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the update allocator settings params
func (o *UpdateAllocatorSettingsParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAllocatorSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param allocator_id
	if err := r.SetPathParam("allocator_id", o.AllocatorID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
