// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new platform infrastructure API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for platform infrastructure API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddBlueprinterBlessing(params *AddBlueprinterBlessingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBlueprinterBlessingOK, error)

	CreateBlueprinterRole(params *CreateBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBlueprinterRoleCreated, error)

	CreateConfigStoreOption(params *CreateConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateConfigStoreOptionCreated, error)

	CreateProxiesFilteredGroup(params *CreateProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProxiesFilteredGroupOK, error)

	DeleteAdminconsoleLoggingSettings(params *DeleteAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdminconsoleLoggingSettingsOK, error)

	DeleteAllocator(params *DeleteAllocatorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocatorOK, error)

	DeleteAllocatorLoggingSettings(params *DeleteAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocatorLoggingSettingsOK, error)

	DeleteAllocatorMetadataItem(params *DeleteAllocatorMetadataItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocatorMetadataItemOK, error)

	DeleteBlueprinterRole(params *DeleteBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBlueprinterRoleOK, error)

	DeleteConfigStoreOption(params *DeleteConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteConfigStoreOptionOK, error)

	DeleteConstructorLoggingSettings(params *DeleteConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteConstructorLoggingSettingsOK, error)

	DeleteLicense(params *DeleteLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLicenseOK, error)

	DeleteProxiesFilteredGroup(params *DeleteProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProxiesFilteredGroupOK, error)

	DeleteRunner(params *DeleteRunnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunnerOK, error)

	DeleteRunnerLoggingSettings(params *DeleteRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunnerLoggingSettingsOK, error)

	GetAdminconsoleLoggingSettings(params *GetAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminconsoleLoggingSettingsOK, error)

	GetAdminconsoles(params *GetAdminconsolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminconsolesOK, error)

	GetAllocator(params *GetAllocatorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorOK, error)

	GetAllocatorLoggingSettings(params *GetAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorLoggingSettingsOK, error)

	GetAllocatorMetadata(params *GetAllocatorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorMetadataOK, error)

	GetAllocatorSettings(params *GetAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorSettingsOK, error)

	GetAllocators(params *GetAllocatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorsOK, error)

	GetAPIBaseURL(params *GetAPIBaseURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIBaseURLOK, error)

	GetBlueprinterRole(params *GetBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBlueprinterRoleOK, error)

	GetConfigStoreOption(params *GetConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigStoreOptionOK, error)

	GetConstructor(params *GetConstructorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConstructorOK, error)

	GetConstructorLoggingSettings(params *GetConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConstructorLoggingSettingsOK, error)

	GetConstructors(params *GetConstructorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConstructorsOK, error)

	GetLicense(params *GetLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLicenseOK, error)

	GetProxies(params *GetProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesOK, error)

	GetProxiesFilteredGroup(params *GetProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesFilteredGroupOK, error)

	GetProxiesFilteredGroupHealth(params *GetProxiesFilteredGroupHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesFilteredGroupHealthOK, error)

	GetProxiesHealth(params *GetProxiesHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesHealthOK, error)

	GetProxiesSettings(params *GetProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesSettingsOK, error)

	GetProxy(params *GetProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxyOK, error)

	GetRunner(params *GetRunnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunnerOK, error)

	GetRunnerLoggingSettings(params *GetRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunnerLoggingSettingsOK, error)

	GetRunners(params *GetRunnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunnersOK, error)

	ListBlueprinterRoles(params *ListBlueprinterRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBlueprinterRolesOK, error)

	ListConfigStoreOption(params *ListConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigStoreOptionOK, error)

	MoveClusters(params *MoveClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveClustersAccepted, error)

	MoveClustersByType(params *MoveClustersByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveClustersByTypeAccepted, error)

	PutConfigStoreOption(params *PutConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutConfigStoreOptionOK, error)

	ResyncAllocator(params *ResyncAllocatorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncAllocatorOK, error)

	ResyncAllocators(params *ResyncAllocatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncAllocatorsAccepted, error)

	ResyncConstructor(params *ResyncConstructorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncConstructorOK, error)

	ResyncConstructors(params *ResyncConstructorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncConstructorsAccepted, error)

	ResyncRunner(params *ResyncRunnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncRunnerOK, error)

	ResyncRunners(params *ResyncRunnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncRunnersAccepted, error)

	SearchAllocators(params *SearchAllocatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAllocatorsOK, error)

	SearchRunners(params *SearchRunnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRunnersOK, error)

	SetAdminconsoleLoggingSettings(params *SetAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAdminconsoleLoggingSettingsOK, error)

	SetAllocatorLoggingSettings(params *SetAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorLoggingSettingsOK, error)

	SetAllocatorMetadata(params *SetAllocatorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorMetadataOK, error)

	SetAllocatorMetadataItem(params *SetAllocatorMetadataItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorMetadataItemOK, error)

	SetAllocatorSettings(params *SetAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorSettingsOK, error)

	SetAPIBaseURL(params *SetAPIBaseURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAPIBaseURLOK, error)

	SetBlueprinterBlessings(params *SetBlueprinterBlessingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetBlueprinterBlessingsOK, error)

	SetConstructorLoggingSettings(params *SetConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetConstructorLoggingSettingsOK, error)

	SetLicense(params *SetLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetLicenseOK, error)

	SetProxiesSettings(params *SetProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetProxiesSettingsOK, error)

	SetRunnerLoggingSettings(params *SetRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRunnerLoggingSettingsOK, error)

	SetRunnerRoles(params *SetRunnerRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRunnerRolesOK, error)

	StartAllocatorMaintenanceMode(params *StartAllocatorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartAllocatorMaintenanceModeAccepted, error)

	StartConstructorMaintenanceMode(params *StartConstructorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartConstructorMaintenanceModeAccepted, error)

	StopAllocatorMaintenanceMode(params *StopAllocatorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopAllocatorMaintenanceModeAccepted, error)

	StopConstructorMaintenanceMode(params *StopConstructorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopConstructorMaintenanceModeAccepted, error)

	UpdateAdminconsoleLoggingSettings(params *UpdateAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdminconsoleLoggingSettingsOK, error)

	UpdateAllocatorLoggingSettings(params *UpdateAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocatorLoggingSettingsOK, error)

	UpdateAllocatorSettings(params *UpdateAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocatorSettingsOK, error)

	UpdateBlueprinterRole(params *UpdateBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBlueprinterRoleOK, error)

	UpdateConstructorLoggingSettings(params *UpdateConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConstructorLoggingSettingsOK, error)

	UpdateProxiesFilteredGroup(params *UpdateProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProxiesFilteredGroupOK, error)

	UpdateProxiesSettings(params *UpdateProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProxiesSettingsOK, error)

	UpdateRunnerLoggingSettings(params *UpdateRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunnerLoggingSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddBlueprinterBlessing adds blessing

  Add a Blessing for a runner to a role.
*/
func (a *Client) AddBlueprinterBlessing(params *AddBlueprinterBlessingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBlueprinterBlessingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBlueprinterBlessingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "add-blueprinter-blessing",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings/{runner_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBlueprinterBlessingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBlueprinterBlessingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add-blueprinter-blessing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBlueprinterRole creates a role

  Create a Blueprinter role.
*/
func (a *Client) CreateBlueprinterRole(params *CreateBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBlueprinterRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprinterRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-blueprinter-role",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/blueprinter/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBlueprinterRoleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-blueprinter-role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateConfigStoreOption creates config store option

  Inserts new Config Store Option.
*/
func (a *Client) CreateConfigStoreOption(params *CreateConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateConfigStoreOptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConfigStoreOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-config-store-option",
		Method:             "POST",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConfigStoreOptionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-config-store-option: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProxiesFilteredGroup creates filtered group of proxies

  Create the settings for a filtered group of proxies.
*/
func (a *Client) CreateProxiesFilteredGroup(params *CreateProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxiesFilteredGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-proxies-filtered-group",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxiesFilteredGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-proxies-filtered-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAdminconsoleLoggingSettings deletes adminconsole logging settings

  Reset the default logging settings for this adminconsole instance.
*/
func (a *Client) DeleteAdminconsoleLoggingSettings(params *DeleteAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAdminconsoleLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdminconsoleLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-adminconsole-logging-settings",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdminconsoleLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAdminconsoleLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-adminconsole-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllocator deletes allocator

  Deletes the allocator.
*/
func (a *Client) DeleteAllocator(params *DeleteAllocatorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocatorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-allocator",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllocatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-allocator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllocatorLoggingSettings deletes allocator logging settings

  Reset the default logging settings for this allocator instance.
*/
func (a *Client) DeleteAllocatorLoggingSettings(params *DeleteAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocatorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocatorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-allocator-logging-settings",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocatorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllocatorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-allocator-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllocatorMetadataItem deletes allocator metadata item

  Removes a single item from the allocator metadata.
*/
func (a *Client) DeleteAllocatorMetadataItem(params *DeleteAllocatorMetadataItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocatorMetadataItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocatorMetadataItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-allocator-metadata-item",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocatorMetadataItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllocatorMetadataItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-allocator-metadata-item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBlueprinterRole deletes role

  Delete a role.
*/
func (a *Client) DeleteBlueprinterRole(params *DeleteBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBlueprinterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlueprinterRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-blueprinter-role",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBlueprinterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-blueprinter-role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConfigStoreOption deletes config store option by name

  Delete Config Store Option by name.
*/
func (a *Client) DeleteConfigStoreOption(params *DeleteConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConfigStoreOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-config-store-option",
		Method:             "DELETE",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConfigStoreOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-config-store-option: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConstructorLoggingSettings deletes constructor logging settings

  Reset the default logging settings for this constructor instance.
*/
func (a *Client) DeleteConstructorLoggingSettings(params *DeleteConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteConstructorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConstructorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-constructor-logging-settings",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteConstructorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConstructorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-constructor-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLicense deletes license

  Deletes the license.
*/
func (a *Client) DeleteLicense(params *DeleteLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-license",
		Method:             "DELETE",
		PathPattern:        "/platform/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-license: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProxiesFilteredGroup deletes filtered group of proxies

  Deletes a filtered group of proxies by ID.
*/
func (a *Client) DeleteProxiesFilteredGroup(params *DeleteProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxiesFilteredGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-proxies-filtered-group",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxiesFilteredGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-proxies-filtered-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRunner deletes runner

  Delete a runner by id.
*/
func (a *Client) DeleteRunner(params *DeleteRunnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-runner",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRunnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-runner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRunnerLoggingSettings deletes runner logging settings

  Reset the default logging settings for this runner instance.
*/
func (a *Client) DeleteRunnerLoggingSettings(params *DeleteRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRunnerLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRunnerLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-runner-logging-settings",
		Method:             "DELETE",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRunnerLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRunnerLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-runner-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAdminconsoleLoggingSettings gets adminconsole logging settings

  Get the logging settings for this adminconsole instance.
*/
func (a *Client) GetAdminconsoleLoggingSettings(params *GetAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminconsoleLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminconsoleLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-adminconsole-logging-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminconsoleLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdminconsoleLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-adminconsole-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAdminconsoles gets adminconsoles

  Retrieves an overview of all adminconsoles.
*/
func (a *Client) GetAdminconsoles(params *GetAdminconsolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminconsolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminconsolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-adminconsoles",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/adminconsoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminconsolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdminconsolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-adminconsoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllocator gets allocator

  Retrieves the allocator by the ID.
*/
func (a *Client) GetAllocator(params *GetAllocatorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-allocator",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-allocator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllocatorLoggingSettings gets allocator logging settings

  Get the logging settings for this allocator instance.
*/
func (a *Client) GetAllocatorLoggingSettings(params *GetAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-allocator-logging-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocatorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-allocator-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllocatorMetadata gets allocator metadata

  Retrieves the allocator metadata.
*/
func (a *Client) GetAllocatorMetadata(params *GetAllocatorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-allocator-metadata",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocatorMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-allocator-metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllocatorSettings gets allocator settings

  Retrieves the allocator override settings.
*/
func (a *Client) GetAllocatorSettings(params *GetAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-allocator-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocatorSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-allocator-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllocators gets allocators

  Retrieves the information for all of the allocators in the platform.
*/
func (a *Client) GetAllocators(params *GetAllocatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-allocators",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/allocators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-allocators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIBaseURL gets API base Url

  Gets the API base Url configuration value.
*/
func (a *Client) GetAPIBaseURL(params *GetAPIBaseURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIBaseURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIBaseURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-api-base-url",
		Method:             "GET",
		PathPattern:        "/platform/configuration/api_base_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIBaseURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIBaseURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-api-base-url: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBlueprinterRole gets role

  Retrieve a role.
*/
func (a *Client) GetBlueprinterRole(params *GetBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBlueprinterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprinterRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-blueprinter-role",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlueprinterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-blueprinter-role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigStoreOption finds config store option by name

  Find Config Store Option by name.
*/
func (a *Client) GetConfigStoreOption(params *GetConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigStoreOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-config-store-option",
		Method:             "GET",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigStoreOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-config-store-option: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConstructor gets constructor

  Retrieves a constructor by id.
*/
func (a *Client) GetConstructor(params *GetConstructorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConstructorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConstructorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-constructor",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConstructorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConstructorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-constructor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConstructorLoggingSettings gets constructor logging settings

  Get the logging settings for this constructor instance.
*/
func (a *Client) GetConstructorLoggingSettings(params *GetConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConstructorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConstructorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-constructor-logging-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConstructorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConstructorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-constructor-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConstructors gets constructors

  Retrieves an overview of all constructors in an ECE installation.
*/
func (a *Client) GetConstructors(params *GetConstructorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConstructorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConstructorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-constructors",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/constructors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConstructorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConstructorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-constructors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicense gets license

  Retrieves the license.
*/
func (a *Client) GetLicense(params *GetLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-license",
		Method:             "GET",
		PathPattern:        "/platform/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-license: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxies gets proxies

  Retrieves an overview of all proxies.
*/
func (a *Client) GetProxies(params *GetProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-proxies",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-proxies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxiesFilteredGroup gets filtered group of proxies

  Get data for a filtered group of proxies.
*/
func (a *Client) GetProxiesFilteredGroup(params *GetProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesFilteredGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-proxies-filtered-group",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxiesFilteredGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-proxies-filtered-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxiesFilteredGroupHealth gets health for a filtered group of proxies

  Get the health status of a filtered group of proxies.
*/
func (a *Client) GetProxiesFilteredGroupHealth(params *GetProxiesFilteredGroupHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesFilteredGroupHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesFilteredGroupHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-proxies-filtered-group-health",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesFilteredGroupHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxiesFilteredGroupHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-proxies-filtered-group-health: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxiesHealth gets proxy health

  Get the health status of all proxies.
*/
func (a *Client) GetProxiesHealth(params *GetProxiesHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-proxies-health",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxiesHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-proxies-health: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxiesSettings gets proxies settings

  Retrieves the settings for all proxies.
*/
func (a *Client) GetProxiesSettings(params *GetProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxiesSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxiesSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-proxies-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxiesSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxiesSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-proxies-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxy gets proxy

  Retrieves a single proxy by ID.
*/
func (a *Client) GetProxy(params *GetProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-proxy",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/proxies/{proxy_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-proxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunner gets runner

  Retrieves a runner by id.
*/
func (a *Client) GetRunner(params *GetRunnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-runner",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-runner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunnerLoggingSettings gets runner logging settings

  Get the logging settings for this runner instance.
*/
func (a *Client) GetRunnerLoggingSettings(params *GetRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunnerLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunnerLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-runner-logging-settings",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunnerLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunnerLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-runner-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunners gets runners

  Retrieves an overview of all runners.
*/
func (a *Client) GetRunners(params *GetRunnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunnersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-runners",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/runners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunnersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-runners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBlueprinterRoles lists roles

  Retrieve all persisted roles.
*/
func (a *Client) ListBlueprinterRoles(params *ListBlueprinterRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBlueprinterRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlueprinterRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-blueprinter-roles",
		Method:             "GET",
		PathPattern:        "/platform/infrastructure/blueprinter/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBlueprinterRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBlueprinterRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-blueprinter-roles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListConfigStoreOption lists config store option

  List all existing Config Store Option.
*/
func (a *Client) ListConfigStoreOption(params *ListConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigStoreOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list-config-store-option",
		Method:             "GET",
		PathPattern:        "/platform/configuration/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConfigStoreOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list-config-store-option: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveClusters moves clusters

  Moves the clusters to a different allocator.
*/
func (a *Client) MoveClusters(params *MoveClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move-clusters",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/clusters/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveClustersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveClustersByType moves clusters by type

  Moves the clusters, by type, to a different allocator.
*/
func (a *Client) MoveClustersByType(params *MoveClustersByTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveClustersByTypeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveClustersByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move-clusters-by-type",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/clusters/{cluster_type}/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveClustersByTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveClustersByTypeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-clusters-by-type: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutConfigStoreOption updates config store option

  Update existing Config Store Option.
*/
func (a *Client) PutConfigStoreOption(params *PutConfigStoreOptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutConfigStoreOptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConfigStoreOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put-config-store-option",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/store/{config_option_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutConfigStoreOptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutConfigStoreOptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-config-store-option: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncAllocator resynchronizes allocator

  Immediately synchronizes the allocator information in the back-end search index and caches.
*/
func (a *Client) ResyncAllocator(params *ResyncAllocatorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncAllocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncAllocatorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-allocator",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncAllocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncAllocatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-allocator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncAllocators resynchronizes allocators

  Asynchronously synchronizes all allocator information in the back-end search index.
*/
func (a *Client) ResyncAllocators(params *ResyncAllocatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncAllocatorsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncAllocatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-allocators",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncAllocatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncAllocatorsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-allocators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncConstructor resynchronizes constructor

  Immediately resynchronizes the search index and cache for the selected constructor.
*/
func (a *Client) ResyncConstructor(params *ResyncConstructorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncConstructorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncConstructorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-constructor",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncConstructorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncConstructorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-constructor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncConstructors resynchronizes constructors

  Asynchronously synchronizes all constructor information in the back-end search index.
*/
func (a *Client) ResyncConstructors(params *ResyncConstructorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncConstructorsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncConstructorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-constructors",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncConstructorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncConstructorsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-constructors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncRunner resynchronizes runner

  Immediately resynchronizes the search index and cache for the selected runner.
*/
func (a *Client) ResyncRunner(params *ResyncRunnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncRunnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncRunnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-runner",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncRunnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncRunnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-runner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncRunners resynchronizes runners

  Asynchronously synchronizes all runner information in the search index.
*/
func (a *Client) ResyncRunners(params *ResyncRunnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncRunnersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncRunnersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-runners",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/runners/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncRunnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncRunnersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-runners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAllocators searches allocators

  Retrieves the information for all of the allocators in the platform that match the specified query.
*/
func (a *Client) SearchAllocators(params *SearchAllocatorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAllocatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAllocatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search-allocators",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAllocatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAllocatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-allocators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchRunners searches runners

  Retrieves runners that match a given query.
*/
func (a *Client) SearchRunners(params *SearchRunnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRunnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRunnersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search-runners",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/runners/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchRunnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRunnersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-runners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAdminconsoleLoggingSettings sets adminconsole logging settings

  Set the logging settings for this adminconsole instance.
*/
func (a *Client) SetAdminconsoleLoggingSettings(params *SetAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAdminconsoleLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAdminconsoleLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-adminconsole-logging-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAdminconsoleLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAdminconsoleLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-adminconsole-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAllocatorLoggingSettings sets allocator logging settings

  Set the logging settings for this allocator instance.
*/
func (a *Client) SetAllocatorLoggingSettings(params *SetAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-allocator-logging-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAllocatorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-allocator-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAllocatorMetadata sets allocator metadata

  Sets the allocator metadata.
*/
func (a *Client) SetAllocatorMetadata(params *SetAllocatorMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-allocator-metadata",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAllocatorMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-allocator-metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAllocatorMetadataItem sets allocator metadata item

  Adds or updates a single item in the allocator metadata.
*/
func (a *Client) SetAllocatorMetadataItem(params *SetAllocatorMetadataItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorMetadataItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorMetadataItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-allocator-metadata-item",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/metadata/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorMetadataItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAllocatorMetadataItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-allocator-metadata-item: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAllocatorSettings sets allocator settings

  Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
*/
func (a *Client) SetAllocatorSettings(params *SetAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAllocatorSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllocatorSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-allocator-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllocatorSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAllocatorSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-allocator-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAPIBaseURL sets API base Url

  Saves the API base Url configuration value.
*/
func (a *Client) SetAPIBaseURL(params *SetAPIBaseURLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAPIBaseURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAPIBaseURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-api-base-url",
		Method:             "PUT",
		PathPattern:        "/platform/configuration/api_base_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAPIBaseURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAPIBaseURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-api-base-url: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBlueprinterBlessings sets blessings

  Set blessings for a role.
*/
func (a *Client) SetBlueprinterBlessings(params *SetBlueprinterBlessingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetBlueprinterBlessingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBlueprinterBlessingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-blueprinter-blessings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBlueprinterBlessingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBlueprinterBlessingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-blueprinter-blessings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetConstructorLoggingSettings sets constructor logging settings

  Set the logging settings for this constructor instance.
*/
func (a *Client) SetConstructorLoggingSettings(params *SetConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetConstructorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetConstructorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-constructor-logging-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetConstructorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetConstructorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-constructor-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetLicense adds or update license

  Adds a new or updates an existing license.
*/
func (a *Client) SetLicense(params *SetLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-license",
		Method:             "PUT",
		PathPattern:        "/platform/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-license: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetProxiesSettings sets proxy settings

  Overwrites the proxy settings. All unspecified fields are deleted.
*/
func (a *Client) SetProxiesSettings(params *SetProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetProxiesSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProxiesSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-proxies-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/proxies/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetProxiesSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetProxiesSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-proxies-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetRunnerLoggingSettings sets runner logging settings

  Set the logging settings for this runner instance.
*/
func (a *Client) SetRunnerLoggingSettings(params *SetRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRunnerLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRunnerLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-runner-logging-settings",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRunnerLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetRunnerLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-runner-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetRunnerRoles sets runner roles

  Set runner roles.
*/
func (a *Client) SetRunnerRoles(params *SetRunnerRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRunnerRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRunnerRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-runner-roles",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRunnerRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetRunnerRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-runner-roles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartAllocatorMaintenanceMode starts maintenance mode

  Starts maintenance mode on the allocator.
*/
func (a *Client) StartAllocatorMaintenanceMode(params *StartAllocatorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartAllocatorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartAllocatorMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-allocator-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartAllocatorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartAllocatorMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-allocator-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartConstructorMaintenanceMode starts maintenance mode

  Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
*/
func (a *Client) StartConstructorMaintenanceMode(params *StartConstructorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartConstructorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartConstructorMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-constructor-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartConstructorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartConstructorMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-constructor-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopAllocatorMaintenanceMode stops maintenance mode

  Stops maintenance mode on the allocator.
*/
func (a *Client) StopAllocatorMaintenanceMode(params *StopAllocatorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopAllocatorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopAllocatorMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-allocator-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopAllocatorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopAllocatorMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-allocator-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopConstructorMaintenanceMode stops maintenance mode

  Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
*/
func (a *Client) StopConstructorMaintenanceMode(params *StopConstructorMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopConstructorMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopConstructorMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-constructor-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopConstructorMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopConstructorMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-constructor-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAdminconsoleLoggingSettings updates adminconsole logging settings

  All changes in the specified object are applied to the logging settings for this adminconsole instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateAdminconsoleLoggingSettings(params *UpdateAdminconsoleLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdminconsoleLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdminconsoleLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-adminconsole-logging-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAdminconsoleLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAdminconsoleLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-adminconsole-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAllocatorLoggingSettings updates allocator logging settings

  All changes in the specified object are applied to the logging settings for this allocator instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateAllocatorLoggingSettings(params *UpdateAllocatorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocatorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllocatorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-allocator-logging-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAllocatorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAllocatorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-allocator-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAllocatorSettings updates allocator settings

  Applies the settings as a patch. Only the fields that are referenced in the update are altered.
*/
func (a *Client) UpdateAllocatorSettings(params *UpdateAllocatorSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocatorSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllocatorSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-allocator-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/allocators/{allocator_id}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAllocatorSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAllocatorSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-allocator-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBlueprinterRole updates role

  Update a role.
*/
func (a *Client) UpdateBlueprinterRole(params *UpdateBlueprinterRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBlueprinterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBlueprinterRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-blueprinter-role",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBlueprinterRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBlueprinterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-blueprinter-role: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConstructorLoggingSettings updates constructor logging settings

  All changes in the specified object are applied to the logging settings for this constructor instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateConstructorLoggingSettings(params *UpdateConstructorLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateConstructorLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConstructorLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-constructor-logging-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/constructors/{constructor_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateConstructorLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConstructorLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-constructor-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProxiesFilteredGroup updates filtered group of proxies

  Update the settings for a filtered group of proxies.
*/
func (a *Client) UpdateProxiesFilteredGroup(params *UpdateProxiesFilteredGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProxiesFilteredGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxiesFilteredGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-proxies-filtered-group",
		Method:             "PUT",
		PathPattern:        "/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxiesFilteredGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxiesFilteredGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-proxies-filtered-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProxiesSettings updates proxy settings

  Applies the settings as a patch. Only the fields that are referenced in the update are changed.
*/
func (a *Client) UpdateProxiesSettings(params *UpdateProxiesSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProxiesSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxiesSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-proxies-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/proxies/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxiesSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxiesSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-proxies-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunnerLoggingSettings updates runner logging settings

  All changes in the specified object are applied to the logging settings for this runner instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateRunnerLoggingSettings(params *UpdateRunnerLoggingSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRunnerLoggingSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunnerLoggingSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-runner-logging-settings",
		Method:             "PATCH",
		PathPattern:        "/platform/infrastructure/runners/{runner_id}/logging_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRunnerLoggingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunnerLoggingSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-runner-logging-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
