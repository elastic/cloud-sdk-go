// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// SetRunnerRolesReader is a Reader for the SetRunnerRoles structure.
type SetRunnerRolesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetRunnerRolesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetRunnerRolesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetRunnerRolesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetRunnerRolesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewSetRunnerRolesRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetRunnerRolesOK creates a SetRunnerRolesOK with default headers values
func NewSetRunnerRolesOK() *SetRunnerRolesOK {
	return &SetRunnerRolesOK{}
}

/* SetRunnerRolesOK describes a response with status code 200, with default header values.

The roles for the {runner_id} specified runner are assigned.
*/
type SetRunnerRolesOK struct {
	Payload *models.RunnerRolesInfo
}

func (o *SetRunnerRolesOK) Error() string {
	return fmt.Sprintf("[PUT /platform/infrastructure/runners/{runner_id}/roles][%d] setRunnerRolesOK  %+v", 200, o.Payload)
}
func (o *SetRunnerRolesOK) GetPayload() *models.RunnerRolesInfo {
	return o.Payload
}

func (o *SetRunnerRolesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RunnerRolesInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRunnerRolesBadRequest creates a SetRunnerRolesBadRequest with default headers values
func NewSetRunnerRolesBadRequest() *SetRunnerRolesBadRequest {
	return &SetRunnerRolesBadRequest{}
}

/* SetRunnerRolesBadRequest describes a response with status code 400, with default header values.

There was an error while assigning the roles for the {runner_id} specified runner. Try your request again. (code: `runners.runner_set_roles_failed`)
*/
type SetRunnerRolesBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SetRunnerRolesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /platform/infrastructure/runners/{runner_id}/roles][%d] setRunnerRolesBadRequest  %+v", 400, o.Payload)
}
func (o *SetRunnerRolesBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SetRunnerRolesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRunnerRolesNotFound creates a SetRunnerRolesNotFound with default headers values
func NewSetRunnerRolesNotFound() *SetRunnerRolesNotFound {
	return &SetRunnerRolesNotFound{}
}

/* SetRunnerRolesNotFound describes a response with status code 404, with default header values.

Unable to find the {runner_id} specified runner. Edit your request, then try again. (code: `runners.runner_not_found`)
*/
type SetRunnerRolesNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SetRunnerRolesNotFound) Error() string {
	return fmt.Sprintf("[PUT /platform/infrastructure/runners/{runner_id}/roles][%d] setRunnerRolesNotFound  %+v", 404, o.Payload)
}
func (o *SetRunnerRolesNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SetRunnerRolesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRunnerRolesRetryWith creates a SetRunnerRolesRetryWith with default headers values
func NewSetRunnerRolesRetryWith() *SetRunnerRolesRetryWith {
	return &SetRunnerRolesRetryWith{}
}

/* SetRunnerRolesRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type SetRunnerRolesRetryWith struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *SetRunnerRolesRetryWith) Error() string {
	return fmt.Sprintf("[PUT /platform/infrastructure/runners/{runner_id}/roles][%d] setRunnerRolesRetryWith  %+v", 449, o.Payload)
}
func (o *SetRunnerRolesRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *SetRunnerRolesRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
