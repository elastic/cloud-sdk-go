// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// StartAllocatorMaintenanceModeReader is a Reader for the StartAllocatorMaintenanceMode structure.
type StartAllocatorMaintenanceModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartAllocatorMaintenanceModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewStartAllocatorMaintenanceModeAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewStartAllocatorMaintenanceModeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartAllocatorMaintenanceModeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewStartAllocatorMaintenanceModeRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStartAllocatorMaintenanceModeAccepted creates a StartAllocatorMaintenanceModeAccepted with default headers values
func NewStartAllocatorMaintenanceModeAccepted() *StartAllocatorMaintenanceModeAccepted {
	return &StartAllocatorMaintenanceModeAccepted{}
}

/*StartAllocatorMaintenanceModeAccepted handles this case with default header values.

The start maintenance mode command was issued successfully
*/
type StartAllocatorMaintenanceModeAccepted struct {
	Payload models.EmptyResponse
}

func (o *StartAllocatorMaintenanceModeAccepted) Error() string {
	return fmt.Sprintf("[POST /platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start][%d] startAllocatorMaintenanceModeAccepted  %+v", 202, o.Payload)
}

func (o *StartAllocatorMaintenanceModeAccepted) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *StartAllocatorMaintenanceModeAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartAllocatorMaintenanceModeForbidden creates a StartAllocatorMaintenanceModeForbidden with default headers values
func NewStartAllocatorMaintenanceModeForbidden() *StartAllocatorMaintenanceModeForbidden {
	return &StartAllocatorMaintenanceModeForbidden{}
}

/*StartAllocatorMaintenanceModeForbidden handles this case with default header values.

The start maintenance mode command was prohibited for the given allocator. (code: `root.unauthorized.rbac`)
*/
type StartAllocatorMaintenanceModeForbidden struct {
	/*The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *StartAllocatorMaintenanceModeForbidden) Error() string {
	return fmt.Sprintf("[POST /platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start][%d] startAllocatorMaintenanceModeForbidden  %+v", 403, o.Payload)
}

func (o *StartAllocatorMaintenanceModeForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *StartAllocatorMaintenanceModeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-cloud-error-codes
	o.XCloudErrorCodes = response.GetHeader("x-cloud-error-codes")

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartAllocatorMaintenanceModeNotFound creates a StartAllocatorMaintenanceModeNotFound with default headers values
func NewStartAllocatorMaintenanceModeNotFound() *StartAllocatorMaintenanceModeNotFound {
	return &StartAllocatorMaintenanceModeNotFound{}
}

/*StartAllocatorMaintenanceModeNotFound handles this case with default header values.

The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`)
*/
type StartAllocatorMaintenanceModeNotFound struct {
	/*The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *StartAllocatorMaintenanceModeNotFound) Error() string {
	return fmt.Sprintf("[POST /platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start][%d] startAllocatorMaintenanceModeNotFound  %+v", 404, o.Payload)
}

func (o *StartAllocatorMaintenanceModeNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *StartAllocatorMaintenanceModeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-cloud-error-codes
	o.XCloudErrorCodes = response.GetHeader("x-cloud-error-codes")

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartAllocatorMaintenanceModeRetryWith creates a StartAllocatorMaintenanceModeRetryWith with default headers values
func NewStartAllocatorMaintenanceModeRetryWith() *StartAllocatorMaintenanceModeRetryWith {
	return &StartAllocatorMaintenanceModeRetryWith{}
}

/*StartAllocatorMaintenanceModeRetryWith handles this case with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type StartAllocatorMaintenanceModeRetryWith struct {
	/*The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *StartAllocatorMaintenanceModeRetryWith) Error() string {
	return fmt.Sprintf("[POST /platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start][%d] startAllocatorMaintenanceModeRetryWith  %+v", 449, o.Payload)
}

func (o *StartAllocatorMaintenanceModeRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *StartAllocatorMaintenanceModeRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-cloud-error-codes
	o.XCloudErrorCodes = response.GetHeader("x-cloud-error-codes")

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
