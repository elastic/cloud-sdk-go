// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_enterprise_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters enterprise search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters enterprise search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEnterpriseSearchProxyRequests(params *DeleteEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnterpriseSearchProxyRequestsOK, error)

	GetEnterpriseSearchProxyRequests(params *GetEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseSearchProxyRequestsOK, error)

	PostEnterpriseSearchProxyRequests(params *PostEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostEnterpriseSearchProxyRequestsOK, error)

	PutEnterpriseSearchProxyRequests(params *PutEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutEnterpriseSearchProxyRequestsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteEnterpriseSearchProxyRequests proxies HTTP d e l e t e request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP DELETE request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) DeleteEnterpriseSearchProxyRequests(params *DeleteEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteEnterpriseSearchProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnterpriseSearchProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-enterprise-search-proxy-requests",
		Method:             "DELETE",
		PathPattern:        "/clusters/enterprise_search/{cluster_id}/proxy/{enterprise_search_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnterpriseSearchProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnterpriseSearchProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-enterprise-search-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnterpriseSearchProxyRequests proxies HTTP g e t request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP GET request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) GetEnterpriseSearchProxyRequests(params *GetEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEnterpriseSearchProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnterpriseSearchProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-enterprise-search-proxy-requests",
		Method:             "GET",
		PathPattern:        "/clusters/enterprise_search/{cluster_id}/proxy/{enterprise_search_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnterpriseSearchProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnterpriseSearchProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-enterprise-search-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEnterpriseSearchProxyRequests proxies HTTP p o s t request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP POST request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) PostEnterpriseSearchProxyRequests(params *PostEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostEnterpriseSearchProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEnterpriseSearchProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-enterprise-search-proxy-requests",
		Method:             "POST",
		PathPattern:        "/clusters/enterprise_search/{cluster_id}/proxy/{enterprise_search_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEnterpriseSearchProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEnterpriseSearchProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-enterprise-search-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutEnterpriseSearchProxyRequests proxies HTTP p u t request

  DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP PUT request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
*/
func (a *Client) PutEnterpriseSearchProxyRequests(params *PutEnterpriseSearchProxyRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutEnterpriseSearchProxyRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEnterpriseSearchProxyRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put-enterprise-search-proxy-requests",
		Method:             "PUT",
		PathPattern:        "/clusters/enterprise_search/{cluster_id}/proxy/{enterprise_search_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEnterpriseSearchProxyRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEnterpriseSearchProxyRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-enterprise-search-proxy-requests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
