// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// GetEnrollmentTokensReader is a Reader for the GetEnrollmentTokens structure.
type GetEnrollmentTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEnrollmentTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEnrollmentTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 449:
		result := NewGetEnrollmentTokensRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEnrollmentTokensOK creates a GetEnrollmentTokensOK with default headers values
func NewGetEnrollmentTokensOK() *GetEnrollmentTokensOK {
	return &GetEnrollmentTokensOK{}
}

/*
GetEnrollmentTokensOK describes a response with status code 200, with default header values.

A token has been generated that can be used to start new servers with the requested roles
*/
type GetEnrollmentTokensOK struct {
	Payload *models.ListEnrollmentTokenReply
}

// IsSuccess returns true when this get enrollment tokens o k response has a 2xx status code
func (o *GetEnrollmentTokensOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get enrollment tokens o k response has a 3xx status code
func (o *GetEnrollmentTokensOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get enrollment tokens o k response has a 4xx status code
func (o *GetEnrollmentTokensOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get enrollment tokens o k response has a 5xx status code
func (o *GetEnrollmentTokensOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get enrollment tokens o k response a status code equal to that given
func (o *GetEnrollmentTokensOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get enrollment tokens o k response
func (o *GetEnrollmentTokensOK) Code() int {
	return 200
}

func (o *GetEnrollmentTokensOK) Error() string {
	return fmt.Sprintf("[GET /platform/configuration/security/enrollment-tokens][%d] getEnrollmentTokensOK  %+v", 200, o.Payload)
}

func (o *GetEnrollmentTokensOK) String() string {
	return fmt.Sprintf("[GET /platform/configuration/security/enrollment-tokens][%d] getEnrollmentTokensOK  %+v", 200, o.Payload)
}

func (o *GetEnrollmentTokensOK) GetPayload() *models.ListEnrollmentTokenReply {
	return o.Payload
}

func (o *GetEnrollmentTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListEnrollmentTokenReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnrollmentTokensRetryWith creates a GetEnrollmentTokensRetryWith with default headers values
func NewGetEnrollmentTokensRetryWith() *GetEnrollmentTokensRetryWith {
	return &GetEnrollmentTokensRetryWith{}
}

/*
GetEnrollmentTokensRetryWith describes a response with status code 449, with default header values.

elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type GetEnrollmentTokensRetryWith struct {
	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get enrollment tokens retry with response has a 2xx status code
func (o *GetEnrollmentTokensRetryWith) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get enrollment tokens retry with response has a 3xx status code
func (o *GetEnrollmentTokensRetryWith) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get enrollment tokens retry with response has a 4xx status code
func (o *GetEnrollmentTokensRetryWith) IsClientError() bool {
	return true
}

// IsServerError returns true when this get enrollment tokens retry with response has a 5xx status code
func (o *GetEnrollmentTokensRetryWith) IsServerError() bool {
	return false
}

// IsCode returns true when this get enrollment tokens retry with response a status code equal to that given
func (o *GetEnrollmentTokensRetryWith) IsCode(code int) bool {
	return code == 449
}

// Code gets the status code for the get enrollment tokens retry with response
func (o *GetEnrollmentTokensRetryWith) Code() int {
	return 449
}

func (o *GetEnrollmentTokensRetryWith) Error() string {
	return fmt.Sprintf("[GET /platform/configuration/security/enrollment-tokens][%d] getEnrollmentTokensRetryWith  %+v", 449, o.Payload)
}

func (o *GetEnrollmentTokensRetryWith) String() string {
	return fmt.Sprintf("[GET /platform/configuration/security/enrollment-tokens][%d] getEnrollmentTokensRetryWith  %+v", 449, o.Payload)
}

func (o *GetEnrollmentTokensRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetEnrollmentTokensRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
