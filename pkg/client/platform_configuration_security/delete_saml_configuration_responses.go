// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// DeleteSamlConfigurationReader is a Reader for the DeleteSamlConfiguration structure.
type DeleteSamlConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSamlConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSamlConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteSamlConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSamlConfigurationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewDeleteSamlConfigurationRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSamlConfigurationOK creates a DeleteSamlConfigurationOK with default headers values
func NewDeleteSamlConfigurationOK() *DeleteSamlConfigurationOK {
	return &DeleteSamlConfigurationOK{}
}

/*
DeleteSamlConfigurationOK describes a response with status code 200, with default header values.

The SAML configuration was successfully deleted
*/
type DeleteSamlConfigurationOK struct {
	Payload models.EmptyResponse
}

// IsSuccess returns true when this delete saml configuration o k response has a 2xx status code
func (o *DeleteSamlConfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete saml configuration o k response has a 3xx status code
func (o *DeleteSamlConfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saml configuration o k response has a 4xx status code
func (o *DeleteSamlConfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete saml configuration o k response has a 5xx status code
func (o *DeleteSamlConfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saml configuration o k response a status code equal to that given
func (o *DeleteSamlConfigurationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete saml configuration o k response
func (o *DeleteSamlConfigurationOK) Code() int {
	return 200
}

func (o *DeleteSamlConfigurationOK) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationOK  %+v", 200, o.Payload)
}

func (o *DeleteSamlConfigurationOK) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationOK  %+v", 200, o.Payload)
}

func (o *DeleteSamlConfigurationOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *DeleteSamlConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSamlConfigurationNotFound creates a DeleteSamlConfigurationNotFound with default headers values
func NewDeleteSamlConfigurationNotFound() *DeleteSamlConfigurationNotFound {
	return &DeleteSamlConfigurationNotFound{}
}

/*
DeleteSamlConfigurationNotFound describes a response with status code 404, with default header values.

The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`)
*/
type DeleteSamlConfigurationNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete saml configuration not found response has a 2xx status code
func (o *DeleteSamlConfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saml configuration not found response has a 3xx status code
func (o *DeleteSamlConfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saml configuration not found response has a 4xx status code
func (o *DeleteSamlConfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saml configuration not found response has a 5xx status code
func (o *DeleteSamlConfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saml configuration not found response a status code equal to that given
func (o *DeleteSamlConfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete saml configuration not found response
func (o *DeleteSamlConfigurationNotFound) Code() int {
	return 404
}

func (o *DeleteSamlConfigurationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSamlConfigurationNotFound) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSamlConfigurationNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteSamlConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSamlConfigurationConflict creates a DeleteSamlConfigurationConflict with default headers values
func NewDeleteSamlConfigurationConflict() *DeleteSamlConfigurationConflict {
	return &DeleteSamlConfigurationConflict{}
}

/*
DeleteSamlConfigurationConflict describes a response with status code 409, with default header values.

There is a version conflict. (code: `security_realm.version_conflict`)
*/
type DeleteSamlConfigurationConflict struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete saml configuration conflict response has a 2xx status code
func (o *DeleteSamlConfigurationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saml configuration conflict response has a 3xx status code
func (o *DeleteSamlConfigurationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saml configuration conflict response has a 4xx status code
func (o *DeleteSamlConfigurationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saml configuration conflict response has a 5xx status code
func (o *DeleteSamlConfigurationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saml configuration conflict response a status code equal to that given
func (o *DeleteSamlConfigurationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete saml configuration conflict response
func (o *DeleteSamlConfigurationConflict) Code() int {
	return 409
}

func (o *DeleteSamlConfigurationConflict) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationConflict  %+v", 409, o.Payload)
}

func (o *DeleteSamlConfigurationConflict) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationConflict  %+v", 409, o.Payload)
}

func (o *DeleteSamlConfigurationConflict) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteSamlConfigurationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSamlConfigurationRetryWith creates a DeleteSamlConfigurationRetryWith with default headers values
func NewDeleteSamlConfigurationRetryWith() *DeleteSamlConfigurationRetryWith {
	return &DeleteSamlConfigurationRetryWith{}
}

/*
DeleteSamlConfigurationRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type DeleteSamlConfigurationRetryWith struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete saml configuration retry with response has a 2xx status code
func (o *DeleteSamlConfigurationRetryWith) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saml configuration retry with response has a 3xx status code
func (o *DeleteSamlConfigurationRetryWith) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saml configuration retry with response has a 4xx status code
func (o *DeleteSamlConfigurationRetryWith) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saml configuration retry with response has a 5xx status code
func (o *DeleteSamlConfigurationRetryWith) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saml configuration retry with response a status code equal to that given
func (o *DeleteSamlConfigurationRetryWith) IsCode(code int) bool {
	return code == 449
}

// Code gets the status code for the delete saml configuration retry with response
func (o *DeleteSamlConfigurationRetryWith) Code() int {
	return 449
}

func (o *DeleteSamlConfigurationRetryWith) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationRetryWith  %+v", 449, o.Payload)
}

func (o *DeleteSamlConfigurationRetryWith) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/saml/{realm_id}][%d] deleteSamlConfigurationRetryWith  %+v", 449, o.Payload)
}

func (o *DeleteSamlConfigurationRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteSamlConfigurationRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
