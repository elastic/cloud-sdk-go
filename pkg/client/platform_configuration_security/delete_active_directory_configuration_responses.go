// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// DeleteActiveDirectoryConfigurationReader is a Reader for the DeleteActiveDirectoryConfiguration structure.
type DeleteActiveDirectoryConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteActiveDirectoryConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteActiveDirectoryConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteActiveDirectoryConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteActiveDirectoryConfigurationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewDeleteActiveDirectoryConfigurationRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteActiveDirectoryConfigurationOK creates a DeleteActiveDirectoryConfigurationOK with default headers values
func NewDeleteActiveDirectoryConfigurationOK() *DeleteActiveDirectoryConfigurationOK {
	return &DeleteActiveDirectoryConfigurationOK{}
}

/*
DeleteActiveDirectoryConfigurationOK describes a response with status code 200, with default header values.

The Active Directory configuration was successfully deleted
*/
type DeleteActiveDirectoryConfigurationOK struct {
	Payload models.EmptyResponse
}

// IsSuccess returns true when this delete active directory configuration o k response has a 2xx status code
func (o *DeleteActiveDirectoryConfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete active directory configuration o k response has a 3xx status code
func (o *DeleteActiveDirectoryConfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete active directory configuration o k response has a 4xx status code
func (o *DeleteActiveDirectoryConfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete active directory configuration o k response has a 5xx status code
func (o *DeleteActiveDirectoryConfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete active directory configuration o k response a status code equal to that given
func (o *DeleteActiveDirectoryConfigurationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete active directory configuration o k response
func (o *DeleteActiveDirectoryConfigurationOK) Code() int {
	return 200
}

func (o *DeleteActiveDirectoryConfigurationOK) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationOK  %+v", 200, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationOK) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationOK  %+v", 200, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *DeleteActiveDirectoryConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActiveDirectoryConfigurationNotFound creates a DeleteActiveDirectoryConfigurationNotFound with default headers values
func NewDeleteActiveDirectoryConfigurationNotFound() *DeleteActiveDirectoryConfigurationNotFound {
	return &DeleteActiveDirectoryConfigurationNotFound{}
}

/*
DeleteActiveDirectoryConfigurationNotFound describes a response with status code 404, with default header values.

The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`)
*/
type DeleteActiveDirectoryConfigurationNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete active directory configuration not found response has a 2xx status code
func (o *DeleteActiveDirectoryConfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete active directory configuration not found response has a 3xx status code
func (o *DeleteActiveDirectoryConfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete active directory configuration not found response has a 4xx status code
func (o *DeleteActiveDirectoryConfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete active directory configuration not found response has a 5xx status code
func (o *DeleteActiveDirectoryConfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete active directory configuration not found response a status code equal to that given
func (o *DeleteActiveDirectoryConfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete active directory configuration not found response
func (o *DeleteActiveDirectoryConfigurationNotFound) Code() int {
	return 404
}

func (o *DeleteActiveDirectoryConfigurationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationNotFound) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteActiveDirectoryConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActiveDirectoryConfigurationConflict creates a DeleteActiveDirectoryConfigurationConflict with default headers values
func NewDeleteActiveDirectoryConfigurationConflict() *DeleteActiveDirectoryConfigurationConflict {
	return &DeleteActiveDirectoryConfigurationConflict{}
}

/*
DeleteActiveDirectoryConfigurationConflict describes a response with status code 409, with default header values.

There is a version conflict. (code: `security_realm.version_conflict`)
*/
type DeleteActiveDirectoryConfigurationConflict struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete active directory configuration conflict response has a 2xx status code
func (o *DeleteActiveDirectoryConfigurationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete active directory configuration conflict response has a 3xx status code
func (o *DeleteActiveDirectoryConfigurationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete active directory configuration conflict response has a 4xx status code
func (o *DeleteActiveDirectoryConfigurationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete active directory configuration conflict response has a 5xx status code
func (o *DeleteActiveDirectoryConfigurationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete active directory configuration conflict response a status code equal to that given
func (o *DeleteActiveDirectoryConfigurationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete active directory configuration conflict response
func (o *DeleteActiveDirectoryConfigurationConflict) Code() int {
	return 409
}

func (o *DeleteActiveDirectoryConfigurationConflict) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationConflict  %+v", 409, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationConflict) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationConflict  %+v", 409, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationConflict) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteActiveDirectoryConfigurationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActiveDirectoryConfigurationRetryWith creates a DeleteActiveDirectoryConfigurationRetryWith with default headers values
func NewDeleteActiveDirectoryConfigurationRetryWith() *DeleteActiveDirectoryConfigurationRetryWith {
	return &DeleteActiveDirectoryConfigurationRetryWith{}
}

/*
DeleteActiveDirectoryConfigurationRetryWith describes a response with status code 449, with default header values.

Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`)
*/
type DeleteActiveDirectoryConfigurationRetryWith struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete active directory configuration retry with response has a 2xx status code
func (o *DeleteActiveDirectoryConfigurationRetryWith) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete active directory configuration retry with response has a 3xx status code
func (o *DeleteActiveDirectoryConfigurationRetryWith) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete active directory configuration retry with response has a 4xx status code
func (o *DeleteActiveDirectoryConfigurationRetryWith) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete active directory configuration retry with response has a 5xx status code
func (o *DeleteActiveDirectoryConfigurationRetryWith) IsServerError() bool {
	return false
}

// IsCode returns true when this delete active directory configuration retry with response a status code equal to that given
func (o *DeleteActiveDirectoryConfigurationRetryWith) IsCode(code int) bool {
	return code == 449
}

// Code gets the status code for the delete active directory configuration retry with response
func (o *DeleteActiveDirectoryConfigurationRetryWith) Code() int {
	return 449
}

func (o *DeleteActiveDirectoryConfigurationRetryWith) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationRetryWith  %+v", 449, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationRetryWith) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/security/realms/active-directory/{realm_id}][%d] deleteActiveDirectoryConfigurationRetryWith  %+v", 449, o.Payload)
}

func (o *DeleteActiveDirectoryConfigurationRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteActiveDirectoryConfigurationRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
