// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package platform_configuration_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// DeleteInstanceConfigurationReader is a Reader for the DeleteInstanceConfiguration structure.
type DeleteInstanceConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstanceConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteInstanceConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteInstanceConfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInstanceConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 449:
		result := NewDeleteInstanceConfigurationRetryWith()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteInstanceConfigurationOK creates a DeleteInstanceConfigurationOK with default headers values
func NewDeleteInstanceConfigurationOK() *DeleteInstanceConfigurationOK {
	return &DeleteInstanceConfigurationOK{}
}

/*
DeleteInstanceConfigurationOK describes a response with status code 200, with default header values.

Instance configuration specified by {id} was deleted
*/
type DeleteInstanceConfigurationOK struct {
	Payload models.EmptyResponse
}

// IsSuccess returns true when this delete instance configuration o k response has a 2xx status code
func (o *DeleteInstanceConfigurationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete instance configuration o k response has a 3xx status code
func (o *DeleteInstanceConfigurationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instance configuration o k response has a 4xx status code
func (o *DeleteInstanceConfigurationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete instance configuration o k response has a 5xx status code
func (o *DeleteInstanceConfigurationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instance configuration o k response a status code equal to that given
func (o *DeleteInstanceConfigurationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete instance configuration o k response
func (o *DeleteInstanceConfigurationOK) Code() int {
	return 200
}

func (o *DeleteInstanceConfigurationOK) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationOK  %+v", 200, o.Payload)
}

func (o *DeleteInstanceConfigurationOK) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationOK  %+v", 200, o.Payload)
}

func (o *DeleteInstanceConfigurationOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *DeleteInstanceConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConfigurationForbidden creates a DeleteInstanceConfigurationForbidden with default headers values
func NewDeleteInstanceConfigurationForbidden() *DeleteInstanceConfigurationForbidden {
	return &DeleteInstanceConfigurationForbidden{}
}

/*
DeleteInstanceConfigurationForbidden describes a response with status code 403, with default header values.

Instance configuration specified by {id} is system owned (code: 'configuration.system_owned')
*/
type DeleteInstanceConfigurationForbidden struct {
	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete instance configuration forbidden response has a 2xx status code
func (o *DeleteInstanceConfigurationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instance configuration forbidden response has a 3xx status code
func (o *DeleteInstanceConfigurationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instance configuration forbidden response has a 4xx status code
func (o *DeleteInstanceConfigurationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instance configuration forbidden response has a 5xx status code
func (o *DeleteInstanceConfigurationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instance configuration forbidden response a status code equal to that given
func (o *DeleteInstanceConfigurationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete instance configuration forbidden response
func (o *DeleteInstanceConfigurationForbidden) Code() int {
	return 403
}

func (o *DeleteInstanceConfigurationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInstanceConfigurationForbidden) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInstanceConfigurationForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteInstanceConfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConfigurationNotFound creates a DeleteInstanceConfigurationNotFound with default headers values
func NewDeleteInstanceConfigurationNotFound() *DeleteInstanceConfigurationNotFound {
	return &DeleteInstanceConfigurationNotFound{}
}

/*
DeleteInstanceConfigurationNotFound describes a response with status code 404, with default header values.

Instance configuration specified by {id} cannot be found or the operation failed (code: 'configuration.instance_configuration_not_found')
*/
type DeleteInstanceConfigurationNotFound struct {
	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete instance configuration not found response has a 2xx status code
func (o *DeleteInstanceConfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instance configuration not found response has a 3xx status code
func (o *DeleteInstanceConfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instance configuration not found response has a 4xx status code
func (o *DeleteInstanceConfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instance configuration not found response has a 5xx status code
func (o *DeleteInstanceConfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instance configuration not found response a status code equal to that given
func (o *DeleteInstanceConfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete instance configuration not found response
func (o *DeleteInstanceConfigurationNotFound) Code() int {
	return 404
}

func (o *DeleteInstanceConfigurationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstanceConfigurationNotFound) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstanceConfigurationNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteInstanceConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConfigurationRetryWith creates a DeleteInstanceConfigurationRetryWith with default headers values
func NewDeleteInstanceConfigurationRetryWith() *DeleteInstanceConfigurationRetryWith {
	return &DeleteInstanceConfigurationRetryWith{}
}

/*
DeleteInstanceConfigurationRetryWith describes a response with status code 449, with default header values.

elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"')
*/
type DeleteInstanceConfigurationRetryWith struct {
	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this delete instance configuration retry with response has a 2xx status code
func (o *DeleteInstanceConfigurationRetryWith) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instance configuration retry with response has a 3xx status code
func (o *DeleteInstanceConfigurationRetryWith) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instance configuration retry with response has a 4xx status code
func (o *DeleteInstanceConfigurationRetryWith) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instance configuration retry with response has a 5xx status code
func (o *DeleteInstanceConfigurationRetryWith) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instance configuration retry with response a status code equal to that given
func (o *DeleteInstanceConfigurationRetryWith) IsCode(code int) bool {
	return code == 449
}

// Code gets the status code for the delete instance configuration retry with response
func (o *DeleteInstanceConfigurationRetryWith) Code() int {
	return 449
}

func (o *DeleteInstanceConfigurationRetryWith) Error() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationRetryWith  %+v", 449, o.Payload)
}

func (o *DeleteInstanceConfigurationRetryWith) String() string {
	return fmt.Sprintf("[DELETE /platform/configuration/instances/{id}][%d] deleteInstanceConfigurationRetryWith  %+v", 449, o.Payload)
}

func (o *DeleteInstanceConfigurationRetryWith) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *DeleteInstanceConfigurationRetryWith) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
