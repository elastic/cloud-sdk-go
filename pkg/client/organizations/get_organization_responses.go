// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// GetOrganizationReader is a Reader for the GetOrganization structure.
type GetOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrganizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrganizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrganizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationOK creates a GetOrganizationOK with default headers values
func NewGetOrganizationOK() *GetOrganizationOK {
	return &GetOrganizationOK{}
}

/*
GetOrganizationOK describes a response with status code 200, with default header values.

Organization fetched successfully
*/
type GetOrganizationOK struct {
	Payload *models.Organization
}

// IsSuccess returns true when this get organization o k response has a 2xx status code
func (o *GetOrganizationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization o k response has a 3xx status code
func (o *GetOrganizationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization o k response has a 4xx status code
func (o *GetOrganizationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization o k response has a 5xx status code
func (o *GetOrganizationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization o k response a status code equal to that given
func (o *GetOrganizationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization o k response
func (o *GetOrganizationOK) Code() int {
	return 200
}

func (o *GetOrganizationOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationOK) GetPayload() *models.Organization {
	return o.Payload
}

func (o *GetOrganizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationUnauthorized creates a GetOrganizationUnauthorized with default headers values
func NewGetOrganizationUnauthorized() *GetOrganizationUnauthorized {
	return &GetOrganizationUnauthorized{}
}

/*
GetOrganizationUnauthorized describes a response with status code 401, with default header values.

User not found. (code: `user.not_found`)
*/
type GetOrganizationUnauthorized struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get organization unauthorized response has a 2xx status code
func (o *GetOrganizationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organization unauthorized response has a 3xx status code
func (o *GetOrganizationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization unauthorized response has a 4xx status code
func (o *GetOrganizationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organization unauthorized response has a 5xx status code
func (o *GetOrganizationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization unauthorized response a status code equal to that given
func (o *GetOrganizationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get organization unauthorized response
func (o *GetOrganizationUnauthorized) Code() int {
	return 401
}

func (o *GetOrganizationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOrganizationUnauthorized) String() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOrganizationUnauthorized) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetOrganizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationForbidden creates a GetOrganizationForbidden with default headers values
func NewGetOrganizationForbidden() *GetOrganizationForbidden {
	return &GetOrganizationForbidden{}
}

/*
GetOrganizationForbidden describes a response with status code 403, with default header values.

The current user does not have access to the requested organization. (code: `organization.invalid_access`)
*/
type GetOrganizationForbidden struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get organization forbidden response has a 2xx status code
func (o *GetOrganizationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organization forbidden response has a 3xx status code
func (o *GetOrganizationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization forbidden response has a 4xx status code
func (o *GetOrganizationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organization forbidden response has a 5xx status code
func (o *GetOrganizationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization forbidden response a status code equal to that given
func (o *GetOrganizationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get organization forbidden response
func (o *GetOrganizationForbidden) Code() int {
	return 403
}

func (o *GetOrganizationForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *GetOrganizationForbidden) String() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationForbidden  %+v", 403, o.Payload)
}

func (o *GetOrganizationForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetOrganizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrganizationNotFound creates a GetOrganizationNotFound with default headers values
func NewGetOrganizationNotFound() *GetOrganizationNotFound {
	return &GetOrganizationNotFound{}
}

/*
GetOrganizationNotFound describes a response with status code 404, with default header values.

Organization not found. (code: `organization.not_found`)
*/
type GetOrganizationNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

// IsSuccess returns true when this get organization not found response has a 2xx status code
func (o *GetOrganizationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get organization not found response has a 3xx status code
func (o *GetOrganizationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization not found response has a 4xx status code
func (o *GetOrganizationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get organization not found response has a 5xx status code
func (o *GetOrganizationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization not found response a status code equal to that given
func (o *GetOrganizationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get organization not found response
func (o *GetOrganizationNotFound) Code() int {
	return 404
}

func (o *GetOrganizationNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationNotFound  %+v", 404, o.Payload)
}

func (o *GetOrganizationNotFound) String() string {
	return fmt.Sprintf("[GET /organizations/{organization_id}][%d] getOrganizationNotFound  %+v", 404, o.Payload)
}

func (o *GetOrganizationNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *GetOrganizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
