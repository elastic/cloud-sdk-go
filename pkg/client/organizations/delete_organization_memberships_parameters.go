// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteOrganizationMembershipsParams creates a new DeleteOrganizationMembershipsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteOrganizationMembershipsParams() *DeleteOrganizationMembershipsParams {
	return &DeleteOrganizationMembershipsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteOrganizationMembershipsParamsWithTimeout creates a new DeleteOrganizationMembershipsParams object
// with the ability to set a timeout on a request.
func NewDeleteOrganizationMembershipsParamsWithTimeout(timeout time.Duration) *DeleteOrganizationMembershipsParams {
	return &DeleteOrganizationMembershipsParams{
		timeout: timeout,
	}
}

// NewDeleteOrganizationMembershipsParamsWithContext creates a new DeleteOrganizationMembershipsParams object
// with the ability to set a context for a request.
func NewDeleteOrganizationMembershipsParamsWithContext(ctx context.Context) *DeleteOrganizationMembershipsParams {
	return &DeleteOrganizationMembershipsParams{
		Context: ctx,
	}
}

// NewDeleteOrganizationMembershipsParamsWithHTTPClient creates a new DeleteOrganizationMembershipsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteOrganizationMembershipsParamsWithHTTPClient(client *http.Client) *DeleteOrganizationMembershipsParams {
	return &DeleteOrganizationMembershipsParams{
		HTTPClient: client,
	}
}

/* DeleteOrganizationMembershipsParams contains all the parameters to send to the API endpoint
   for the delete organization memberships operation.

   Typically these are written to a http.Request.
*/
type DeleteOrganizationMembershipsParams struct {

	/* Force.

	   Whether or not to force the removal of Org memberships (effective only for Platform Admins)
	*/
	Force *bool

	/* OrganizationID.

	   Identifier for the Organization
	*/
	OrganizationID string

	/* UserIds.

	   CSV list of User identifiers
	*/
	UserIds string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete organization memberships params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOrganizationMembershipsParams) WithDefaults() *DeleteOrganizationMembershipsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete organization memberships params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteOrganizationMembershipsParams) SetDefaults() {
	var (
		forceDefault = bool(false)
	)

	val := DeleteOrganizationMembershipsParams{
		Force: &forceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) WithTimeout(timeout time.Duration) *DeleteOrganizationMembershipsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) WithContext(ctx context.Context) *DeleteOrganizationMembershipsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) WithHTTPClient(client *http.Client) *DeleteOrganizationMembershipsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) WithForce(force *bool) *DeleteOrganizationMembershipsParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) SetForce(force *bool) {
	o.Force = force
}

// WithOrganizationID adds the organizationID to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) WithOrganizationID(organizationID string) *DeleteOrganizationMembershipsParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithUserIds adds the userIds to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) WithUserIds(userIds string) *DeleteOrganizationMembershipsParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the delete organization memberships params
func (o *DeleteOrganizationMembershipsParams) SetUserIds(userIds string) {
	o.UserIds = userIds
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteOrganizationMembershipsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	// path param organization_id
	if err := r.SetPathParam("organization_id", o.OrganizationID); err != nil {
		return err
	}

	// path param user_ids
	if err := r.SetPathParam("user_ids", o.UserIds); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
