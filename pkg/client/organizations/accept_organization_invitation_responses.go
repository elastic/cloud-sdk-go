// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/elastic/cloud-sdk-go/pkg/models"
)

// AcceptOrganizationInvitationReader is a Reader for the AcceptOrganizationInvitation structure.
type AcceptOrganizationInvitationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptOrganizationInvitationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptOrganizationInvitationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptOrganizationInvitationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptOrganizationInvitationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptOrganizationInvitationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAcceptOrganizationInvitationOK creates a AcceptOrganizationInvitationOK with default headers values
func NewAcceptOrganizationInvitationOK() *AcceptOrganizationInvitationOK {
	return &AcceptOrganizationInvitationOK{}
}

/* AcceptOrganizationInvitationOK describes a response with status code 200, with default header values.

Organization invitation accepted successfully
*/
type AcceptOrganizationInvitationOK struct {
	Payload models.EmptyResponse
}

func (o *AcceptOrganizationInvitationOK) Error() string {
	return fmt.Sprintf("[POST /organizations/invitations/{invitation_token}/_accept][%d] acceptOrganizationInvitationOK  %+v", 200, o.Payload)
}
func (o *AcceptOrganizationInvitationOK) GetPayload() models.EmptyResponse {
	return o.Payload
}

func (o *AcceptOrganizationInvitationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptOrganizationInvitationBadRequest creates a AcceptOrganizationInvitationBadRequest with default headers values
func NewAcceptOrganizationInvitationBadRequest() *AcceptOrganizationInvitationBadRequest {
	return &AcceptOrganizationInvitationBadRequest{}
}

/* AcceptOrganizationInvitationBadRequest describes a response with status code 400, with default header values.

User already belongs to organization. (code: `organization.user_organization_already_belongs`)
*/
type AcceptOrganizationInvitationBadRequest struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *AcceptOrganizationInvitationBadRequest) Error() string {
	return fmt.Sprintf("[POST /organizations/invitations/{invitation_token}/_accept][%d] acceptOrganizationInvitationBadRequest  %+v", 400, o.Payload)
}
func (o *AcceptOrganizationInvitationBadRequest) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *AcceptOrganizationInvitationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptOrganizationInvitationForbidden creates a AcceptOrganizationInvitationForbidden with default headers values
func NewAcceptOrganizationInvitationForbidden() *AcceptOrganizationInvitationForbidden {
	return &AcceptOrganizationInvitationForbidden{}
}

/* AcceptOrganizationInvitationForbidden describes a response with status code 403, with default header values.

The current user authentication is not valid. (code: `root.invalid_authentication`)
*/
type AcceptOrganizationInvitationForbidden struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *AcceptOrganizationInvitationForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/invitations/{invitation_token}/_accept][%d] acceptOrganizationInvitationForbidden  %+v", 403, o.Payload)
}
func (o *AcceptOrganizationInvitationForbidden) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *AcceptOrganizationInvitationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptOrganizationInvitationNotFound creates a AcceptOrganizationInvitationNotFound with default headers values
func NewAcceptOrganizationInvitationNotFound() *AcceptOrganizationInvitationNotFound {
	return &AcceptOrganizationInvitationNotFound{}
}

/* AcceptOrganizationInvitationNotFound describes a response with status code 404, with default header values.

 * Organization not found. (code: `organization.not_found`)
* User not found. (code: `user.not_found`)
* Invitation not found. (code: `organization.invitation_not_found`)
*/
type AcceptOrganizationInvitationNotFound struct {

	/* The error codes associated with the response
	 */
	XCloudErrorCodes string

	Payload *models.BasicFailedReply
}

func (o *AcceptOrganizationInvitationNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/invitations/{invitation_token}/_accept][%d] acceptOrganizationInvitationNotFound  %+v", 404, o.Payload)
}
func (o *AcceptOrganizationInvitationNotFound) GetPayload() *models.BasicFailedReply {
	return o.Payload
}

func (o *AcceptOrganizationInvitationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-cloud-error-codes
	hdrXCloudErrorCodes := response.GetHeader("x-cloud-error-codes")

	if hdrXCloudErrorCodes != "" {
		o.XCloudErrorCodes = hdrXCloudErrorCodes
	}

	o.Payload = new(models.BasicFailedReply)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
