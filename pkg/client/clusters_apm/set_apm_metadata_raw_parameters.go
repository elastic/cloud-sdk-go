// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_apm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSetApmMetadataRawParams creates a new SetApmMetadataRawParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetApmMetadataRawParams() *SetApmMetadataRawParams {
	return &SetApmMetadataRawParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetApmMetadataRawParamsWithTimeout creates a new SetApmMetadataRawParams object
// with the ability to set a timeout on a request.
func NewSetApmMetadataRawParamsWithTimeout(timeout time.Duration) *SetApmMetadataRawParams {
	return &SetApmMetadataRawParams{
		timeout: timeout,
	}
}

// NewSetApmMetadataRawParamsWithContext creates a new SetApmMetadataRawParams object
// with the ability to set a context for a request.
func NewSetApmMetadataRawParamsWithContext(ctx context.Context) *SetApmMetadataRawParams {
	return &SetApmMetadataRawParams{
		Context: ctx,
	}
}

// NewSetApmMetadataRawParamsWithHTTPClient creates a new SetApmMetadataRawParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetApmMetadataRawParamsWithHTTPClient(client *http.Client) *SetApmMetadataRawParams {
	return &SetApmMetadataRawParams{
		HTTPClient: client,
	}
}

/* SetApmMetadataRawParams contains all the parameters to send to the API endpoint
   for the set apm metadata raw operation.

   Typically these are written to a http.Request.
*/
type SetApmMetadataRawParams struct {

	/* Body.

	   The freeform JSON for the cluster (should always be based on the current version retrieved from the GET)
	*/
	Body string

	/* ClusterID.

	   The APM deployment identifier.
	*/
	ClusterID string

	/* Version.

	   Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set apm metadata raw params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetApmMetadataRawParams) WithDefaults() *SetApmMetadataRawParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set apm metadata raw params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetApmMetadataRawParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the set apm metadata raw params
func (o *SetApmMetadataRawParams) WithTimeout(timeout time.Duration) *SetApmMetadataRawParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set apm metadata raw params
func (o *SetApmMetadataRawParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set apm metadata raw params
func (o *SetApmMetadataRawParams) WithContext(ctx context.Context) *SetApmMetadataRawParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set apm metadata raw params
func (o *SetApmMetadataRawParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set apm metadata raw params
func (o *SetApmMetadataRawParams) WithHTTPClient(client *http.Client) *SetApmMetadataRawParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set apm metadata raw params
func (o *SetApmMetadataRawParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the set apm metadata raw params
func (o *SetApmMetadataRawParams) WithBody(body string) *SetApmMetadataRawParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the set apm metadata raw params
func (o *SetApmMetadataRawParams) SetBody(body string) {
	o.Body = body
}

// WithClusterID adds the clusterID to the set apm metadata raw params
func (o *SetApmMetadataRawParams) WithClusterID(clusterID string) *SetApmMetadataRawParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the set apm metadata raw params
func (o *SetApmMetadataRawParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithVersion adds the version to the set apm metadata raw params
func (o *SetApmMetadataRawParams) WithVersion(version *int64) *SetApmMetadataRawParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the set apm metadata raw params
func (o *SetApmMetadataRawParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *SetApmMetadataRawParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
