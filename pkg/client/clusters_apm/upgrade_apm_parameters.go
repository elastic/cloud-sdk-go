// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_apm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpgradeApmParams creates a new UpgradeApmParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpgradeApmParams() *UpgradeApmParams {
	return &UpgradeApmParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpgradeApmParamsWithTimeout creates a new UpgradeApmParams object
// with the ability to set a timeout on a request.
func NewUpgradeApmParamsWithTimeout(timeout time.Duration) *UpgradeApmParams {
	return &UpgradeApmParams{
		timeout: timeout,
	}
}

// NewUpgradeApmParamsWithContext creates a new UpgradeApmParams object
// with the ability to set a context for a request.
func NewUpgradeApmParamsWithContext(ctx context.Context) *UpgradeApmParams {
	return &UpgradeApmParams{
		Context: ctx,
	}
}

// NewUpgradeApmParamsWithHTTPClient creates a new UpgradeApmParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpgradeApmParamsWithHTTPClient(client *http.Client) *UpgradeApmParams {
	return &UpgradeApmParams{
		HTTPClient: client,
	}
}

/* UpgradeApmParams contains all the parameters to send to the API endpoint
   for the upgrade apm operation.

   Typically these are written to a http.Request.
*/
type UpgradeApmParams struct {

	/* ClusterID.

	   The APM deployment identifier.
	*/
	ClusterID string

	/* ValidateOnly.

	   When `true`, returns the update version without performing the upgrade
	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upgrade apm params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpgradeApmParams) WithDefaults() *UpgradeApmParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upgrade apm params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpgradeApmParams) SetDefaults() {
	var (
		validateOnlyDefault = bool(false)
	)

	val := UpgradeApmParams{
		ValidateOnly: &validateOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upgrade apm params
func (o *UpgradeApmParams) WithTimeout(timeout time.Duration) *UpgradeApmParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upgrade apm params
func (o *UpgradeApmParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upgrade apm params
func (o *UpgradeApmParams) WithContext(ctx context.Context) *UpgradeApmParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upgrade apm params
func (o *UpgradeApmParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upgrade apm params
func (o *UpgradeApmParams) WithHTTPClient(client *http.Client) *UpgradeApmParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upgrade apm params
func (o *UpgradeApmParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the upgrade apm params
func (o *UpgradeApmParams) WithClusterID(clusterID string) *UpgradeApmParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the upgrade apm params
func (o *UpgradeApmParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithValidateOnly adds the validateOnly to the upgrade apm params
func (o *UpgradeApmParams) WithValidateOnly(validateOnly *bool) *UpgradeApmParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the upgrade apm params
func (o *UpgradeApmParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *UpgradeApmParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	if o.ValidateOnly != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
