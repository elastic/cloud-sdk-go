// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package clusters_apm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters apm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters apm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelApmPendingPlan(params *CancelApmPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelApmPendingPlanOK, error)

	CreateApm(params *CreateApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApmOK, *CreateApmCreated, error)

	DeleteApm(params *DeleteApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteApmOK, error)

	GetApmCluster(params *GetApmClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmClusterOK, error)

	GetApmClusterPlanActivity(params *GetApmClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmClusterPlanActivityOK, error)

	GetApmClusters(params *GetApmClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmClustersOK, error)

	GetApmMetadataRaw(params *GetApmMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmMetadataRawOK, error)

	GetApmMetadataSettings(params *GetApmMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmMetadataSettingsOK, error)

	GetApmPendingPlan(params *GetApmPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmPendingPlanOK, error)

	GetApmPlan(params *GetApmPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmPlanOK, error)

	MoveApmInstances(params *MoveApmInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveApmInstancesAccepted, error)

	MoveApmInstancesAdvanced(params *MoveApmInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveApmInstancesAdvancedAccepted, error)

	ResetApmSecretToken(params *ResetApmSecretTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetApmSecretTokenOK, error)

	RestartApm(params *RestartApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartApmAccepted, error)

	ResyncApmCluster(params *ResyncApmClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncApmClusterOK, error)

	ResyncApmClusters(params *ResyncApmClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncApmClustersAccepted, error)

	SearchApms(params *SearchApmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchApmsOK, error)

	SetApmMetadataRaw(params *SetApmMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetApmMetadataRawOK, error)

	SetApmName(params *SetApmNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetApmNameOK, error)

	ShutdownApm(params *ShutdownApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShutdownApmAccepted, error)

	StartApmInstances(params *StartApmInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmInstancesAccepted, error)

	StartApmInstancesAll(params *StartApmInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmInstancesAllAccepted, error)

	StartApmInstancesAllMaintenanceMode(params *StartApmInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmInstancesAllMaintenanceModeAccepted, error)

	StartApmMaintenanceMode(params *StartApmMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmMaintenanceModeAccepted, error)

	StopApmInstances(params *StopApmInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmInstancesAccepted, error)

	StopApmInstancesAll(params *StopApmInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmInstancesAllAccepted, error)

	StopApmInstancesAllMaintenanceMode(params *StopApmInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmInstancesAllMaintenanceModeAccepted, error)

	StopApmMaintenanceMode(params *StopApmMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmMaintenanceModeAccepted, error)

	UpdateApmMetadataSettings(params *UpdateApmMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateApmMetadataSettingsOK, error)

	UpdateApmPlan(params *UpdateApmPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateApmPlanOK, *UpdateApmPlanAccepted, error)

	UpgradeApm(params *UpgradeApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeApmAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelApmPendingPlan cancels pending plan

  DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of an APM cluster.
*/
func (a *Client) CancelApmPendingPlan(params *CancelApmPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelApmPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelApmPendingPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancel-apm-pending-plan",
		Method:             "DELETE",
		PathPattern:        "/clusters/apm/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelApmPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelApmPendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancel-apm-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateApm creates cluster

  DEPRECATED (Scheduled to be removed in the next major version): Creates an APM cluster for a given Elasticsearch cluster.
*/
func (a *Client) CreateApm(params *CreateApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateApmOK, *CreateApmCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateApmOK:
		return value, nil, nil
	case *CreateApmCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_apm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApm deletes cluster

  DEPRECATED (Scheduled to be removed in the next major version): Deletes an APM cluster.
Requires that you have already successfully issued `_shutdown` command against the cluster.
*/
func (a *Client) DeleteApm(params *DeleteApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteApmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-apm",
		Method:             "DELETE",
		PathPattern:        "/clusters/apm/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-apm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmCluster gets cluster

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for a APM cluster.
*/
func (a *Client) GetApmCluster(params *GetApmClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-cluster",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmClusterPlanActivity gets plan activity

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the current and historical plan information for a APM cluster.
*/
func (a *Client) GetApmClusterPlanActivity(params *GetApmClusterPlanActivityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmClusterPlanActivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmClusterPlanActivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-cluster-plan-activity",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/plan/activity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmClusterPlanActivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmClusterPlanActivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-cluster-plan-activity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmClusters gets clusters

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for all APM clusters.
*/
func (a *Client) GetApmClusters(params *GetApmClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-clusters",
		Method:             "GET",
		PathPattern:        "/clusters/apm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmMetadataRaw gets cluster metadata

  DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
*/
func (a *Client) GetApmMetadataRaw(params *GetApmMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmMetadataRawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-metadata-raw",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmMetadataRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-metadata-raw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmMetadataSettings gets cluster metadata settings

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
*/
func (a *Client) GetApmMetadataSettings(params *GetApmMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmMetadataSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-metadata-settings",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmMetadataSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-metadata-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmPendingPlan gets pending plan

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of an APM cluster.
*/
func (a *Client) GetApmPendingPlan(params *GetApmPendingPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmPendingPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmPendingPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-pending-plan",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/plan/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmPendingPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmPendingPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-pending-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApmPlan gets plan

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
*/
func (a *Client) GetApmPlan(params *GetApmPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetApmPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApmPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-apm-plan",
		Method:             "GET",
		PathPattern:        "/clusters/apm/{cluster_id}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApmPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApmPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-apm-plan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveApmInstances moves instances

  DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances belonging to a Apm cluster.
*/
func (a *Client) MoveApmInstances(params *MoveApmInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveApmInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveApmInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move-apm-instances",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveApmInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveApmInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-apm-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveApmInstancesAdvanced moves instances advanced

  DEPRECATED (Scheduled to be removed in the next major version): Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
*/
func (a *Client) MoveApmInstancesAdvanced(params *MoveApmInstancesAdvancedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveApmInstancesAdvancedAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveApmInstancesAdvancedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move-apm-instances-advanced",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/_move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveApmInstancesAdvancedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveApmInstancesAdvancedAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move-apm-instances-advanced: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetApmSecretToken resets token

  DEPRECATED (Scheduled to be removed in the next major version): Resets the secret token for a given APM cluster.
*/
func (a *Client) ResetApmSecretToken(params *ResetApmSecretTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetApmSecretTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetApmSecretTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reset-apm-secret-token",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_reset-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetApmSecretTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetApmSecretTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reset-apm-secret-token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartApm restarts cluster

  DEPRECATED (Scheduled to be removed in the next major version): Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
*/
func (a *Client) RestartApm(params *RestartApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartApmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartApmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restart-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestartApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartApmAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restart-apm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncApmCluster resynchronizes cluster

  DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected APM cluster.
*/
func (a *Client) ResyncApmCluster(params *ResyncApmClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncApmClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncApmClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-apm-cluster",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncApmClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncApmClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-apm-cluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResyncApmClusters resynchronizes clusters

  DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all APM clusters.
*/
func (a *Client) ResyncApmClusters(params *ResyncApmClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResyncApmClustersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResyncApmClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resync-apm-clusters",
		Method:             "POST",
		PathPattern:        "/clusters/apm/_resync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResyncApmClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResyncApmClustersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resync-apm-clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchApms searches clusters

  DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for all Apm clusters that match a given query.
*/
func (a *Client) SearchApms(params *SearchApmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchApmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchApmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search-apms",
		Method:             "POST",
		PathPattern:        "/clusters/apm/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchApmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchApmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search-apms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetApmMetadataRaw sets cluster metadata

  DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance.
Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
*/
func (a *Client) SetApmMetadataRaw(params *SetApmMetadataRawParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetApmMetadataRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetApmMetadataRawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-apm-metadata-raw",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetApmMetadataRawReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetApmMetadataRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-apm-metadata-raw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetApmName sets cluster name

  DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the APM instance.
*/
func (a *Client) SetApmName(params *SetApmNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetApmNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetApmNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set-apm-name",
		Method:             "PUT",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/name/{new_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetApmNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetApmNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set-apm-name: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutdownApm shuts down cluster

  DEPRECATED (Scheduled to be removed in the next major version): Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
*/
func (a *Client) ShutdownApm(params *ShutdownApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShutdownApmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownApmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "shutdown-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShutdownApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownApmAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown-apm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartApmInstances starts instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts the instances belonging to a Apm cluster.
*/
func (a *Client) StartApmInstances(params *StartApmInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-apm-instances",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartApmInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-apm-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartApmInstancesAll starts all instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts all the instances belonging to a Apm cluster.
*/
func (a *Client) StartApmInstancesAll(params *StartApmInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmInstancesAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-apm-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartApmInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-apm-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartApmInstancesAllMaintenanceMode starts maintenance mode all instances

  DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode of all instances belonging to a Apm cluster.
*/
func (a *Client) StartApmInstancesAllMaintenanceMode(params *StartApmInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmInstancesAllMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-apm-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartApmInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-apm-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartApmMaintenanceMode starts maintenance mode

  DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode of instances belonging to a Apm cluster.
*/
func (a *Client) StartApmMaintenanceMode(params *StartApmMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartApmMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartApmMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "start-apm-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartApmMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartApmMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for start-apm-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopApmInstances stops instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops the instances belonging to a Apm cluster.
*/
func (a *Client) StopApmInstances(params *StopApmInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmInstancesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-apm-instances",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopApmInstancesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-apm-instances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopApmInstancesAll stops all instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops all the instances belonging to a Apm cluster.
*/
func (a *Client) StopApmInstancesAll(params *StopApmInstancesAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmInstancesAllAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmInstancesAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-apm-instances-all",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmInstancesAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopApmInstancesAllAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-apm-instances-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopApmInstancesAllMaintenanceMode stops maintenance mode all instances

  DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode of all instances belonging to a Apm cluster.
*/
func (a *Client) StopApmInstancesAllMaintenanceMode(params *StopApmInstancesAllMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmInstancesAllMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmInstancesAllMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-apm-instances-all-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmInstancesAllMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopApmInstancesAllMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-apm-instances-all-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopApmMaintenanceMode stops maintenance mode

  DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode of instances belonging to a Apm cluster.
*/
func (a *Client) StopApmMaintenanceMode(params *StopApmMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopApmMaintenanceModeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopApmMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stop-apm-maintenance-mode",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopApmMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopApmMaintenanceModeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stop-apm-maintenance-mode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApmMetadataSettings updates cluster metadata settings

  DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
*/
func (a *Client) UpdateApmMetadataSettings(params *UpdateApmMetadataSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateApmMetadataSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApmMetadataSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-apm-metadata-settings",
		Method:             "PATCH",
		PathPattern:        "/clusters/apm/{cluster_id}/metadata/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApmMetadataSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateApmMetadataSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-apm-metadata-settings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateApmPlan updates plan

  DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of an existing Apm cluster.
*/
func (a *Client) UpdateApmPlan(params *UpdateApmPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateApmPlanOK, *UpdateApmPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateApmPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-apm-plan",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateApmPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateApmPlanOK:
		return value, nil, nil
	case *UpdateApmPlanAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters_apm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpgradeApm upgrades cluster

  DEPRECATED (Scheduled to be removed in the next major version): Upgrades a running cluster.
*/
func (a *Client) UpgradeApm(params *UpgradeApmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeApmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeApmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgrade-apm",
		Method:             "POST",
		PathPattern:        "/clusters/apm/{cluster_id}/_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeApmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeApmAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrade-apm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
