// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package deployments_notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteDeploymentNoteParams creates a new DeleteDeploymentNoteParams object
// with the default values initialized.
func NewDeleteDeploymentNoteParams() *DeleteDeploymentNoteParams {
	var ()
	return &DeleteDeploymentNoteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDeploymentNoteParamsWithTimeout creates a new DeleteDeploymentNoteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDeploymentNoteParamsWithTimeout(timeout time.Duration) *DeleteDeploymentNoteParams {
	var ()
	return &DeleteDeploymentNoteParams{

		timeout: timeout,
	}
}

// NewDeleteDeploymentNoteParamsWithContext creates a new DeleteDeploymentNoteParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDeploymentNoteParamsWithContext(ctx context.Context) *DeleteDeploymentNoteParams {
	var ()
	return &DeleteDeploymentNoteParams{

		Context: ctx,
	}
}

// NewDeleteDeploymentNoteParamsWithHTTPClient creates a new DeleteDeploymentNoteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDeploymentNoteParamsWithHTTPClient(client *http.Client) *DeleteDeploymentNoteParams {
	var ()
	return &DeleteDeploymentNoteParams{
		HTTPClient: client,
	}
}

/*DeleteDeploymentNoteParams contains all the parameters to send to the API endpoint
for the delete deployment note operation typically these are written to a http.Request
*/
type DeleteDeploymentNoteParams struct {

	/*DeploymentID
	  Identifier for the deployment

	*/
	DeploymentID string
	/*NoteID
	  Identifier of the note to be deleted

	*/
	NoteID string
	/*Version
	  If specified then checks for conflicts against the version of the deployment note

	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete deployment note params
func (o *DeleteDeploymentNoteParams) WithTimeout(timeout time.Duration) *DeleteDeploymentNoteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete deployment note params
func (o *DeleteDeploymentNoteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete deployment note params
func (o *DeleteDeploymentNoteParams) WithContext(ctx context.Context) *DeleteDeploymentNoteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete deployment note params
func (o *DeleteDeploymentNoteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete deployment note params
func (o *DeleteDeploymentNoteParams) WithHTTPClient(client *http.Client) *DeleteDeploymentNoteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete deployment note params
func (o *DeleteDeploymentNoteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeploymentID adds the deploymentID to the delete deployment note params
func (o *DeleteDeploymentNoteParams) WithDeploymentID(deploymentID string) *DeleteDeploymentNoteParams {
	o.SetDeploymentID(deploymentID)
	return o
}

// SetDeploymentID adds the deploymentId to the delete deployment note params
func (o *DeleteDeploymentNoteParams) SetDeploymentID(deploymentID string) {
	o.DeploymentID = deploymentID
}

// WithNoteID adds the noteID to the delete deployment note params
func (o *DeleteDeploymentNoteParams) WithNoteID(noteID string) *DeleteDeploymentNoteParams {
	o.SetNoteID(noteID)
	return o
}

// SetNoteID adds the noteId to the delete deployment note params
func (o *DeleteDeploymentNoteParams) SetNoteID(noteID string) {
	o.NoteID = noteID
}

// WithVersion adds the version to the delete deployment note params
func (o *DeleteDeploymentNoteParams) WithVersion(version *int64) *DeleteDeploymentNoteParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete deployment note params
func (o *DeleteDeploymentNoteParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDeploymentNoteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param deployment_id
	if err := r.SetPathParam("deployment_id", o.DeploymentID); err != nil {
		return err
	}

	// path param note_id
	if err := r.SetPathParam("note_id", o.NoteID); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
