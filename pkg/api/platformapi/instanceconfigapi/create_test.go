// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package instanceconfigapi

import (
	"errors"
	"net/http"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/elastic/cloud-sdk-go/pkg/api"
	"github.com/elastic/cloud-sdk-go/pkg/api/apierror"
	"github.com/elastic/cloud-sdk-go/pkg/api/mock"
	"github.com/elastic/cloud-sdk-go/pkg/models"
	"github.com/elastic/cloud-sdk-go/pkg/multierror"
	"github.com/elastic/cloud-sdk-go/pkg/util/ec"
)

func TestCreate(t *testing.T) {
	type args struct {
		params CreateParams
	}
	tests := []struct {
		name string
		args args
		want *models.VersionedIDResponse
		err  string
	}{
		{
			name: "Create Succeeds",
			args: args{params: CreateParams{
				Region: "us-east-1",
				API: api.NewMock(mock.Response{
					Response: http.Response{
						Body:       mock.NewStringBody(`{"id": "an autogenerated id"}`),
						StatusCode: 201,
					},
					Assert: &mock.RequestAssertion{
						Header: api.DefaultWriteMockHeaders,
						Method: "POST",
						Host:   api.DefaultMockHost,
						Body:   mock.NewStringBody(`{"description":"Instance configuration to be used for Kibana","discrete_sizes":{"default_size":1024,"resource":"memory","sizes":[1024,2048,4096,8192]},"instance_type":"kibana","name":"kibana","storage_multiplier":4}` + "\n"),
						Path:   "/api/v1/regions/us-east-1/platform/configuration/instances",
					},
				}),
				Config: &models.InstanceConfiguration{
					Description:       "Instance configuration to be used for Kibana",
					Name:              ec.String("kibana"),
					InstanceType:      "kibana",
					StorageMultiplier: float64(4),
					NodeTypes:         []string{},
					DiscreteSizes: &models.DiscreteSizes{
						DefaultSize: 1024,
						Resource:    "memory",
						Sizes: []int32{
							1024,
							2048,
							4096,
							8192,
						},
					},
				},
			}},
			want: &models.VersionedIDResponse{ID: ec.String("an autogenerated id")},
		},
		{
			name: "Create Succeeds specifying an instance configuration ID",
			args: args{params: CreateParams{
				Region: "us-east-1",
				API: api.NewMock(mock.Response{
					Response: http.Response{
						Body:       mock.NewStringBody(`{"id": "kibana"}`),
						StatusCode: 200,
					},
					Assert: &mock.RequestAssertion{
						Header: api.DefaultWriteMockHeaders,
						Method: "PUT",
						Host:   api.DefaultMockHost,
						Body:   mock.NewStringBody(`{"description":"Instance configuration to be used for Kibana","discrete_sizes":{"default_size":1024,"resource":"memory","sizes":[1024,2048,4096,8192]},"id":"kibana","instance_type":"kibana","name":"kibana","storage_multiplier":4}` + "\n"),
						Path:   "/api/v1/regions/us-east-1/platform/configuration/instances/kibana",
					},
				}),
				Config: &models.InstanceConfiguration{
					ID:                "kibana",
					Description:       "Instance configuration to be used for Kibana",
					Name:              ec.String("kibana"),
					InstanceType:      "kibana",
					StorageMultiplier: float64(4),
					NodeTypes:         []string{},
					DiscreteSizes: &models.DiscreteSizes{
						DefaultSize: 1024,
						Resource:    "memory",
						Sizes: []int32{
							1024,
							2048,
							4096,
							8192,
						},
					},
				}},
			},
			want: &models.VersionedIDResponse{ID: ec.String("kibana")},
		},
		{
			name: "Create fails on API error",
			args: args{params: CreateParams{
				Region: "us-east-1",
				Config: &models.InstanceConfiguration{
					ID:                "kibana",
					Description:       "Instance configuration to be used for Kibana",
					Name:              ec.String("kibana"),
					InstanceType:      "kibana",
					StorageMultiplier: float64(4),
					NodeTypes:         []string{},
					DiscreteSizes: &models.DiscreteSizes{
						DefaultSize: 1024,
						Resource:    "memory",
						Sizes: []int32{
							1024,
							2048,
							4096,
							8192,
						},
					},
				},
				API: api.NewMock(mock.New500Response(mock.NewStringBody(`{"error": "some error"}`))),
			}},
			err: `{"error": "some error"}`,
		},
		{
			name: "Create fails on parameter validation failure",
			err: multierror.NewPrefixed("invalid instance config create params",
				apierror.ErrMissingAPI,
				errors.New("config not specified and is required for the operation"),
				errors.New("region not specified and is required for this operation"),
			).Error(),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Create(tt.args.params)
			if err != nil && !assert.EqualError(t, err, tt.err) {
				t.Error(err)
			}
			assert.Equal(t, tt.want, got)
		})
	}
}
