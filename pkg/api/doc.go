// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Package api provides an way to interact with Elastic Cloud APIs, including
// ESS, ECE and ESSP.
//
// The preferred way to interact with the Elastic Cloud APIs is by creating a
// new API pointer by using the "api.NewAPI()" constructor.
// To do so, you'll need to pass an "auth.Writer" as the API.Config parameter,
// and an "http.Client", optionally the API endpoint (Host), if not specified
// it defaults to ESS API.
//
// To create a new "auth.Writer", you can use one of (APIKey or UserLogin)
// from the auth package ("github.com/elastic/cloud-sdk-go/auth").
//
// Optionally, "auth.NewAuthWriter()" can be used in applications where the
// credentials are specified by the user via environment variables or flags.
//
//  ess, err := api.NewAPI(api.Config{
// 	 Client:        new(http.Client),
// 	 AuthWriter:    auth.APIKey("some-apikey"),
//  })
//  if err != nil {
// 	 panic(err)
//  }
//
// List the user's deployments via the `deploymentapi` package (Recommended).
//
//  res, err := deploymentapi.List(deploymentapi.ListParams{API: ess.V1API})
//  if err != nil {
// 	 panic(err)
//  }
//
//  var encoder = json.NewEncoder(os.Stdout)
//  if err := encoder.Encode(res); err != nil {
// 	 panic(err)
//  }
//
// List the user's deployments using the autogenerated APIs.
//
//  res, err = ess.V1API.Deployments.ListDeployments(
// 	 deployments.NewListDeploymentsParams(),
// 	 ess.AuthWriter,
//  )
//  if err != nil {
//	 // Errors returned by the auto-generated API should be unpacked
//	 // with `api.UnwrapError`.
// 	 panic(api.UnwrapError(err))
//  }
//
//  if err := encoder.Encode(res.Payload); err != nil {
// 	 panic(err)
//  }
//
// APIs which are region-bound, need that region to be specified as a
// `context.Context` in the API operation when using the auto-generated APIs
// directly.
//
//  res, err := ess.V1API.Stack.GetVersionStacks(
// 	stack.NewGetVersionStacksParams().
// 	 	WithContext(api.WithRegion(context.Background(), "us-east-1")),
//   	ess.AuthWriter,
//  )
//  if err != nil {
// 	 panic(api.UnwrapError(err))
//  }
//  if err := encoder.Encode(res.Payload); err != nil {
// 	 panic(err)
//  }
//
package api
