// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mockery v2.2.1. DO NOT EDIT.

package logging

import mock "github.com/stretchr/testify/mock"

// LoggerDispatcher is an autogenerated mock type for the Dispatcher type
type LoggerDispatcher struct {
	mock.Mock
}

// Add provides a mock function with given fields: loggers
func (_m *LoggerDispatcher) Add(loggers ...Logger) {
	_va := make([]interface{}, len(loggers))
	for _i := range loggers {
		_va[_i] = loggers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Dispatch provides a mock function with given fields: msg
func (_m *LoggerDispatcher) Dispatch(msg LogMessage) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(LogMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithLogLevel provides a mock function with given fields: level
func (_m *LoggerDispatcher) WithLogLevel(level LogLevel) Dispatcher {
	ret := _m.Called(level)

	var r0 Dispatcher
	if rf, ok := ret.Get(0).(func(LogLevel) Dispatcher); ok {
		r0 = rf(level)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Dispatcher)
		}
	}

	return r0
}
