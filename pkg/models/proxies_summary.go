// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxiesSummary Summarized information about proxies.
//
// swagger:model ProxiesSummary
type ProxiesSummary struct {

	// Expected number of proxies
	// Required: true
	ExpectedProxiesCount *int32 `json:"expected_proxies_count"`

	// Whether all proxies are healthy
	// Required: true
	Healthy *bool `json:"healthy"`

	// Summarized information about each proxy
	// Required: true
	Proxies []*ProxySummary `json:"proxies"`

	// Total number of proxies
	// Required: true
	ProxiesCount *int32 `json:"proxies_count"`
}

// Validate validates this proxies summary
func (m *ProxiesSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpectedProxiesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxiesCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxiesSummary) validateExpectedProxiesCount(formats strfmt.Registry) error {

	if err := validate.Required("expected_proxies_count", "body", m.ExpectedProxiesCount); err != nil {
		return err
	}

	return nil
}

func (m *ProxiesSummary) validateHealthy(formats strfmt.Registry) error {

	if err := validate.Required("healthy", "body", m.Healthy); err != nil {
		return err
	}

	return nil
}

func (m *ProxiesSummary) validateProxies(formats strfmt.Registry) error {

	if err := validate.Required("proxies", "body", m.Proxies); err != nil {
		return err
	}

	for i := 0; i < len(m.Proxies); i++ {
		if swag.IsZero(m.Proxies[i]) { // not required
			continue
		}

		if m.Proxies[i] != nil {
			if err := m.Proxies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proxies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProxiesSummary) validateProxiesCount(formats strfmt.Registry) error {

	if err := validate.Required("proxies_count", "body", m.ProxiesCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this proxies summary based on the context it is used
func (m *ProxiesSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProxies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxiesSummary) contextValidateProxies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Proxies); i++ {

		if m.Proxies[i] != nil {
			if err := m.Proxies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proxies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxiesSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxiesSummary) UnmarshalBinary(b []byte) error {
	var res ProxiesSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
