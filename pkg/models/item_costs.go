// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemCosts Detailed costs associated to an Elastic Cloud Resource for an organization. All of the costs are expressed in Elastic Consumption Unit (ECU).
//
// swagger:model ItemCosts
type ItemCosts struct {

	// Resource usage in hours
	// Required: true
	Hours *int64 `json:"hours"`

	// Number of instances
	// Required: true
	InstanceCount *int32 `json:"instance_count"`

	// Kind of resource
	// Required: true
	Kind *string `json:"kind"`

	// Resource name
	// Required: true
	Name *string `json:"name"`

	// Period
	// Required: true
	Period *Period `json:"period"`

	// Resource price
	// Required: true
	Price *float64 `json:"price"`

	// Price per hour
	// Required: true
	PricePerHour *float64 `json:"price_per_hour"`

	// Stock Keeping Unit (SKU)
	// Required: true
	Sku *string `json:"sku"`
}

// Validate validates this item costs
func (m *ItemCosts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricePerHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemCosts) validateHours(formats strfmt.Registry) error {

	if err := validate.Required("hours", "body", m.Hours); err != nil {
		return err
	}

	return nil
}

func (m *ItemCosts) validateInstanceCount(formats strfmt.Registry) error {

	if err := validate.Required("instance_count", "body", m.InstanceCount); err != nil {
		return err
	}

	return nil
}

func (m *ItemCosts) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *ItemCosts) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ItemCosts) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *ItemCosts) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *ItemCosts) validatePricePerHour(formats strfmt.Registry) error {

	if err := validate.Required("price_per_hour", "body", m.PricePerHour); err != nil {
		return err
	}

	return nil
}

func (m *ItemCosts) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this item costs based on the context it is used
func (m *ItemCosts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemCosts) contextValidatePeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.Period != nil {
		if err := m.Period.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemCosts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemCosts) UnmarshalBinary(b []byte) error {
	var res ItemCosts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
