// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficFilterEgressRule The rule detail for a traffic filter egress rule.
//
// swagger:model TrafficFilterEgressRule
type TrafficFilterEgressRule struct {

	// A list of target ports for an egress rule
	Ports []int32 `json:"ports"`

	// The target protocol for an egress rule
	// Required: true
	// Enum: [all tcp udp]
	Protocol *string `json:"protocol"`

	// Allowed traffic filter egress target: IP address or CIDR mask
	// Required: true
	Target *string `json:"target"`
}

// Validate validates this traffic filter egress rule
func (m *TrafficFilterEgressRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var trafficFilterEgressRuleTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trafficFilterEgressRuleTypeProtocolPropEnum = append(trafficFilterEgressRuleTypeProtocolPropEnum, v)
	}
}

const (

	// TrafficFilterEgressRuleProtocolAll captures enum value "all"
	TrafficFilterEgressRuleProtocolAll string = "all"

	// TrafficFilterEgressRuleProtocolTCP captures enum value "tcp"
	TrafficFilterEgressRuleProtocolTCP string = "tcp"

	// TrafficFilterEgressRuleProtocolUDP captures enum value "udp"
	TrafficFilterEgressRuleProtocolUDP string = "udp"
)

// prop value enum
func (m *TrafficFilterEgressRule) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, trafficFilterEgressRuleTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TrafficFilterEgressRule) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *TrafficFilterEgressRule) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this traffic filter egress rule based on context it is used
func (m *TrafficFilterEgressRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficFilterEgressRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficFilterEgressRule) UnmarshalBinary(b []byte) error {
	var res TrafficFilterEgressRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
