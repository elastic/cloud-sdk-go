// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalDeploymentTemplateRegion Region-specific details about a template.
//
// swagger:model GlobalDeploymentTemplateRegion
type GlobalDeploymentTemplateRegion struct {

	// The (region-specific) ID of the deployment template.
	// Required: true
	DeploymentTemplateID *string `json:"deployment_template_id"`

	// The Kibana Deeplink for this type of deployment.
	KibanaDeeplink []*KibanaDeeplink `json:"kibana_deeplink"`

	// The region identifier.
	// Required: true
	RegionID *string `json:"region_id"`

	// Versions supported in this region.
	// Required: true
	Versions []string `json:"versions"`
}

// Validate validates this global deployment template region
func (m *GlobalDeploymentTemplateRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKibanaDeeplink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalDeploymentTemplateRegion) validateDeploymentTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("deployment_template_id", "body", m.DeploymentTemplateID); err != nil {
		return err
	}

	return nil
}

func (m *GlobalDeploymentTemplateRegion) validateKibanaDeeplink(formats strfmt.Registry) error {
	if swag.IsZero(m.KibanaDeeplink) { // not required
		return nil
	}

	for i := 0; i < len(m.KibanaDeeplink); i++ {
		if swag.IsZero(m.KibanaDeeplink[i]) { // not required
			continue
		}

		if m.KibanaDeeplink[i] != nil {
			if err := m.KibanaDeeplink[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kibana_deeplink" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalDeploymentTemplateRegion) validateRegionID(formats strfmt.Registry) error {

	if err := validate.Required("region_id", "body", m.RegionID); err != nil {
		return err
	}

	return nil
}

func (m *GlobalDeploymentTemplateRegion) validateVersions(formats strfmt.Registry) error {

	if err := validate.Required("versions", "body", m.Versions); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this global deployment template region based on the context it is used
func (m *GlobalDeploymentTemplateRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKibanaDeeplink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalDeploymentTemplateRegion) contextValidateKibanaDeeplink(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KibanaDeeplink); i++ {

		if m.KibanaDeeplink[i] != nil {
			if err := m.KibanaDeeplink[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kibana_deeplink" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalDeploymentTemplateRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalDeploymentTemplateRegion) UnmarshalBinary(b []byte) error {
	var res GlobalDeploymentTemplateRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
