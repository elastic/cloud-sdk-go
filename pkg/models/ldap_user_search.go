// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LdapUserSearch The user search configuration for the Elasticsearch security LDAP realm.
//
// swagger:model LdapUserSearch
type LdapUserSearch struct {

	// Specifies a container DN to search for users
	BaseDn string `json:"base_dn,omitempty"`

	// Specifies the filter to search the directory and match an entry with the username provided by the user. Defaults to (uid={0}). {0} is substituted with the username provided when searching.
	Filter string `json:"filter,omitempty"`

	// The scope of the user search. Valid values are sub_tree, one_level, or base. one_level only searches objects directly contained in the base_dn. sub_tree searches all objects contained in base_dn. base specifies that the base_dn is the user object, and that it is the only user considered. Defaults to sub_tree.
	// Enum: [sub_tree one_level base]
	Scope string `json:"scope,omitempty"`
}

// Validate validates this ldap user search
func (m *LdapUserSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ldapUserSearchTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sub_tree","one_level","base"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ldapUserSearchTypeScopePropEnum = append(ldapUserSearchTypeScopePropEnum, v)
	}
}

const (

	// LdapUserSearchScopeSubTree captures enum value "sub_tree"
	LdapUserSearchScopeSubTree string = "sub_tree"

	// LdapUserSearchScopeOneLevel captures enum value "one_level"
	LdapUserSearchScopeOneLevel string = "one_level"

	// LdapUserSearchScopeBase captures enum value "base"
	LdapUserSearchScopeBase string = "base"
)

// prop value enum
func (m *LdapUserSearch) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ldapUserSearchTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LdapUserSearch) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ldap user search based on context it is used
func (m *LdapUserSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LdapUserSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LdapUserSearch) UnmarshalBinary(b []byte) error {
	var res LdapUserSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
