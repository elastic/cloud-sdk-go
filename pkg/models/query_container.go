// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryContainer The container for all of the allowed Elasticsearch queries. Specify only one property each time.
// swagger:model QueryContainer
type QueryContainer struct {

	// bool
	Bool *BoolQuery `json:"bool,omitempty"`

	// exists
	Exists *ExistsQuery `json:"exists,omitempty"`

	// match
	Match map[string]MatchQuery `json:"match,omitempty"`

	// match all
	MatchAll MatchAllQuery `json:"match_all,omitempty"`

	// match none
	MatchNone MatchNoneQuery `json:"match_none,omitempty"`

	// nested
	Nested *NestedQuery `json:"nested,omitempty"`

	// prefix
	Prefix map[string]PrefixQuery `json:"prefix,omitempty"`

	// query string
	QueryString *QueryStringQuery `json:"query_string,omitempty"`

	// range
	Range map[string]RangeQuery `json:"range,omitempty"`

	// term
	Term map[string]TermQuery `json:"term,omitempty"`
}

// Validate validates this query container
func (m *QueryContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryContainer) validateBool(formats strfmt.Registry) error {

	if swag.IsZero(m.Bool) { // not required
		return nil
	}

	if m.Bool != nil {
		if err := m.Bool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bool")
			}
			return err
		}
	}

	return nil
}

func (m *QueryContainer) validateExists(formats strfmt.Registry) error {

	if swag.IsZero(m.Exists) { // not required
		return nil
	}

	if m.Exists != nil {
		if err := m.Exists.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exists")
			}
			return err
		}
	}

	return nil
}

func (m *QueryContainer) validateMatch(formats strfmt.Registry) error {

	if swag.IsZero(m.Match) { // not required
		return nil
	}

	for k := range m.Match {

		if err := validate.Required("match"+"."+k, "body", m.Match[k]); err != nil {
			return err
		}
		if val, ok := m.Match[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *QueryContainer) validateNested(formats strfmt.Registry) error {

	if swag.IsZero(m.Nested) { // not required
		return nil
	}

	if m.Nested != nil {
		if err := m.Nested.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nested")
			}
			return err
		}
	}

	return nil
}

func (m *QueryContainer) validatePrefix(formats strfmt.Registry) error {

	if swag.IsZero(m.Prefix) { // not required
		return nil
	}

	for k := range m.Prefix {

		if err := validate.Required("prefix"+"."+k, "body", m.Prefix[k]); err != nil {
			return err
		}
		if val, ok := m.Prefix[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *QueryContainer) validateQueryString(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryString) { // not required
		return nil
	}

	if m.QueryString != nil {
		if err := m.QueryString.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_string")
			}
			return err
		}
	}

	return nil
}

func (m *QueryContainer) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	for k := range m.Range {

		if err := validate.Required("range"+"."+k, "body", m.Range[k]); err != nil {
			return err
		}
		if val, ok := m.Range[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *QueryContainer) validateTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.Term) { // not required
		return nil
	}

	for k := range m.Term {

		if err := validate.Required("term"+"."+k, "body", m.Term[k]); err != nil {
			return err
		}
		if val, ok := m.Term[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryContainer) UnmarshalBinary(b []byte) error {
	var res QueryContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
