// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainersEntryOptions Options for a ContainersEntry belonging to a role
//
// swagger:model ContainersEntryOptions
type ContainersEntryOptions struct {

	// ZooKeeper ACLs associated with this allocation
	// Required: true
	Acls []*ContainersEntryOptionsACL `json:"acls"`

	// ZooKeeper Auths associated with this allocation
	// Required: true
	Auths []*ContainersEntryOptionsAuth `json:"auths"`

	// Secret shared between the containers that are part of this container set.
	ContainerSetSecret string `json:"container_set_secret,omitempty"`

	// Whether this allocation is active and should be created.
	// Required: true
	Enabled *bool `json:"enabled"`

	// A named feature flag to check whether this container is enabled or not
	EnabledByNamedFeatureFlag string `json:"enabled_by_named_feature_flag,omitempty"`

	// Allocation-specific overrides for the allocated containers
	Overrides *ContainersEntryOptionsOverrides `json:"overrides,omitempty"`

	// Secret shared between the runners that have containers in this container set allocated.
	RunnersSecret string `json:"runners_secret,omitempty"`
}

// Validate validates this containers entry options
func (m *ContainersEntryOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainersEntryOptions) validateAcls(formats strfmt.Registry) error {

	if err := validate.Required("acls", "body", m.Acls); err != nil {
		return err
	}

	for i := 0; i < len(m.Acls); i++ {
		if swag.IsZero(m.Acls[i]) { // not required
			continue
		}

		if m.Acls[i] != nil {
			if err := m.Acls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContainersEntryOptions) validateAuths(formats strfmt.Registry) error {

	if err := validate.Required("auths", "body", m.Auths); err != nil {
		return err
	}

	for i := 0; i < len(m.Auths); i++ {
		if swag.IsZero(m.Auths[i]) { // not required
			continue
		}

		if m.Auths[i] != nil {
			if err := m.Auths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContainersEntryOptions) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ContainersEntryOptions) validateOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.Overrides) { // not required
		return nil
	}

	if m.Overrides != nil {
		if err := m.Overrides.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrides")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this containers entry options based on the context it is used
func (m *ContainersEntryOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainersEntryOptions) contextValidateAcls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Acls); i++ {

		if m.Acls[i] != nil {
			if err := m.Acls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContainersEntryOptions) contextValidateAuths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Auths); i++ {

		if m.Auths[i] != nil {
			if err := m.Auths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContainersEntryOptions) contextValidateOverrides(ctx context.Context, formats strfmt.Registry) error {

	if m.Overrides != nil {
		if err := m.Overrides.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrides")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainersEntryOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainersEntryOptions) UnmarshalBinary(b []byte) error {
	var res ContainersEntryOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
