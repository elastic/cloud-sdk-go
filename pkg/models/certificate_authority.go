// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateAuthority The certificate authority used to sign the certificates of this deployment
//
// swagger:model CertificateAuthority
type CertificateAuthority struct {

	// The certificates used by this certificate authority. The active certificate is the one that has been used to sign the current certificates of the Elasticsearch instances. All others are either certificates used in the past or certificates that will be used in the future when the currently active certificate expires.
	// Required: true
	PublicCertificates []*PublicCertificate `json:"public_certificates"`

	// The trust restriction expression to use that would provide trust with the Elasticsearch nodes of this deployment
	// Required: true
	RecommendedTrustRestriction *string `json:"recommended_trust_restriction"`
}

// Validate validates this certificate authority
func (m *CertificateAuthority) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedTrustRestriction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAuthority) validatePublicCertificates(formats strfmt.Registry) error {

	if err := validate.Required("public_certificates", "body", m.PublicCertificates); err != nil {
		return err
	}

	for i := 0; i < len(m.PublicCertificates); i++ {
		if swag.IsZero(m.PublicCertificates[i]) { // not required
			continue
		}

		if m.PublicCertificates[i] != nil {
			if err := m.PublicCertificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("public_certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("public_certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateAuthority) validateRecommendedTrustRestriction(formats strfmt.Registry) error {

	if err := validate.Required("recommended_trust_restriction", "body", m.RecommendedTrustRestriction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this certificate authority based on the context it is used
func (m *CertificateAuthority) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAuthority) contextValidatePublicCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PublicCertificates); i++ {

		if m.PublicCertificates[i] != nil {
			if err := m.PublicCertificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("public_certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("public_certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateAuthority) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateAuthority) UnmarshalBinary(b []byte) error {
	var res CertificateAuthority
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
