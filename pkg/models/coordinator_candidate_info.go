// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CoordinatorCandidateInfo Summarized information about a coordinator candidate.
//
// swagger:model CoordinatorCandidateInfo
type CoordinatorCandidateInfo struct {

	// Zookeeper ACL of nodes this coordinator candidate is allowed to read
	// Required: true
	ACL *ZkACL `json:"acl"`

	// Attributes of this coordinator candidate
	// Required: true
	Attributes map[string]string `json:"attributes"`

	// Zookeeper server identifier corresponding to this coordinator candidate
	ID int32 `json:"id,omitempty"`

	// Name of this coordinator candidate.
	// Required: true
	Name *string `json:"name"`

	// Public hostname of this coordinator candidate
	// Required: true
	PublicHostname *string `json:"public_hostname"`

	// State of the candidate
	// Required: true
	// Enum: [accepted pending]
	State *string `json:"state"`
}

// Validate validates this coordinator candidate info
func (m *CoordinatorCandidateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoordinatorCandidateInfo) validateACL(formats strfmt.Registry) error {

	if err := validate.Required("acl", "body", m.ACL); err != nil {
		return err
	}

	if m.ACL != nil {
		if err := m.ACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acl")
			}
			return err
		}
	}

	return nil
}

func (m *CoordinatorCandidateInfo) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

func (m *CoordinatorCandidateInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CoordinatorCandidateInfo) validatePublicHostname(formats strfmt.Registry) error {

	if err := validate.Required("public_hostname", "body", m.PublicHostname); err != nil {
		return err
	}

	return nil
}

var coordinatorCandidateInfoTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accepted","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coordinatorCandidateInfoTypeStatePropEnum = append(coordinatorCandidateInfoTypeStatePropEnum, v)
	}
}

const (

	// CoordinatorCandidateInfoStateAccepted captures enum value "accepted"
	CoordinatorCandidateInfoStateAccepted string = "accepted"

	// CoordinatorCandidateInfoStatePending captures enum value "pending"
	CoordinatorCandidateInfoStatePending string = "pending"
)

// prop value enum
func (m *CoordinatorCandidateInfo) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, coordinatorCandidateInfoTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CoordinatorCandidateInfo) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this coordinator candidate info based on the context it is used
func (m *CoordinatorCandidateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CoordinatorCandidateInfo) contextValidateACL(ctx context.Context, formats strfmt.Registry) error {

	if m.ACL != nil {
		if err := m.ACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acl")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CoordinatorCandidateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CoordinatorCandidateInfo) UnmarshalBinary(b []byte) error {
	var res CoordinatorCandidateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
