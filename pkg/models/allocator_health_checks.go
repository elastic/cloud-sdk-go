// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AllocatorHealthChecks The checks performed to determine if an allocator is healthy or not.
//
// swagger:model AllocatorHealthChecks
type AllocatorHealthChecks struct {

	// Whether the allocator has allocated instances
	// Required: true
	HasInstances *bool `json:"has_instances"`

	// Whether the allocator is connected to zk or not
	// Required: true
	IsConnectedToZk *bool `json:"is_connected_to_zk"`

	// Check performed by the allocator to figure out if docker is healthy
	// Required: true
	IsDockerHealthy *bool `json:"is_docker_healthy"`
}

// Validate validates this allocator health checks
func (m *AllocatorHealthChecks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHasInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsConnectedToZk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDockerHealthy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocatorHealthChecks) validateHasInstances(formats strfmt.Registry) error {

	if err := validate.Required("has_instances", "body", m.HasInstances); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorHealthChecks) validateIsConnectedToZk(formats strfmt.Registry) error {

	if err := validate.Required("is_connected_to_zk", "body", m.IsConnectedToZk); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorHealthChecks) validateIsDockerHealthy(formats strfmt.Registry) error {

	if err := validate.Required("is_docker_healthy", "body", m.IsDockerHealthy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this allocator health checks based on context it is used
func (m *AllocatorHealthChecks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocatorHealthChecks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocatorHealthChecks) UnmarshalBinary(b []byte) error {
	var res AllocatorHealthChecks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
