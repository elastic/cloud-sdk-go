// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Elasticsearch Holds diagnostics for an Elasticsearch cluster
//
// swagger:model Elasticsearch
type Elasticsearch struct {

	// The backend plan as JSON
	// Required: true
	BackendPlan interface{} `json:"backend_plan"`

	// The human readable name for the cluster (defaults to the generated cluster id if not specified)
	// Required: true
	DisplayName *string `json:"display_name"`

	// A locally-unique user-specified id
	// Required: true
	RefID *string `json:"ref_id"`
}

// Validate validates this elasticsearch
func (m *Elasticsearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackendPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Elasticsearch) validateBackendPlan(formats strfmt.Registry) error {

	if m.BackendPlan == nil {
		return errors.Required("backend_plan", "body", nil)
	}

	return nil
}

func (m *Elasticsearch) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Elasticsearch) validateRefID(formats strfmt.Registry) error {

	if err := validate.Required("ref_id", "body", m.RefID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this elasticsearch based on context it is used
func (m *Elasticsearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Elasticsearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Elasticsearch) UnmarshalBinary(b []byte) error {
	var res Elasticsearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
