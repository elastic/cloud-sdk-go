// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticsearchClusterInfo The information for an Elasticsearch cluster.
//
// swagger:model ElasticsearchClusterInfo
type ElasticsearchClusterInfo struct {

	// associated apm clusters
	// Required: true
	AssociatedApmClusters []*ApmSubInfo `json:"associated_apm_clusters"`

	// associated appsearch clusters
	// Required: true
	AssociatedAppsearchClusters []*AppSearchSubInfo `json:"associated_appsearch_clusters"`

	// associated enterprise search clusters
	// Required: true
	AssociatedEnterpriseSearchClusters []*EnterpriseSearchSubInfo `json:"associated_enterprise_search_clusters"`

	// associated kibana clusters
	// Required: true
	AssociatedKibanaClusters []*KibanaSubClusterInfo `json:"associated_kibana_clusters"`

	// DEPRECATED (Scheduled to be removed in the next major version): Cross-cluster search settings and status for this cluster. Use the /remote-clusters endpoints instead
	Ccs *CrossClusterSearchInfo `json:"ccs,omitempty"`

	// The id of the cluster
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The name of the cluster
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// The id of the deployment that this Elasticsearch belongs to.
	DeploymentID string `json:"deployment_id,omitempty"`

	// elasticsearch
	// Required: true
	Elasticsearch *ElasticsearchInfo `json:"elasticsearch"`

	// elasticsearch monitoring info
	ElasticsearchMonitoringInfo *ElasticsearchMonitoringInfo `json:"elasticsearch_monitoring_info,omitempty"`

	// External resources related to the cluster
	// Required: true
	// Unique: true
	ExternalLinks []*ExternalHyperlink `json:"external_links"`

	// Whether the cluster is healthy or not (one or more of the info subsections will have healthy: false)
	// Required: true
	Healthy *bool `json:"healthy"`

	// A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation
	Links map[string]Hyperlink `json:"links,omitempty"`

	// Whether or not this cluster is locked. Only populated in SaaS.
	Locked *bool `json:"locked,omitempty"`

	// metadata
	// Required: true
	Metadata *ClusterMetadataInfo `json:"metadata"`

	// plan info
	// Required: true
	PlanInfo *ElasticsearchClusterPlansInfo `json:"plan_info"`

	// The region that this cluster belongs to. Only populated in SaaS or federated ECE.
	Region string `json:"region,omitempty"`

	// security
	Security *ElasticsearchClusterSecurityInfo `json:"security,omitempty"`

	// settings
	Settings *ElasticsearchClusterSettings `json:"settings,omitempty"`

	// snapshots
	// Required: true
	Snapshots *SnapshotStatusInfo `json:"snapshots"`

	// Cluster status
	// Required: true
	// Enum: [initializing stopping stopped rebooting restarting reconfiguring started]
	Status *string `json:"status"`

	// List of cluster system alerts
	SystemAlerts []*ClusterSystemAlert `json:"system_alerts"`

	// topology
	// Required: true
	Topology *ClusterTopologyInfo `json:"topology"`
}

// Validate validates this elasticsearch cluster info
func (m *ElasticsearchClusterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedApmClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedAppsearchClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedEnterpriseSearchClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedKibanaClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearchMonitoringInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchClusterInfo) validateAssociatedApmClusters(formats strfmt.Registry) error {

	if err := validate.Required("associated_apm_clusters", "body", m.AssociatedApmClusters); err != nil {
		return err
	}

	for i := 0; i < len(m.AssociatedApmClusters); i++ {
		if swag.IsZero(m.AssociatedApmClusters[i]) { // not required
			continue
		}

		if m.AssociatedApmClusters[i] != nil {
			if err := m.AssociatedApmClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_apm_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateAssociatedAppsearchClusters(formats strfmt.Registry) error {

	if err := validate.Required("associated_appsearch_clusters", "body", m.AssociatedAppsearchClusters); err != nil {
		return err
	}

	for i := 0; i < len(m.AssociatedAppsearchClusters); i++ {
		if swag.IsZero(m.AssociatedAppsearchClusters[i]) { // not required
			continue
		}

		if m.AssociatedAppsearchClusters[i] != nil {
			if err := m.AssociatedAppsearchClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_appsearch_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateAssociatedEnterpriseSearchClusters(formats strfmt.Registry) error {

	if err := validate.Required("associated_enterprise_search_clusters", "body", m.AssociatedEnterpriseSearchClusters); err != nil {
		return err
	}

	for i := 0; i < len(m.AssociatedEnterpriseSearchClusters); i++ {
		if swag.IsZero(m.AssociatedEnterpriseSearchClusters[i]) { // not required
			continue
		}

		if m.AssociatedEnterpriseSearchClusters[i] != nil {
			if err := m.AssociatedEnterpriseSearchClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_enterprise_search_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateAssociatedKibanaClusters(formats strfmt.Registry) error {

	if err := validate.Required("associated_kibana_clusters", "body", m.AssociatedKibanaClusters); err != nil {
		return err
	}

	for i := 0; i < len(m.AssociatedKibanaClusters); i++ {
		if swag.IsZero(m.AssociatedKibanaClusters[i]) { // not required
			continue
		}

		if m.AssociatedKibanaClusters[i] != nil {
			if err := m.AssociatedKibanaClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_kibana_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateCcs(formats strfmt.Registry) error {
	if swag.IsZero(m.Ccs) { // not required
		return nil
	}

	if m.Ccs != nil {
		if err := m.Ccs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccs")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateElasticsearch(formats strfmt.Registry) error {

	if err := validate.Required("elasticsearch", "body", m.Elasticsearch); err != nil {
		return err
	}

	if m.Elasticsearch != nil {
		if err := m.Elasticsearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateElasticsearchMonitoringInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ElasticsearchMonitoringInfo) { // not required
		return nil
	}

	if m.ElasticsearchMonitoringInfo != nil {
		if err := m.ElasticsearchMonitoringInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch_monitoring_info")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateExternalLinks(formats strfmt.Registry) error {

	if err := validate.Required("external_links", "body", m.ExternalLinks); err != nil {
		return err
	}

	if err := validate.UniqueItems("external_links", "body", m.ExternalLinks); err != nil {
		return err
	}

	for i := 0; i < len(m.ExternalLinks); i++ {
		if swag.IsZero(m.ExternalLinks[i]) { // not required
			continue
		}

		if m.ExternalLinks[i] != nil {
			if err := m.ExternalLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateHealthy(formats strfmt.Registry) error {

	if err := validate.Required("healthy", "body", m.Healthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for k := range m.Links {

		if err := validate.Required("links"+"."+k, "body", m.Links[k]); err != nil {
			return err
		}
		if val, ok := m.Links[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validatePlanInfo(formats strfmt.Registry) error {

	if err := validate.Required("plan_info", "body", m.PlanInfo); err != nil {
		return err
	}

	if m.PlanInfo != nil {
		if err := m.PlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan_info")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.Security) { // not required
		return nil
	}

	if m.Security != nil {
		if err := m.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("snapshots", "body", m.Snapshots); err != nil {
		return err
	}

	if m.Snapshots != nil {
		if err := m.Snapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshots")
			}
			return err
		}
	}

	return nil
}

var elasticsearchClusterInfoTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["initializing","stopping","stopped","rebooting","restarting","reconfiguring","started"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		elasticsearchClusterInfoTypeStatusPropEnum = append(elasticsearchClusterInfoTypeStatusPropEnum, v)
	}
}

const (

	// ElasticsearchClusterInfoStatusInitializing captures enum value "initializing"
	ElasticsearchClusterInfoStatusInitializing string = "initializing"

	// ElasticsearchClusterInfoStatusStopping captures enum value "stopping"
	ElasticsearchClusterInfoStatusStopping string = "stopping"

	// ElasticsearchClusterInfoStatusStopped captures enum value "stopped"
	ElasticsearchClusterInfoStatusStopped string = "stopped"

	// ElasticsearchClusterInfoStatusRebooting captures enum value "rebooting"
	ElasticsearchClusterInfoStatusRebooting string = "rebooting"

	// ElasticsearchClusterInfoStatusRestarting captures enum value "restarting"
	ElasticsearchClusterInfoStatusRestarting string = "restarting"

	// ElasticsearchClusterInfoStatusReconfiguring captures enum value "reconfiguring"
	ElasticsearchClusterInfoStatusReconfiguring string = "reconfiguring"

	// ElasticsearchClusterInfoStatusStarted captures enum value "started"
	ElasticsearchClusterInfoStatusStarted string = "started"
)

// prop value enum
func (m *ElasticsearchClusterInfo) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, elasticsearchClusterInfoTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ElasticsearchClusterInfo) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateSystemAlerts(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemAlerts) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemAlerts); i++ {
		if swag.IsZero(m.SystemAlerts[i]) { // not required
			continue
		}

		if m.SystemAlerts[i] != nil {
			if err := m.SystemAlerts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("system_alerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) validateTopology(formats strfmt.Registry) error {

	if err := validate.Required("topology", "body", m.Topology); err != nil {
		return err
	}

	if m.Topology != nil {
		if err := m.Topology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this elasticsearch cluster info based on the context it is used
func (m *ElasticsearchClusterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociatedApmClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedAppsearchClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedEnterpriseSearchClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedKibanaClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElasticsearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElasticsearchMonitoringInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlanInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateAssociatedApmClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedApmClusters); i++ {

		if m.AssociatedApmClusters[i] != nil {
			if err := m.AssociatedApmClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_apm_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateAssociatedAppsearchClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedAppsearchClusters); i++ {

		if m.AssociatedAppsearchClusters[i] != nil {
			if err := m.AssociatedAppsearchClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_appsearch_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateAssociatedEnterpriseSearchClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedEnterpriseSearchClusters); i++ {

		if m.AssociatedEnterpriseSearchClusters[i] != nil {
			if err := m.AssociatedEnterpriseSearchClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_enterprise_search_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateAssociatedKibanaClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedKibanaClusters); i++ {

		if m.AssociatedKibanaClusters[i] != nil {
			if err := m.AssociatedKibanaClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associated_kibana_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateCcs(ctx context.Context, formats strfmt.Registry) error {

	if m.Ccs != nil {
		if err := m.Ccs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccs")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateElasticsearch(ctx context.Context, formats strfmt.Registry) error {

	if m.Elasticsearch != nil {
		if err := m.Elasticsearch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateElasticsearchMonitoringInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ElasticsearchMonitoringInfo != nil {
		if err := m.ElasticsearchMonitoringInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch_monitoring_info")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateExternalLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalLinks); i++ {

		if m.ExternalLinks[i] != nil {
			if err := m.ExternalLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Links {

		if val, ok := m.Links[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidatePlanInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PlanInfo != nil {
		if err := m.PlanInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan_info")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security != nil {
		if err := m.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	if m.Snapshots != nil {
		if err := m.Snapshots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateSystemAlerts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemAlerts); i++ {

		if m.SystemAlerts[i] != nil {
			if err := m.SystemAlerts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("system_alerts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ElasticsearchClusterInfo) contextValidateTopology(ctx context.Context, formats strfmt.Registry) error {

	if m.Topology != nil {
		if err := m.Topology.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchClusterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchClusterInfo) UnmarshalBinary(b []byte) error {
	var res ElasticsearchClusterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
