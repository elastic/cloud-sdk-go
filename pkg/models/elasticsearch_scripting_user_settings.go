// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ElasticsearchScriptingUserSettings Controls the languages supported by the Elasticsearch cluster, such as Painless, Mustache, and Expressions. Controls how the languages are used, such as file, index, and inline. TIP: For complex configurations, leave these blank and configure these settings in the user YAML or JSON.
//
// swagger:model ElasticsearchScriptingUserSettings
type ElasticsearchScriptingUserSettings struct {

	// (5.x+ only) If enabled (the default) then the expressions scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.expression.[file|stored|inline]')
	ExpressionsEnabled *bool `json:"expressions_enabled,omitempty"`

	// file
	File *ElasticsearchScriptTypeSettings `json:"file,omitempty"`

	// inline
	Inline *ElasticsearchScriptTypeSettings `json:"inline,omitempty"`

	// (5.x+ only) If enabled (the default) then the mustache scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.mustache.[file|stored|inline]')
	MustacheEnabled *bool `json:"mustache_enabled,omitempty"`

	// (5.x+ only) If enabled (the default) then the painless scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.painless.[file|stored|inline]')
	PainlessEnabled *bool `json:"painless_enabled,omitempty"`

	// stored
	Stored *ElasticsearchScriptTypeSettings `json:"stored,omitempty"`
}

// Validate validates this elasticsearch scripting user settings
func (m *ElasticsearchScriptingUserSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStored(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchScriptingUserSettings) validateFile(formats strfmt.Registry) error {
	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchScriptingUserSettings) validateInline(formats strfmt.Registry) error {
	if swag.IsZero(m.Inline) { // not required
		return nil
	}

	if m.Inline != nil {
		if err := m.Inline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inline")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchScriptingUserSettings) validateStored(formats strfmt.Registry) error {
	if swag.IsZero(m.Stored) { // not required
		return nil
	}

	if m.Stored != nil {
		if err := m.Stored.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stored")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this elasticsearch scripting user settings based on the context it is used
func (m *ElasticsearchScriptingUserSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStored(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchScriptingUserSettings) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {
		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchScriptingUserSettings) contextValidateInline(ctx context.Context, formats strfmt.Registry) error {

	if m.Inline != nil {
		if err := m.Inline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inline")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchScriptingUserSettings) contextValidateStored(ctx context.Context, formats strfmt.Registry) error {

	if m.Stored != nil {
		if err := m.Stored.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stored")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchScriptingUserSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchScriptingUserSettings) UnmarshalBinary(b []byte) error {
	var res ElasticsearchScriptingUserSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
