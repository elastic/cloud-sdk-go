// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterPlanStepLogMessageInfo The log message from a specified stage of an executed step in a plan.
//
// swagger:model ClusterPlanStepLogMessageInfo
type ClusterPlanStepLogMessageInfo struct {

	// Time in milliseconds since previous log message
	DeltaInMillis int64 `json:"delta_in_millis,omitempty"`

	// A map with details for the log about what happened during the step execution. Keys and values for are always both strings, representing the name of the detail and its value, respectively.
	// Required: true
	Details map[string]string `json:"details"`

	// The failure type, in case the step failed
	FailureType string `json:"failure_type,omitempty"`

	// A json object with sensitive details for the log, visible only to admins. May contain nested json objects.
	InternalDetails map[string]string `json:"internal_details,omitempty"`

	// Human readable log message
	// Required: true
	Message *string `json:"message"`

	// Stage that info log message takes place in
	// Required: true
	// Enum: [starting completed in_progress]
	Stage *string `json:"stage"`

	// Timestamp marking on info log of step
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this cluster plan step log message info
func (m *ClusterPlanStepLogMessageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterPlanStepLogMessageInfo) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *ClusterPlanStepLogMessageInfo) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

var clusterPlanStepLogMessageInfoTypeStagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","completed","in_progress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterPlanStepLogMessageInfoTypeStagePropEnum = append(clusterPlanStepLogMessageInfoTypeStagePropEnum, v)
	}
}

const (

	// ClusterPlanStepLogMessageInfoStageStarting captures enum value "starting"
	ClusterPlanStepLogMessageInfoStageStarting string = "starting"

	// ClusterPlanStepLogMessageInfoStageCompleted captures enum value "completed"
	ClusterPlanStepLogMessageInfoStageCompleted string = "completed"

	// ClusterPlanStepLogMessageInfoStageInProgress captures enum value "in_progress"
	ClusterPlanStepLogMessageInfoStageInProgress string = "in_progress"
)

// prop value enum
func (m *ClusterPlanStepLogMessageInfo) validateStageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterPlanStepLogMessageInfoTypeStagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterPlanStepLogMessageInfo) validateStage(formats strfmt.Registry) error {

	if err := validate.Required("stage", "body", m.Stage); err != nil {
		return err
	}

	// value enum
	if err := m.validateStageEnum("stage", "body", *m.Stage); err != nil {
		return err
	}

	return nil
}

func (m *ClusterPlanStepLogMessageInfo) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster plan step log message info based on context it is used
func (m *ClusterPlanStepLogMessageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterPlanStepLogMessageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterPlanStepLogMessageInfo) UnmarshalBinary(b []byte) error {
	var res ClusterPlanStepLogMessageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
