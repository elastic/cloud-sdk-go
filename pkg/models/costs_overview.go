// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CostsOverview The top level costs overview for an organization. All of the costs, credits, trials are expressed in Elastic Consumption Unit (ECU).
//
// swagger:model CostsOverview
type CostsOverview struct {

	// Balance for the organization
	Balance *Balance `json:"balance,omitempty"`

	// Costs for the organization
	// Required: true
	Costs *Costs `json:"costs"`

	// Hourly rate applied.
	// Required: true
	HourlyRate *float64 `json:"hourly_rate"`

	// Trial costs for the organization
	// Required: true
	Trials *float64 `json:"trials"`
}

// Validate validates this costs overview
func (m *CostsOverview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourlyRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostsOverview) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *CostsOverview) validateCosts(formats strfmt.Registry) error {

	if err := validate.Required("costs", "body", m.Costs); err != nil {
		return err
	}

	if m.Costs != nil {
		if err := m.Costs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costs")
			}
			return err
		}
	}

	return nil
}

func (m *CostsOverview) validateHourlyRate(formats strfmt.Registry) error {

	if err := validate.Required("hourly_rate", "body", m.HourlyRate); err != nil {
		return err
	}

	return nil
}

func (m *CostsOverview) validateTrials(formats strfmt.Registry) error {

	if err := validate.Required("trials", "body", m.Trials); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this costs overview based on the context it is used
func (m *CostsOverview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostsOverview) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {
		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *CostsOverview) contextValidateCosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Costs != nil {
		if err := m.Costs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostsOverview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostsOverview) UnmarshalBinary(b []byte) error {
	var res CostsOverview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
