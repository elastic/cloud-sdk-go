// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticsearchBlockingIssueElement Information about index or cluster blocks
//
// swagger:model ElasticsearchBlockingIssueElement
type ElasticsearchBlockingIssueElement struct {

	// Description of the block
	// Required: true
	Description *string `json:"description"`

	// Applicable level for the block. Either global ie. cluster-wide or index level
	// Required: true
	// Enum: [index global]
	Level *string `json:"level"`
}

// Validate validates this elasticsearch blocking issue element
func (m *ElasticsearchBlockingIssueElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchBlockingIssueElement) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var elasticsearchBlockingIssueElementTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["index","global"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		elasticsearchBlockingIssueElementTypeLevelPropEnum = append(elasticsearchBlockingIssueElementTypeLevelPropEnum, v)
	}
}

const (

	// ElasticsearchBlockingIssueElementLevelIndex captures enum value "index"
	ElasticsearchBlockingIssueElementLevelIndex string = "index"

	// ElasticsearchBlockingIssueElementLevelGlobal captures enum value "global"
	ElasticsearchBlockingIssueElementLevelGlobal string = "global"
)

// prop value enum
func (m *ElasticsearchBlockingIssueElement) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, elasticsearchBlockingIssueElementTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ElasticsearchBlockingIssueElement) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this elasticsearch blocking issue element based on context it is used
func (m *ElasticsearchBlockingIssueElement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchBlockingIssueElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchBlockingIssueElement) UnmarshalBinary(b []byte) error {
	var res ElasticsearchBlockingIssueElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
