// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlatformInfo Information about the platform.
//
// swagger:model PlatformInfo
type PlatformInfo struct {

	// Indicates if the End User License Agreement been accepted
	// Required: true
	EulaAccepted *bool `json:"eula_accepted"`

	// Is the phone-home service, which returns anonymized usage statistics to Elastic, enabled
	// Required: true
	PhoneHomeEnabled *bool `json:"phone_home_enabled"`

	// Information on regions
	// Required: true
	Regions []*RegionInfo `json:"regions"`

	// services
	// Required: true
	Services []*PlatformServiceInfo `json:"services"`

	// Information on currently unreachable regions
	// Required: true
	UnreachableRegions []*UnreachableRegionInfo `json:"unreachable_regions"`

	// Platform version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this platform info
func (m *PlatformInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEulaAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneHomeEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnreachableRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlatformInfo) validateEulaAccepted(formats strfmt.Registry) error {

	if err := validate.Required("eula_accepted", "body", m.EulaAccepted); err != nil {
		return err
	}

	return nil
}

func (m *PlatformInfo) validatePhoneHomeEnabled(formats strfmt.Registry) error {

	if err := validate.Required("phone_home_enabled", "body", m.PhoneHomeEnabled); err != nil {
		return err
	}

	return nil
}

func (m *PlatformInfo) validateRegions(formats strfmt.Registry) error {

	if err := validate.Required("regions", "body", m.Regions); err != nil {
		return err
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlatformInfo) validateServices(formats strfmt.Registry) error {

	if err := validate.Required("services", "body", m.Services); err != nil {
		return err
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlatformInfo) validateUnreachableRegions(formats strfmt.Registry) error {

	if err := validate.Required("unreachable_regions", "body", m.UnreachableRegions); err != nil {
		return err
	}

	for i := 0; i < len(m.UnreachableRegions); i++ {
		if swag.IsZero(m.UnreachableRegions[i]) { // not required
			continue
		}

		if m.UnreachableRegions[i] != nil {
			if err := m.UnreachableRegions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unreachable_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlatformInfo) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this platform info based on the context it is used
func (m *PlatformInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnreachableRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlatformInfo) contextValidateRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Regions); i++ {

		if m.Regions[i] != nil {
			if err := m.Regions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlatformInfo) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {
			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlatformInfo) contextValidateUnreachableRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnreachableRegions); i++ {

		if m.UnreachableRegions[i] != nil {
			if err := m.UnreachableRegions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unreachable_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlatformInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformInfo) UnmarshalBinary(b []byte) error {
	var res PlatformInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
