// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticsearchClusterSummary Summarized information about an Elasticsearch cluster.
// swagger:model ElasticsearchClusterSummary
type ElasticsearchClusterSummary struct {

	// Whether the cluster's blocks are healthy
	// Required: true
	BlocksHealthy *bool `json:"blocks_healthy"`

	// The id of the cluster
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// Whether the cluster is healthy
	// Required: true
	Healthy *bool `json:"healthy"`

	// Whether the cluster is hidden
	// Required: true
	Hidden *bool `json:"hidden"`

	// Whether the cluster's instances are healthy
	// Required: true
	InstancesHealthy *bool `json:"instances_healthy"`

	// Whether the cluster's master is healthy
	// Required: true
	MasterHealthy *bool `json:"master_healthy"`

	// Whether the cluster's plan is healthy
	// Required: true
	PlanHealthy *bool `json:"plan_healthy"`

	// Whether the cluster's shards are healthy
	// Required: true
	ShardsHealthy *bool `json:"shards_healthy"`

	// Whether the cluster's snapshot is healthy
	// Required: true
	SnapshotHealthy *bool `json:"snapshot_healthy"`
}

// Validate validates this elasticsearch cluster summary
func (m *ElasticsearchClusterSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlocksHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHidden(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstancesHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShardsHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotHealthy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchClusterSummary) validateBlocksHealthy(formats strfmt.Registry) error {

	if err := validate.Required("blocks_healthy", "body", m.BlocksHealthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateHealthy(formats strfmt.Registry) error {

	if err := validate.Required("healthy", "body", m.Healthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateHidden(formats strfmt.Registry) error {

	if err := validate.Required("hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateInstancesHealthy(formats strfmt.Registry) error {

	if err := validate.Required("instances_healthy", "body", m.InstancesHealthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateMasterHealthy(formats strfmt.Registry) error {

	if err := validate.Required("master_healthy", "body", m.MasterHealthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validatePlanHealthy(formats strfmt.Registry) error {

	if err := validate.Required("plan_healthy", "body", m.PlanHealthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateShardsHealthy(formats strfmt.Registry) error {

	if err := validate.Required("shards_healthy", "body", m.ShardsHealthy); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchClusterSummary) validateSnapshotHealthy(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_healthy", "body", m.SnapshotHealthy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchClusterSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchClusterSummary) UnmarshalBinary(b []byte) error {
	var res ElasticsearchClusterSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
