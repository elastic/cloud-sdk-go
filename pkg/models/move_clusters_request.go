// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MoveClustersRequest The request for moving Elasticsearch clusters off an allocator.
//
// swagger:model MoveClustersRequest
type MoveClustersRequest struct {

	// Optional list of Apm clusters to move off the allocator.
	ApmClusters []*MoveApmClusterConfiguration `json:"apm_clusters"`

	// Optional list of App Search clusters to move off the allocator.
	AppsearchClusters []*MoveAppSearchConfiguration `json:"appsearch_clusters"`

	// Optional list of Elasticsearch clusters to move off the allocator.
	ElasticsearchClusters []*MoveElasticsearchClusterConfiguration `json:"elasticsearch_clusters"`

	// Optional list of Elastic Enterprise Search clusters to move off the allocator.
	EnterpriseSearchClusters []*MoveEnterpriseSearchConfiguration `json:"enterprise_search_clusters"`

	// Optional list of Kibana clusters to move off the allocator.
	KibanaClusters []*MoveKibanaClusterConfiguration `json:"kibana_clusters"`
}

// Validate validates this move clusters request
func (m *MoveClustersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApmClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppsearchClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearchClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterpriseSearchClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKibanaClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveClustersRequest) validateApmClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.ApmClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.ApmClusters); i++ {
		if swag.IsZero(m.ApmClusters[i]) { // not required
			continue
		}

		if m.ApmClusters[i] != nil {
			if err := m.ApmClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apm_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) validateAppsearchClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.AppsearchClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.AppsearchClusters); i++ {
		if swag.IsZero(m.AppsearchClusters[i]) { // not required
			continue
		}

		if m.AppsearchClusters[i] != nil {
			if err := m.AppsearchClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appsearch_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) validateElasticsearchClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.ElasticsearchClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.ElasticsearchClusters); i++ {
		if swag.IsZero(m.ElasticsearchClusters[i]) { // not required
			continue
		}

		if m.ElasticsearchClusters[i] != nil {
			if err := m.ElasticsearchClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elasticsearch_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) validateEnterpriseSearchClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.EnterpriseSearchClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.EnterpriseSearchClusters); i++ {
		if swag.IsZero(m.EnterpriseSearchClusters[i]) { // not required
			continue
		}

		if m.EnterpriseSearchClusters[i] != nil {
			if err := m.EnterpriseSearchClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enterprise_search_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) validateKibanaClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.KibanaClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.KibanaClusters); i++ {
		if swag.IsZero(m.KibanaClusters[i]) { // not required
			continue
		}

		if m.KibanaClusters[i] != nil {
			if err := m.KibanaClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kibana_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this move clusters request based on the context it is used
func (m *MoveClustersRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApmClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppsearchClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElasticsearchClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterpriseSearchClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKibanaClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoveClustersRequest) contextValidateApmClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApmClusters); i++ {

		if m.ApmClusters[i] != nil {
			if err := m.ApmClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apm_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) contextValidateAppsearchClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppsearchClusters); i++ {

		if m.AppsearchClusters[i] != nil {
			if err := m.AppsearchClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appsearch_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) contextValidateElasticsearchClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElasticsearchClusters); i++ {

		if m.ElasticsearchClusters[i] != nil {
			if err := m.ElasticsearchClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elasticsearch_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) contextValidateEnterpriseSearchClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnterpriseSearchClusters); i++ {

		if m.EnterpriseSearchClusters[i] != nil {
			if err := m.EnterpriseSearchClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enterprise_search_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoveClustersRequest) contextValidateKibanaClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KibanaClusters); i++ {

		if m.KibanaClusters[i] != nil {
			if err := m.KibanaClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kibana_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoveClustersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoveClustersRequest) UnmarshalBinary(b []byte) error {
	var res MoveClustersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
