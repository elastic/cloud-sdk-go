// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticsearchClusterTopologyElement The topology of the Elasticsearch nodes, including the number, capacity, and type of nodes, and where they can be allocated.
//
// swagger:model ElasticsearchClusterTopologyElement
type ElasticsearchClusterTopologyElement struct {

	// The maximum size of this topology element when autoscaling is enabled. This property is only supported, and must be provided, for data and ML topology elements.
	AutoscalingMax *TopologySize `json:"autoscaling_max,omitempty"`

	// The minimum size of this topology element when autoscaling is enabled. This property is only supported, and must be provided, for ML topology elements.
	AutoscalingMin *TopologySize `json:"autoscaling_min,omitempty"`

	// An arbitrary JSON object overriding the default autoscaling policy. Don't set unless you really know what you are doing.
	AutoscalingPolicyOverrideJSON interface{} `json:"autoscaling_policy_override_json,omitempty"`

	// elasticsearch
	Elasticsearch *ElasticsearchConfiguration `json:"elasticsearch,omitempty"`

	// Unique identifier of this topology element
	ID string `json:"id,omitempty"`

	// Controls the allocation of this topology element as well as allowed sizes and node_types. It needs to match the id of an existing instance configuration.
	InstanceConfigurationID string `json:"instance_configuration_id,omitempty"`

	// The memory capacity in MB for each node of this type built in each zone.
	MemoryPerNode int32 `json:"memory_per_node,omitempty"`

	// The number of nodes of this type that are allocated within each zone. (i.e. total capacity per zone = `node_count_per_zone` * `memory_per_node` in MB). Cannot be set for tiebreaker topologies. For dedicated master nodes, must be 1 if an entry exists.
	NodeCountPerZone int32 `json:"node_count_per_zone,omitempty"`

	// The list of node roles for this topology element (ES version >= 7.10). Allowable values are: master, ingest, ml, data_hot, data_content, data_warm, data_cold, data_frozen, remote_cluster_client, transform
	NodeRoles []string `json:"node_roles"`

	// node type
	NodeType *ElasticsearchNodeType `json:"node_type,omitempty"`

	// size
	Size *TopologySize `json:"size,omitempty"`

	// topology element control
	TopologyElementControl *TopologyElementControl `json:"topology_element_control,omitempty"`

	// The default number of zones in which data nodes will be placed
	ZoneCount int32 `json:"zone_count,omitempty"`
}

// Validate validates this elasticsearch cluster topology element
func (m *ElasticsearchClusterTopologyElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoscalingMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoscalingMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopologyElementControl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateAutoscalingMax(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoscalingMax) { // not required
		return nil
	}

	if m.AutoscalingMax != nil {
		if err := m.AutoscalingMax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoscaling_max")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateAutoscalingMin(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoscalingMin) { // not required
		return nil
	}

	if m.AutoscalingMin != nil {
		if err := m.AutoscalingMin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoscaling_min")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateElasticsearch(formats strfmt.Registry) error {
	if swag.IsZero(m.Elasticsearch) { // not required
		return nil
	}

	if m.Elasticsearch != nil {
		if err := m.Elasticsearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

var elasticsearchClusterTopologyElementNodeRolesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["master","ingest","ml","data_hot","data_content","data_warm","data_cold","data_frozen","remote_cluster_client","transform"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		elasticsearchClusterTopologyElementNodeRolesItemsEnum = append(elasticsearchClusterTopologyElementNodeRolesItemsEnum, v)
	}
}

func (m *ElasticsearchClusterTopologyElement) validateNodeRolesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, elasticsearchClusterTopologyElementNodeRolesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateNodeRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeRoles); i++ {

		// value enum
		if err := m.validateNodeRolesItemsEnum("node_roles"+"."+strconv.Itoa(i), "body", m.NodeRoles[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeType) { // not required
		return nil
	}

	if m.NodeType != nil {
		if err := m.NodeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_type")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if m.Size != nil {
		if err := m.Size.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) validateTopologyElementControl(formats strfmt.Registry) error {
	if swag.IsZero(m.TopologyElementControl) { // not required
		return nil
	}

	if m.TopologyElementControl != nil {
		if err := m.TopologyElementControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology_element_control")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this elasticsearch cluster topology element based on the context it is used
func (m *ElasticsearchClusterTopologyElement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoscalingMax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAutoscalingMin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElasticsearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopologyElementControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchClusterTopologyElement) contextValidateAutoscalingMax(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoscalingMax != nil {
		if err := m.AutoscalingMax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoscaling_max")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) contextValidateAutoscalingMin(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoscalingMin != nil {
		if err := m.AutoscalingMin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoscaling_min")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) contextValidateElasticsearch(ctx context.Context, formats strfmt.Registry) error {

	if m.Elasticsearch != nil {
		if err := m.Elasticsearch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) contextValidateNodeType(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeType != nil {
		if err := m.NodeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_type")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if m.Size != nil {
		if err := m.Size.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *ElasticsearchClusterTopologyElement) contextValidateTopologyElementControl(ctx context.Context, formats strfmt.Registry) error {

	if m.TopologyElementControl != nil {
		if err := m.TopologyElementControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology_element_control")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchClusterTopologyElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchClusterTopologyElement) UnmarshalBinary(b []byte) error {
	var res ElasticsearchClusterTopologyElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
