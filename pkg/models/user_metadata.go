// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserMetadata Metadata for a user
//
// swagger:model UserMetadata
type UserMetadata struct {

	// The date and time when the user was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The Id of the user that created this user
	CreatedBy string `json:"created_by,omitempty"`

	// The date and time when the user first logged in
	// Format: date-time
	FirstLoginAt strfmt.DateTime `json:"first_login_at,omitempty"`

	// The date and time when the user last logged in
	// Format: date-time
	LastLoginAt strfmt.DateTime `json:"last_login_at,omitempty"`

	// The date and time when the user was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// The Id of the user that last updated this user
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this user metadata
func (m *UserMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserMetadata) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserMetadata) validateFirstLoginAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstLoginAt) { // not required
		return nil
	}

	if err := validate.FormatOf("first_login_at", "body", "date-time", m.FirstLoginAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserMetadata) validateLastLoginAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastLoginAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login_at", "body", "date-time", m.LastLoginAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserMetadata) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user metadata based on context it is used
func (m *UserMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserMetadata) UnmarshalBinary(b []byte) error {
	var res UserMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
