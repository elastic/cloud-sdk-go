// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterMetadataSettings The top-level configuration settings for the Elasticsearch cluster.
//
// swagger:model ClusterMetadataSettings
type ClusterMetadataSettings struct {

	// Contact email for the cluster
	ContactEmail string `json:"contact_email,omitempty"`

	// Whether or not this cluster is hidden from the normal clusters list
	// Read Only: true
	Hidden *bool `json:"hidden,omitempty"`

	// The display name of the cluster
	Name string `json:"name,omitempty"`

	// The organization that owns the deployment
	// Read Only: true
	OrganizationID string `json:"organization_id,omitempty"`

	// The user id (referencing whatever user database is in use) of the cluster owner
	OwnerID string `json:"owner_id,omitempty"`

	// resources
	Resources *ClusterMetadataResourcesSettings `json:"resources,omitempty"`

	// Subscription level of the cluster
	SubscriptionLevel string `json:"subscription_level,omitempty"`

	// Indicates if a cluster is system owned (restricts the set of operations that can be performed on it)
	SystemOwned *bool `json:"system_owned,omitempty"`
}

// Validate validates this cluster metadata settings
func (m *ClusterMetadataSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterMetadataSettings) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster metadata settings based on the context it is used
func (m *ClusterMetadataSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHidden(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterMetadataSettings) contextValidateHidden(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *ClusterMetadataSettings) contextValidateOrganizationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "organization_id", "body", string(m.OrganizationID)); err != nil {
		return err
	}

	return nil
}

func (m *ClusterMetadataSettings) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {
		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterMetadataSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterMetadataSettings) UnmarshalBinary(b []byte) error {
	var res ClusterMetadataSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
