// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterInstanceDiskInfo Information about the use and storage capacity of a Kibana instance or APM Server.
//
// swagger:model ClusterInstanceDiskInfo
type ClusterInstanceDiskInfo struct {

	// If known, the amount of total disk space available to the container in MB
	DiskSpaceAvailable int64 `json:"disk_space_available,omitempty"`

	// The amount of disk space being used by the service in MB
	// Required: true
	DiskSpaceUsed *int64 `json:"disk_space_used"`

	// The storage multiplier originally defined to calculate disk space.
	// Required: true
	StorageMultiplier *float64 `json:"storage_multiplier"`
}

// Validate validates this cluster instance disk info
func (m *ClusterInstanceDiskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskSpaceUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageMultiplier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInstanceDiskInfo) validateDiskSpaceUsed(formats strfmt.Registry) error {

	if err := validate.Required("disk_space_used", "body", m.DiskSpaceUsed); err != nil {
		return err
	}

	return nil
}

func (m *ClusterInstanceDiskInfo) validateStorageMultiplier(formats strfmt.Registry) error {

	if err := validate.Required("storage_multiplier", "body", m.StorageMultiplier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster instance disk info based on context it is used
func (m *ClusterInstanceDiskInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInstanceDiskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInstanceDiskInfo) UnmarshalBinary(b []byte) error {
	var res ClusterInstanceDiskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
