// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateMetaData The certificate MetaData
//
// swagger:model CertificateMetaData
type CertificateMetaData struct {

	// The fingerprint of the certificate
	// Required: true
	Fingerprint *string `json:"fingerprint"`

	// The valid from date of the certificate in UTC
	// Required: true
	// Format: date-time
	ValidFrom *strfmt.DateTime `json:"valid_from"`

	// The expiry date of the certificate in UTC
	// Required: true
	// Format: date-time
	ValidTo *strfmt.DateTime `json:"valid_to"`
}

// Validate validates this certificate meta data
func (m *CertificateMetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateMetaData) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", m.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (m *CertificateMetaData) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("valid_from", "body", m.ValidFrom); err != nil {
		return err
	}

	if err := validate.FormatOf("valid_from", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateMetaData) validateValidTo(formats strfmt.Registry) error {

	if err := validate.Required("valid_to", "body", m.ValidTo); err != nil {
		return err
	}

	if err := validate.FormatOf("valid_to", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this certificate meta data based on context it is used
func (m *CertificateMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateMetaData) UnmarshalBinary(b []byte) error {
	var res CertificateMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
