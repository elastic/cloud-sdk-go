// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteResourceRef The Elasticsearch resource used as a Remote Cluster.
//
// swagger:model RemoteResourceRef
type RemoteResourceRef struct {

	// The alias for this remote cluster. Aliases must only contain letters, digits, dashes and underscores
	// Required: true
	Alias *string `json:"alias"`

	// The id of the deployment
	// Required: true
	DeploymentID *string `json:"deployment_id"`

	// The locally-unique user-specified id of an Elasticsearch Resource
	// Required: true
	ElasticsearchRefID *string `json:"elasticsearch_ref_id"`

	// Information about a Remote Cluster.
	// Read Only: true
	Info *RemoteResourceInfo `json:"info,omitempty"`

	// If true, skip this cluster during search if it is disconnected. Default: false
	SkipUnavailable *bool `json:"skip_unavailable,omitempty"`
}

// Validate validates this remote resource ref
func (m *RemoteResourceRef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearchRefID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteResourceRef) validateAlias(formats strfmt.Registry) error {

	if err := validate.Required("alias", "body", m.Alias); err != nil {
		return err
	}

	return nil
}

func (m *RemoteResourceRef) validateDeploymentID(formats strfmt.Registry) error {

	if err := validate.Required("deployment_id", "body", m.DeploymentID); err != nil {
		return err
	}

	return nil
}

func (m *RemoteResourceRef) validateElasticsearchRefID(formats strfmt.Registry) error {

	if err := validate.Required("elasticsearch_ref_id", "body", m.ElasticsearchRefID); err != nil {
		return err
	}

	return nil
}

func (m *RemoteResourceRef) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Info) { // not required
		return nil
	}

	if m.Info != nil {
		if err := m.Info.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this remote resource ref based on the context it is used
func (m *RemoteResourceRef) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteResourceRef) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Info != nil {
		if err := m.Info.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteResourceRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteResourceRef) UnmarshalBinary(b []byte) error {
	var res RemoteResourceRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
