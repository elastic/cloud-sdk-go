// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentResources Describes a resource belonging to a Deployment
//
// swagger:model DeploymentResources
type DeploymentResources struct {

	// List of Apm resources in your Deployment
	// Required: true
	Apm []*ApmResourceInfo `json:"apm"`

	// List of App Search resources in your Deployment
	// Required: true
	Appsearch []*AppSearchResourceInfo `json:"appsearch"`

	// List of Elasticsearch resources in your Deployment
	// Required: true
	Elasticsearch []*ElasticsearchResourceInfo `json:"elasticsearch"`

	// List of Enterprise Search resources in your Deployment
	// Required: true
	EnterpriseSearch []*EnterpriseSearchResourceInfo `json:"enterprise_search"`

	// List of Integrations Server resources in your Deployment
	// Required: true
	IntegrationsServer []*IntegrationsServerResourceInfo `json:"integrations_server"`

	// List of Kibana resources in your Deployment
	// Required: true
	Kibana []*KibanaResourceInfo `json:"kibana"`
}

// Validate validates this deployment resources
func (m *DeploymentResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppsearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterpriseSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationsServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKibana(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentResources) validateApm(formats strfmt.Registry) error {

	if err := validate.Required("apm", "body", m.Apm); err != nil {
		return err
	}

	for i := 0; i < len(m.Apm); i++ {
		if swag.IsZero(m.Apm[i]) { // not required
			continue
		}

		if m.Apm[i] != nil {
			if err := m.Apm[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) validateAppsearch(formats strfmt.Registry) error {

	if err := validate.Required("appsearch", "body", m.Appsearch); err != nil {
		return err
	}

	for i := 0; i < len(m.Appsearch); i++ {
		if swag.IsZero(m.Appsearch[i]) { // not required
			continue
		}

		if m.Appsearch[i] != nil {
			if err := m.Appsearch[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appsearch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) validateElasticsearch(formats strfmt.Registry) error {

	if err := validate.Required("elasticsearch", "body", m.Elasticsearch); err != nil {
		return err
	}

	for i := 0; i < len(m.Elasticsearch); i++ {
		if swag.IsZero(m.Elasticsearch[i]) { // not required
			continue
		}

		if m.Elasticsearch[i] != nil {
			if err := m.Elasticsearch[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elasticsearch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) validateEnterpriseSearch(formats strfmt.Registry) error {

	if err := validate.Required("enterprise_search", "body", m.EnterpriseSearch); err != nil {
		return err
	}

	for i := 0; i < len(m.EnterpriseSearch); i++ {
		if swag.IsZero(m.EnterpriseSearch[i]) { // not required
			continue
		}

		if m.EnterpriseSearch[i] != nil {
			if err := m.EnterpriseSearch[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enterprise_search" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) validateIntegrationsServer(formats strfmt.Registry) error {

	if err := validate.Required("integrations_server", "body", m.IntegrationsServer); err != nil {
		return err
	}

	for i := 0; i < len(m.IntegrationsServer); i++ {
		if swag.IsZero(m.IntegrationsServer[i]) { // not required
			continue
		}

		if m.IntegrationsServer[i] != nil {
			if err := m.IntegrationsServer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("integrations_server" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) validateKibana(formats strfmt.Registry) error {

	if err := validate.Required("kibana", "body", m.Kibana); err != nil {
		return err
	}

	for i := 0; i < len(m.Kibana); i++ {
		if swag.IsZero(m.Kibana[i]) { // not required
			continue
		}

		if m.Kibana[i] != nil {
			if err := m.Kibana[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kibana" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this deployment resources based on the context it is used
func (m *DeploymentResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppsearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElasticsearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterpriseSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrationsServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKibana(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentResources) contextValidateApm(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Apm); i++ {

		if m.Apm[i] != nil {
			if err := m.Apm[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) contextValidateAppsearch(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Appsearch); i++ {

		if m.Appsearch[i] != nil {
			if err := m.Appsearch[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appsearch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) contextValidateElasticsearch(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Elasticsearch); i++ {

		if m.Elasticsearch[i] != nil {
			if err := m.Elasticsearch[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elasticsearch" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) contextValidateEnterpriseSearch(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnterpriseSearch); i++ {

		if m.EnterpriseSearch[i] != nil {
			if err := m.EnterpriseSearch[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enterprise_search" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) contextValidateIntegrationsServer(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IntegrationsServer); i++ {

		if m.IntegrationsServer[i] != nil {
			if err := m.IntegrationsServer[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("integrations_server" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentResources) contextValidateKibana(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Kibana); i++ {

		if m.Kibana[i] != nil {
			if err := m.Kibana[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kibana" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentResources) UnmarshalBinary(b []byte) error {
	var res DeploymentResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
