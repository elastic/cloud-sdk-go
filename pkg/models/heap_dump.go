// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeapDump heap dump
//
// swagger:model HeapDump
type HeapDump struct {

	// The time at which the heap dump was captured
	// Required: true
	Captured *string `json:"captured"`

	// An error message if the heap dump failed
	Error string `json:"error,omitempty"`

	// The Elastic Cloud name/id of the instance (container)
	// Required: true
	InstanceID *string `json:"instance_id"`

	// The size in bytes of the heap dump
	Size int64 `json:"size,omitempty"`

	// The status of the heap dump
	// Required: true
	Status *string `json:"status"`

	// The type of heap dump
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this heap dump
func (m *HeapDump) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaptured(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeapDump) validateCaptured(formats strfmt.Registry) error {

	if err := validate.Required("captured", "body", m.Captured); err != nil {
		return err
	}

	return nil
}

func (m *HeapDump) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instance_id", "body", m.InstanceID); err != nil {
		return err
	}

	return nil
}

func (m *HeapDump) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *HeapDump) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this heap dump based on context it is used
func (m *HeapDump) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HeapDump) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeapDump) UnmarshalBinary(b []byte) error {
	var res HeapDump
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
