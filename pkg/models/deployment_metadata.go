// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentMetadata Additional information about the current deployment object.
//
// swagger:model DeploymentMetadata
type DeploymentMetadata struct {

	// Whether or not this deployment is hidden from the normal deployment list
	// Read Only: true
	Hidden *bool `json:"hidden,omitempty"`

	// The most recent time the cluster metadata was changed (ISO format in UTC)
	// Required: true
	// Format: date-time
	LastModified *strfmt.DateTime `json:"last_modified"`

	// The most recent time the resource's plan was changed (ISO format in UTC)
	// Format: date-time
	LastResourcePlanModified strfmt.DateTime `json:"last_resource_plan_modified,omitempty"`

	// The organization that owns the deployment
	// Read Only: true
	OrganizationID string `json:"organization_id,omitempty"`

	// The user id (referencing whatever user database is in use) of the deployment owner
	OwnerID string `json:"owner_id,omitempty"`

	// Subscription level of the cluster
	// Read Only: true
	SubscriptionLevel string `json:"subscription_level,omitempty"`

	// Indicates if a deployment is system owned (restricts the set of operations that can be performed on it)
	SystemOwned *bool `json:"system_owned,omitempty"`

	// Arbitrary user-defined metadata associated with this deployment
	Tags []*MetadataItem `json:"tags"`
}

// Validate validates this deployment metadata
func (m *DeploymentMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResourcePlanModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentMetadata) validateLastModified(formats strfmt.Registry) error {

	if err := validate.Required("last_modified", "body", m.LastModified); err != nil {
		return err
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentMetadata) validateLastResourcePlanModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastResourcePlanModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_resource_plan_modified", "body", "date-time", m.LastResourcePlanModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentMetadata) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this deployment metadata based on the context it is used
func (m *DeploymentMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHidden(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptionLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentMetadata) contextValidateHidden(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentMetadata) contextValidateOrganizationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "organization_id", "body", string(m.OrganizationID)); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentMetadata) contextValidateSubscriptionLevel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subscription_level", "body", string(m.SubscriptionLevel)); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentMetadata) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentMetadata) UnmarshalBinary(b []byte) error {
	var res DeploymentMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
