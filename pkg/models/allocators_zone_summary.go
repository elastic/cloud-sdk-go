// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AllocatorsZoneSummary Summary of the allocators for the specified zone.
//
// swagger:model AllocatorsZoneSummary
type AllocatorsZoneSummary struct {

	// Number of connected allocators
	// Required: true
	ConnectedAllocators *int32 `json:"connected_allocators"`

	// Capacity of connected allocators in megabytes
	// Required: true
	ConnectedCapacity *int32 `json:"connected_capacity"`

	// Number of disconnected allocators
	// Required: true
	DisconnectedAllocators *int32 `json:"disconnected_allocators"`

	// Number of healthy allocators
	// Required: true
	HealthyAllocators *int32 `json:"healthy_allocators"`

	// Number of connected allocators in maintenance
	// Required: true
	InMaintenanceAllocators *int32 `json:"in_maintenance_allocators"`

	// Number of instances across all allocators in the region
	// Required: true
	Instances *int32 `json:"instances"`

	// Maximum capacity available in one allocator in megabytes
	// Required: true
	MaxAvailableCapacity *int32 `json:"max_available_capacity"`

	// Total number of allocators
	// Required: true
	TotalAllocators *int32 `json:"total_allocators"`

	// Identifier of the zone
	// Required: true
	ZoneID *string `json:"zone_id"`
}

// Validate validates this allocators zone summary
func (m *AllocatorsZoneSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectedAllocators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedAllocators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthyAllocators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInMaintenanceAllocators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAvailableCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAllocators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocatorsZoneSummary) validateConnectedAllocators(formats strfmt.Registry) error {

	if err := validate.Required("connected_allocators", "body", m.ConnectedAllocators); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateConnectedCapacity(formats strfmt.Registry) error {

	if err := validate.Required("connected_capacity", "body", m.ConnectedCapacity); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateDisconnectedAllocators(formats strfmt.Registry) error {

	if err := validate.Required("disconnected_allocators", "body", m.DisconnectedAllocators); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateHealthyAllocators(formats strfmt.Registry) error {

	if err := validate.Required("healthy_allocators", "body", m.HealthyAllocators); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateInMaintenanceAllocators(formats strfmt.Registry) error {

	if err := validate.Required("in_maintenance_allocators", "body", m.InMaintenanceAllocators); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateInstances(formats strfmt.Registry) error {

	if err := validate.Required("instances", "body", m.Instances); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateMaxAvailableCapacity(formats strfmt.Registry) error {

	if err := validate.Required("max_available_capacity", "body", m.MaxAvailableCapacity); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateTotalAllocators(formats strfmt.Registry) error {

	if err := validate.Required("total_allocators", "body", m.TotalAllocators); err != nil {
		return err
	}

	return nil
}

func (m *AllocatorsZoneSummary) validateZoneID(formats strfmt.Registry) error {

	if err := validate.Required("zone_id", "body", m.ZoneID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this allocators zone summary based on context it is used
func (m *AllocatorsZoneSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AllocatorsZoneSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocatorsZoneSummary) UnmarshalBinary(b []byte) error {
	var res AllocatorsZoneSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
