// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimpleQueryStringQuery A query that uses simple query string syntax. Will ignore invalid syntax.
//
// swagger:model SimpleQueryStringQuery
type SimpleQueryStringQuery struct {

	// If `true`, the query attempts to analyze wildcard terms. Defaults to `false`.
	AnalyzeWildcard *bool `json:"analyze_wildcard,omitempty"`

	// The name of the analyzer to use to convert the query text into tokens.
	Analyzer string `json:"analyzer,omitempty"`

	// If `true`, the parse creates a `match_phrase` uery for each multi-position token. Defaults to `true`.
	AutoGenerateSynonymsPhraseQuery *bool `json:"auto_generate_synonyms_phrase_query,omitempty"`

	// The boolean operator used to combine the terms of the query. Valid values are `OR` (default) and `AND`.
	DefaultOperator string `json:"default_operator,omitempty"`

	// Array of fields to search
	Fields []string `json:"fields"`

	// List of enabled operators for the simple query string syntax. Defaults to `ALL`.
	Flags string `json:"flags,omitempty"`

	// Maximum number of terms to which the query expands for fuzzy matching. Defaults to 50.
	FuzzyMaxExpansions int32 `json:"fuzzy_max_expansions,omitempty"`

	// Number of beginning characters left unchanged for fuzzy matching. Defaults to 0.
	FuzzyPrefixLength int32 `json:"fuzzy_prefix_length,omitempty"`

	// If `true`, edits for fuzzy matching include transpositions of two adjacent characters. Defaults to `false`.
	FuzzyTranspositions *bool `json:"fuzzy_transpositions,omitempty"`

	// If `true`, format-based errors, such as providing a text value for a numeric field are ignored. Defaults to `false`.
	Lenient *bool `json:"lenient,omitempty"`

	// Minimum number of clauses that must match for a document to be returned.
	MinimumShouldMatch string `json:"minimum_should_match,omitempty"`

	// The query expressed in simple query string syntax.
	// Required: true
	Query *string `json:"query"`

	// Suffix appended to quoted text in the query string.
	QuoteFieldSuffix string `json:"quote_field_suffix,omitempty"`
}

// Validate validates this simple query string query
func (m *SimpleQueryStringQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimpleQueryStringQuery) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this simple query string query based on context it is used
func (m *SimpleQueryStringQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SimpleQueryStringQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimpleQueryStringQuery) UnmarshalBinary(b []byte) error {
	var res SimpleQueryStringQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
