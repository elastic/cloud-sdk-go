// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSnapshotSettings The snapshot configuration settings for an Elasticsearch cluster.
//
// swagger:model ClusterSnapshotSettings
type ClusterSnapshotSettings struct {

	// Cron expression indicating when should snapshots be taken. This can be enabled only if SLM is enabled for the deployment and 'interval' is not present
	CronExpression string `json:"cron_expression,omitempty"`

	// Indicates if Snapshotting is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Interval between snapshots, with the format 'length unit' (space is optional), where unit can be one of: d (day), h (hour), min (minute). Default is 30 minutes
	Interval string `json:"interval,omitempty"`

	// Interval between snapshot progress checks, with the format 'length unit' (space is optional), where unit can be one of: d (day), h (hour), min (minute). Default is 1 minute
	PendingInterval string `json:"pending_interval,omitempty"`

	// Snapshot repository configuration
	Repository *ClusterSnapshotRepositoryInfo `json:"repository,omitempty"`

	// Deprecated: ECE snapshot repository name, please use [repository] instead
	RepositoryName string `json:"repository_name,omitempty"`

	// Cluster snapshot retention information
	Retention *ClusterSnapshotRetention `json:"retention,omitempty"`

	// When set to true, the deployment will have SLM enabled. Default value is true.
	// Read Only: true
	Slm *bool `json:"slm,omitempty"`

	// List of temporary snapshot suspensions
	Suspended []string `json:"suspended"`

	// The time to wait between snapshot phases (snapshot, purge), with the format 'length unit' (space is optional), where unit can be one of: d (day), h (hour), min (minute). Default is 10 minutes
	WaitTimeAfterSnapshotting string `json:"wait_time_after_snapshotting,omitempty"`
}

// Validate validates this cluster snapshot settings
func (m *ClusterSnapshotSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSnapshotSettings) validateRepository(formats strfmt.Registry) error {
	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSnapshotSettings) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster snapshot settings based on the context it is used
func (m *ClusterSnapshotSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSnapshotSettings) contextValidateRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.Repository != nil {
		if err := m.Repository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSnapshotSettings) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {
		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSnapshotSettings) contextValidateSlm(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "slm", "body", m.Slm); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSnapshotSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSnapshotSettings) UnmarshalBinary(b []byte) error {
	var res ClusterSnapshotSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
