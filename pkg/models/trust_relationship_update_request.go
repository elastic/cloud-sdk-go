// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TrustRelationshipUpdateRequest A request for updating a trust relationship with another environment
//
// swagger:model TrustRelationshipUpdateRequest
type TrustRelationshipUpdateRequest struct {

	// The ID of the accounts to trust by this relationship.
	AccountIds []string `json:"account_ids"`

	// The installation ID of the environment to trust
	InstallationID string `json:"installation_id,omitempty"`

	// A name for the trust relationship
	Name string `json:"name,omitempty"`

	// The public CA certificate of the environment to trust
	PublicCaCert string `json:"public_ca_cert,omitempty"`

	// If this relationship is trusted by default by all deployments in the current environment.
	TrustByDefault *bool `json:"trust_by_default,omitempty"`
}

// Validate validates this trust relationship update request
func (m *TrustRelationshipUpdateRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this trust relationship update request based on context it is used
func (m *TrustRelationshipUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrustRelationshipUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustRelationshipUpdateRequest) UnmarshalBinary(b []byte) error {
	var res TrustRelationshipUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
