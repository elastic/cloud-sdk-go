// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StackVersionMetadata The metadata for the Elastic Stack.
//
// swagger:model StackVersionMetadata
type StackVersionMetadata struct {

	// The minimum version required for performing a full cluster restart upgrade to this stack version.
	MinIndexCompatibilityVersion string `json:"min_index_compatibility_version,omitempty"`

	// The minimum version of the platform that the stack pack version is compatible with
	MinPlatformVersion string `json:"min_platform_version,omitempty"`

	// The minimum version required for performing a rolling upgrade to this stack version.
	MinWireCompatibilityVersion string `json:"min_wire_compatibility_version,omitempty"`

	// Notes for administrator
	Notes string `json:"notes,omitempty"`

	// Indicates that the stack pack version is not GA and is not supposed to be used in production
	PreRelease *bool `json:"pre_release,omitempty"`

	// The schema version of the stack pack version
	SchemaVersion int32 `json:"schema_version,omitempty"`
}

// Validate validates this stack version metadata
func (m *StackVersionMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this stack version metadata based on context it is used
func (m *StackVersionMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StackVersionMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackVersionMetadata) UnmarshalBinary(b []byte) error {
	var res StackVersionMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
