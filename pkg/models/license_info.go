// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseInfo Information about a license.
//
// swagger:model LicenseInfo
type LicenseInfo struct {

	// List of cluster licenses
	ClusterLicenses []*ClusterLicenseInfo `json:"cluster_licenses"`

	// When the license expires, in milliseconds since the Unix epoch
	// Required: true
	ExpiryDateInMillis *int64 `json:"expiry_date_in_millis"`

	// When the license was issued, in milliseconds since the Unix epoch
	// Required: true
	IssueDateInMillis *int64 `json:"issue_date_in_millis"`

	// Entity the license was issued to
	// Required: true
	IssuedTo *string `json:"issued_to"`

	// Issuer of the license
	// Required: true
	Issuer *string `json:"issuer"`

	// Maximum number of allocators. Empty for version >= 3
	MaxAllocators int32 `json:"max_allocators,omitempty"`

	// Maximum number of instances. Only present for version 3
	MaxInstances int32 `json:"max_instances,omitempty"`

	// Maximum RAM per allocator in MB. Empty for version >= 3
	MaxRAMPerAllocatorMb int32 `json:"max_ram_per_allocator_mb,omitempty"`

	// Maximum number of resource units, where each unit is 64GB. Only present for version > 3
	MaxResourceUnits int32 `json:"max_resource_units,omitempty"`

	// Operation mode
	OperationMode string `json:"operation_mode,omitempty"`

	// Digital signature
	// Required: true
	Signature *string `json:"signature"`

	// Initial validity of the license, in milliseconds since the Unix epoch
	// Required: true
	StartDateInMillis *int64 `json:"start_date_in_millis"`

	// Type of the license subscription
	SubscriptionType string `json:"subscription_type,omitempty"`

	// Type of the license
	// Required: true
	Type *string `json:"type"`

	// Unique identifier of the license
	// Required: true
	UID *string `json:"uid"`

	// Version of the license
	Version int32 `json:"version,omitempty"`
}

// Validate validates this license info
func (m *LicenseInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryDateInMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueDateInMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateInMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseInfo) validateClusterLicenses(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterLicenses) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterLicenses); i++ {
		if swag.IsZero(m.ClusterLicenses[i]) { // not required
			continue
		}

		if m.ClusterLicenses[i] != nil {
			if err := m.ClusterLicenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cluster_licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LicenseInfo) validateExpiryDateInMillis(formats strfmt.Registry) error {

	if err := validate.Required("expiry_date_in_millis", "body", m.ExpiryDateInMillis); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateIssueDateInMillis(formats strfmt.Registry) error {

	if err := validate.Required("issue_date_in_millis", "body", m.IssueDateInMillis); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateIssuedTo(formats strfmt.Registry) error {

	if err := validate.Required("issued_to", "body", m.IssuedTo); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateStartDateInMillis(formats strfmt.Registry) error {

	if err := validate.Required("start_date_in_millis", "body", m.StartDateInMillis); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *LicenseInfo) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this license info based on the context it is used
func (m *LicenseInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseInfo) contextValidateClusterLicenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterLicenses); i++ {

		if m.ClusterLicenses[i] != nil {
			if err := m.ClusterLicenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cluster_licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseInfo) UnmarshalBinary(b []byte) error {
	var res LicenseInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
