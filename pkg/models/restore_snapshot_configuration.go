// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreSnapshotConfiguration Restores a snapshot from a local or remote repository.
//
// swagger:model RestoreSnapshotConfiguration
type RestoreSnapshotConfiguration struct {

	// Raw remote snapshot restore settings. Do not send this if you are sending source_cluster_id
	RepositoryConfig *RestoreSnapshotRepoConfiguration `json:"repository_config,omitempty"`

	// If specified, contains the name of the snapshot repository - else will default to the Elastic Cloud system repo ('found-snapshots')
	RepositoryName string `json:"repository_name,omitempty"`

	// restore payload
	RestorePayload *RestoreSnapshotAPIConfiguration `json:"restore_payload,omitempty"`

	// The name of the snapshot to restore. Use '\_\_latest_success\_\_' to get the most recent snapshot from the specified repository
	// Required: true
	SnapshotName *string `json:"snapshot_name"`

	// If specified, contains the name of the source cluster id. Do not send this if you are sending repository_config
	SourceClusterID string `json:"source_cluster_id,omitempty"`

	// The restore strategy to use. Defaults to a full restore. Partial restore will attempt to restore unavailable indices only
	// Enum: [partial full recovery]
	Strategy string `json:"strategy,omitempty"`
}

// Validate validates this restore snapshot configuration
func (m *RestoreSnapshotConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepositoryConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestorePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSnapshotConfiguration) validateRepositoryConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RepositoryConfig) { // not required
		return nil
	}

	if m.RepositoryConfig != nil {
		if err := m.RepositoryConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository_config")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreSnapshotConfiguration) validateRestorePayload(formats strfmt.Registry) error {
	if swag.IsZero(m.RestorePayload) { // not required
		return nil
	}

	if m.RestorePayload != nil {
		if err := m.RestorePayload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_payload")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreSnapshotConfiguration) validateSnapshotName(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_name", "body", m.SnapshotName); err != nil {
		return err
	}

	return nil
}

var restoreSnapshotConfigurationTypeStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["partial","full","recovery"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restoreSnapshotConfigurationTypeStrategyPropEnum = append(restoreSnapshotConfigurationTypeStrategyPropEnum, v)
	}
}

const (

	// RestoreSnapshotConfigurationStrategyPartial captures enum value "partial"
	RestoreSnapshotConfigurationStrategyPartial string = "partial"

	// RestoreSnapshotConfigurationStrategyFull captures enum value "full"
	RestoreSnapshotConfigurationStrategyFull string = "full"

	// RestoreSnapshotConfigurationStrategyRecovery captures enum value "recovery"
	RestoreSnapshotConfigurationStrategyRecovery string = "recovery"
)

// prop value enum
func (m *RestoreSnapshotConfiguration) validateStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restoreSnapshotConfigurationTypeStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RestoreSnapshotConfiguration) validateStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateStrategyEnum("strategy", "body", m.Strategy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this restore snapshot configuration based on the context it is used
func (m *RestoreSnapshotConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepositoryConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestorePayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSnapshotConfiguration) contextValidateRepositoryConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RepositoryConfig != nil {
		if err := m.RepositoryConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository_config")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreSnapshotConfiguration) contextValidateRestorePayload(ctx context.Context, formats strfmt.Registry) error {

	if m.RestorePayload != nil {
		if err := m.RestorePayload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restore_payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreSnapshotConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreSnapshotConfiguration) UnmarshalBinary(b []byte) error {
	var res RestoreSnapshotConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
