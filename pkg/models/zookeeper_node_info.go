// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZookeeperNodeInfo Information about a ZooKeeper node.
//
// swagger:model ZookeeperNodeInfo
type ZookeeperNodeInfo struct {

	// Identifier of this ZooKeeper node
	// Required: true
	ID *string `json:"id"`

	// State of the ZooKeeper node
	// Required: true
	// Enum: [connected suspended reconnected lost read_only]
	State *string `json:"state"`
}

// Validate validates this zookeeper node info
func (m *ZookeeperNodeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZookeeperNodeInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var zookeeperNodeInfoTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connected","suspended","reconnected","lost","read_only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zookeeperNodeInfoTypeStatePropEnum = append(zookeeperNodeInfoTypeStatePropEnum, v)
	}
}

const (

	// ZookeeperNodeInfoStateConnected captures enum value "connected"
	ZookeeperNodeInfoStateConnected string = "connected"

	// ZookeeperNodeInfoStateSuspended captures enum value "suspended"
	ZookeeperNodeInfoStateSuspended string = "suspended"

	// ZookeeperNodeInfoStateReconnected captures enum value "reconnected"
	ZookeeperNodeInfoStateReconnected string = "reconnected"

	// ZookeeperNodeInfoStateLost captures enum value "lost"
	ZookeeperNodeInfoStateLost string = "lost"

	// ZookeeperNodeInfoStateReadOnly captures enum value "read_only"
	ZookeeperNodeInfoStateReadOnly string = "read_only"
)

// prop value enum
func (m *ZookeeperNodeInfo) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, zookeeperNodeInfoTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ZookeeperNodeInfo) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this zookeeper node info based on context it is used
func (m *ZookeeperNodeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ZookeeperNodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZookeeperNodeInfo) UnmarshalBinary(b []byte) error {
	var res ZookeeperNodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
