// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterInfo A container for information about an Elasticsearch cluster, Kibana instance, or APM Server.
//
// swagger:model ClusterInfo
type ClusterInfo struct {

	// The top level info object for APM
	Apm *ApmInfo `json:"apm,omitempty"`

	// The top level info object for App Search
	AppSearch *AppSearchInfo `json:"app_search,omitempty"`

	// The top-level object information for an Elasticsearch cluster.
	Elasticsearch *ElasticsearchClusterInfo `json:"elasticsearch,omitempty"`

	// The top level info object for Enterprise Search
	EnterpriseSearch *EnterpriseSearchInfo `json:"enterprise_search,omitempty"`

	// The top level info object for a Kibana cluster
	Kibana *KibanaClusterInfo `json:"kibana,omitempty"`
}

// Validate validates this cluster info
func (m *ClusterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElasticsearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterpriseSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKibana(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfo) validateApm(formats strfmt.Registry) error {
	if swag.IsZero(m.Apm) { // not required
		return nil
	}

	if m.Apm != nil {
		if err := m.Apm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apm")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) validateAppSearch(formats strfmt.Registry) error {
	if swag.IsZero(m.AppSearch) { // not required
		return nil
	}

	if m.AppSearch != nil {
		if err := m.AppSearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_search")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) validateElasticsearch(formats strfmt.Registry) error {
	if swag.IsZero(m.Elasticsearch) { // not required
		return nil
	}

	if m.Elasticsearch != nil {
		if err := m.Elasticsearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) validateEnterpriseSearch(formats strfmt.Registry) error {
	if swag.IsZero(m.EnterpriseSearch) { // not required
		return nil
	}

	if m.EnterpriseSearch != nil {
		if err := m.EnterpriseSearch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprise_search")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) validateKibana(formats strfmt.Registry) error {
	if swag.IsZero(m.Kibana) { // not required
		return nil
	}

	if m.Kibana != nil {
		if err := m.Kibana.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kibana")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster info based on the context it is used
func (m *ClusterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElasticsearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterpriseSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKibana(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfo) contextValidateApm(ctx context.Context, formats strfmt.Registry) error {

	if m.Apm != nil {
		if err := m.Apm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apm")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) contextValidateAppSearch(ctx context.Context, formats strfmt.Registry) error {

	if m.AppSearch != nil {
		if err := m.AppSearch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_search")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) contextValidateElasticsearch(ctx context.Context, formats strfmt.Registry) error {

	if m.Elasticsearch != nil {
		if err := m.Elasticsearch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elasticsearch")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) contextValidateEnterpriseSearch(ctx context.Context, formats strfmt.Registry) error {

	if m.EnterpriseSearch != nil {
		if err := m.EnterpriseSearch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprise_search")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfo) contextValidateKibana(ctx context.Context, formats strfmt.Registry) error {

	if m.Kibana != nil {
		if err := m.Kibana.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kibana")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInfo) UnmarshalBinary(b []byte) error {
	var res ClusterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
