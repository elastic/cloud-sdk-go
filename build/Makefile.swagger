#### SDK generation targets

MODELS_DIR ?= pkg/models
CLIENT_DIR ?= pkg/client
SOURCE_FILE ?= api/apidocs.json
SWAGGER_FILE ?= api/swagger.json
SWAGGER_GENERATE_CLIENT_FLAGS ?= --skip-validation
DOCKER_IMAGE ?= $(BINARY)-swagger:latest
DOCKER_REPO_PATH := /go/src/github.com/elastic/cloud-sdk-go
DOCKER_MOUNT_DIRS := -v "$(GOPATH):/go" -v "$(shell pwd):$(DOCKER_REPO_PATH)"
DOCKER_CMD ?= docker run --rm $(DOCKER_MOUNT_DIRS) -w $(DOCKER_REPO_PATH) $(DOCKER_IMAGE)

ifndef EDITOR
override EDITOR = vim
endif

## Generates the necessary Go SDK source files from the specified SWAGGER_FILE, to control the models folder, use MODELS_DIR
##   Likewise, to control the where the autogenerated client folder use CLIENT_DIR.
##   The swagger generate command flags can be overridden with SWAGGER_GENERATE_CLIENT_FLAGS.
.PHONY: swagger
swagger: deps vendor _prepare _cleanup
	@ $(GOBIN)/swagger generate client $(SWAGGER_GENERATE_CLIENT_FLAGS) -f $(SWAGGER_FILE) -m $(MODELS_DIR) -c $(CLIENT_DIR)
	@ make vendor
	@ make format
	@ rm -f $(SWAGGER_FILE)
	@ echo '--> Please update "pkg/api/version.go" with the version number of the ECE compatible definition just used for code generation.'
	@ read -p "-> Press enter to open the file with $(EDITOR)"
	@ $(EDITOR) pkg/api/version.go
	@ echo "-> Done."

## Runs the sdk generation inside a docker container.
.PHONY: docker-swagger
docker-swagger: image
	@ $(DOCKER_CMD) make swagger
	@ docker rmi $(DOCKER_IMAGE)

.PHONY: image
image:
	@ echo "-> Building docker image..."
	@ docker build -t $(DOCKER_IMAGE) .

.PHONY: _cleanup
_cleanup:
	@ rm -rf $(CLIENT_DIR) $(MODELS_DIR)

.PHONY: _prepare
_prepare:
	@ go run cmd/generator/main.go -source $(SOURCE_FILE) -destination $(SWAGGER_FILE)
	@ echo "-> Finished converting the source spec"
	@ echo "-> Generating the golang client and models..."
ifeq ($(shell uname -s),Darwin)
	@ sed -i '' 's/{{hostname}}/localhost/g' $(SWAGGER_FILE)
else
	@ sed -i -e 's/{{hostname}}/localhost/g' $(SWAGGER_FILE)
endif
